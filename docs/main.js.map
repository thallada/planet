{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/shapes/hexsphere_r1_d4.bin","webpack:///./node_modules/gl-mat4/identity.js","webpack:///./src/shapes/hexsphere_r1_d0.bin","webpack:///./src/shapes/hexsphere_r1_d1.bin","webpack:///./src/shapes/hexsphere_r1_d2.bin","webpack:///./src/shapes/hexsphere_r1_d3.bin","webpack:///./src/shapes/hexsphere_r1_d5.bin","webpack:///./src/shapes/hexsphere_r1_d6.bin","webpack:///./src/shapes/icosahedron_r1_d0.bin","webpack:///./src/shapes/icosahedron_r1_d1.bin","webpack:///./src/shapes/icosahedron_r1_d2.bin","webpack:///./src/shapes/icosahedron_r1_d3.bin","webpack:///./src/shapes/icosahedron_r1_d4.bin","webpack:///./src/shapes/icosahedron_r1_d5.bin","webpack:///./src/shapes/icosahedron_r1_d6.bin","webpack:///./src/shapes/icosahedron_r1_d7.bin","webpack:///./src/regl_index.js","webpack:///./node_modules/regl/dist/regl.js","webpack:///./node_modules/regl-camera/regl-camera.js","webpack:///./node_modules/mouse-change/mouse-listen.js","webpack:///./node_modules/mouse-event/mouse.js","webpack:///./node_modules/mouse-wheel/wheel.js","webpack:///./node_modules/to-px/browser.js","webpack:///./node_modules/parse-unit/index.js","webpack:///./node_modules/gl-mat4/perspective.js","webpack:///./node_modules/gl-mat4/lookAt.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","out","__webpack_exports__","_shapes_hexsphere_r1_d0_bin__WEBPACK_IMPORTED_MODULE_0__","_shapes_hexsphere_r1_d0_bin__WEBPACK_IMPORTED_MODULE_0___default","_shapes_hexsphere_r1_d1_bin__WEBPACK_IMPORTED_MODULE_1__","_shapes_hexsphere_r1_d1_bin__WEBPACK_IMPORTED_MODULE_1___default","_shapes_hexsphere_r1_d2_bin__WEBPACK_IMPORTED_MODULE_2__","_shapes_hexsphere_r1_d2_bin__WEBPACK_IMPORTED_MODULE_2___default","_shapes_hexsphere_r1_d3_bin__WEBPACK_IMPORTED_MODULE_3__","_shapes_hexsphere_r1_d3_bin__WEBPACK_IMPORTED_MODULE_3___default","_shapes_hexsphere_r1_d4_bin__WEBPACK_IMPORTED_MODULE_4__","_shapes_hexsphere_r1_d4_bin__WEBPACK_IMPORTED_MODULE_4___default","_shapes_hexsphere_r1_d5_bin__WEBPACK_IMPORTED_MODULE_5__","_shapes_hexsphere_r1_d5_bin__WEBPACK_IMPORTED_MODULE_5___default","_shapes_hexsphere_r1_d6_bin__WEBPACK_IMPORTED_MODULE_6__","_shapes_hexsphere_r1_d6_bin__WEBPACK_IMPORTED_MODULE_6___default","_shapes_icosahedron_r1_d0_bin__WEBPACK_IMPORTED_MODULE_7__","_shapes_icosahedron_r1_d0_bin__WEBPACK_IMPORTED_MODULE_7___default","_shapes_icosahedron_r1_d1_bin__WEBPACK_IMPORTED_MODULE_8__","_shapes_icosahedron_r1_d1_bin__WEBPACK_IMPORTED_MODULE_8___default","_shapes_icosahedron_r1_d2_bin__WEBPACK_IMPORTED_MODULE_9__","_shapes_icosahedron_r1_d2_bin__WEBPACK_IMPORTED_MODULE_9___default","_shapes_icosahedron_r1_d3_bin__WEBPACK_IMPORTED_MODULE_10__","_shapes_icosahedron_r1_d3_bin__WEBPACK_IMPORTED_MODULE_10___default","_shapes_icosahedron_r1_d4_bin__WEBPACK_IMPORTED_MODULE_11__","_shapes_icosahedron_r1_d4_bin__WEBPACK_IMPORTED_MODULE_11___default","_shapes_icosahedron_r1_d5_bin__WEBPACK_IMPORTED_MODULE_12__","_shapes_icosahedron_r1_d5_bin__WEBPACK_IMPORTED_MODULE_12___default","_shapes_icosahedron_r1_d6_bin__WEBPACK_IMPORTED_MODULE_13__","_shapes_icosahedron_r1_d6_bin__WEBPACK_IMPORTED_MODULE_13___default","_shapes_icosahedron_r1_d7_bin__WEBPACK_IMPORTED_MODULE_14__","_shapes_icosahedron_r1_d7_bin__WEBPACK_IMPORTED_MODULE_14___default","shapes","hexsphere_0","a","hexsphere_1","hexsphere_2","hexsphere_3","hexsphere_4","hexsphere_5","hexsphere_6","icosahedron_0","icosahedron_1","icosahedron_2","icosahedron_3","icosahedron_4","icosahedron_5","icosahedron_6","icosahedron_7","regl","extensions","camera","center","distance","draw","loadShape","shape","fetch","then","response","arrayBuffer","buffer","reader","DataView","numVertices","getUint32","numCells","shapeData","positions","Float32Array","normals","colors","cells","Uint32Array","hexsphere","vert","frag","attributes","position","normal","color","elements","uniforms","lights[0].color","lights[0].position","tick","Math","cos","sin","drawShape","frame","clear","depth","shapeSelectLoading","style","display","shapeSelect","document","querySelector","addEventListener","event","target","isTypedArray","x","Uint8Array","Uint16Array","Int8Array","Int16Array","Int32Array","Float64Array","Uint8ClampedArray","extend","base","opts","keys","length","endl","raise","message","error","Error","console","check","pred","encolon","checkOneOf","list","indexOf","constructorKeys","leftPad","str","ShaderFile","this","lines","index","hasErrors","ShaderLine","number","line","errors","ShaderError","fileNumber","lineNumber","file","guessCommand","stack","toString","pat","exec","pat2","guessCallSite","parseSource","source","command","split","files","unknown","0","push","parts","lineNumberInfo","nameInfo","atob","forEach","saveCommandRef","_commandRef","commandRaise","callSite","checkCommandType","type","GL_CLAMP_TO_EDGE","GL_NEAREST","GL_NEAREST_MIPMAP_NEAREST","GL_LINEAR_MIPMAP_NEAREST","GL_NEAREST_MIPMAP_LINEAR","GL_LINEAR_MIPMAP_LINEAR","GL_FLOAT","GL_UNSIGNED_SHORT_4_4_4_4","GL_UNSIGNED_SHORT_5_5_5_1","GL_UNSIGNED_SHORT_5_6_5","GL_UNSIGNED_INT_24_8_WEBGL","TYPE_SIZE","pixelSize","channels","isPow2","v","check$1","optional","block","parameter","param","possibilities","join","commandParameter","constructor","obj","commandType","data","nni","oneOf","shaderError","gl","shader","getShaderParameter","COMPILE_STATUS","errLog","getShaderInfoLog","typeName","FRAGMENT_SHADER","result","errMsg","trim","parseErrorLog","annotateFiles","strings","styles","offset","token","tokenPat","max","window","chrome","log","apply","linkError","program","fragShader","vertShader","getProgramParameter","LINK_STATUS","getProgramInfoLog","fragParse","vertParse","header","saveDrawInfo","stringStore","id","addProps","dict","set","u","_fragId","static","_vertId","uniformSet","_uniformSet","dynamic","attributeSet","_attributeSet","_hasCount","framebufferFormat","attachment","texFormats","rbFormats","texture","_texture","internalformat","renderbuffer","_renderbuffer","format","texture2D","info","mipData","limits","w","width","h","height","maxTextureSize","wrapS","wrapT","mipmask","minFilter","magFilter","genMipmaps","mipimages","images","mw","mh","img","compressed","rowSize","ceil","unpackAlignment","byteLength","element","copy","textureCube","faces","face","mipmaps","j","VARIABLE_COUNTER","DYN_FUNC","DynamicVariable","escapeStr","replace","toAccessorString","splitParts","firstChar","charAt","lastChar","substr","concat","subparts","define","isDynamic","_reglType","unbox","path","accessor","raf","next","requestAnimationFrame","cb","setTimeout","cancel","cancelAnimationFrame","clearTimeout","clock","performance","now","Date","parseExtensions","input","Array","isArray","getElement","desc","parseArgs","args_","container","canvas","args","contextAttributes","optionalExtensions","pixelRatio","devicePixelRatio","profile","onDone","err","onDestroy","nodeName","appendChild","getBoundingClientRect","drawArrays","drawElements","isWebGLContext","toLowerCase","createElement","resize","innerWidth","innerHeight","body","bounds","right","left","bottom","top","border","margin","padding","removeEventListener","removeChild","createCanvas","getContext","e","createContext","loop","f","GL_BYTE$1","GL_UNSIGNED_BYTE$2","GL_SHORT$1","GL_UNSIGNED_SHORT$1","GL_INT$1","GL_UNSIGNED_INT$1","GL_FLOAT$2","log2","shift","createPool","bufferPool","alloc","sz","nextPow16","bin","pop","ArrayBuffer","free","buf","allocType","subarray","freeType","array","pool","zero","wrapLimits","maxAnisotropic","ext_texture_filter_anisotropic","getParameter","maxDrawbuffers","maxColorAttachments","webgl_draw_buffers","readFloat","oes_texture_float","readFloatTexture","createTexture","bindTexture","texImage2D","fbo","createFramebuffer","bindFramebuffer","framebufferTexture2D","checkFramebufferStatus","viewport","clearColor","pixels","readPixels","getError","deleteFramebuffer","deleteTexture","isIE","navigator","test","userAgent","appVersion","npotTextureCube","cubeTexture","activeTexture","colorBits","depthBits","stencilBits","subpixelBits","filter","ext","pointSizeDims","lineWidthDims","maxViewportDims","maxCombinedTextureUnits","maxCubeMapSize","maxRenderbufferSize","maxTextureUnits","maxAttributes","maxVertexUniforms","maxVertexTextureUnits","maxVaryingVectors","maxFragmentUniforms","glsl","renderer","vendor","version","isNDArrayLike","stride","values","map","flattenUtils","array_","flatten","out_","nx","flatten1D","ny","ptr","row","flatten2D","flatten3D","flattenRec","level","nz","ptr_","col","k","arrayTypes","[object Int8Array]","[object Int16Array]","[object Int32Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Uint16Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]","[object ArrayBuffer]","glTypes","int8","int16","int32","uint8","uint16","uint32","float","float32","usageTypes","stream","arrayFlatten","arrayShape","GL_STATIC_DRAW","GL_STREAM_DRAW","GL_UNSIGNED_BYTE$3","GL_FLOAT$3","DTYPES_SIZES","typedArrayCode","copyArray","inp","transpose","shapeX","shapeY","strideX","strideY","primTypes","points","point","triangles","triangle","line loop","line strip","triangle strip","triangle fan","GL_POINTS","GL_LINES","GL_TRIANGLES","GL_BYTE$2","GL_UNSIGNED_BYTE$4","GL_SHORT$2","GL_UNSIGNED_SHORT$2","GL_INT$2","GL_UNSIGNED_INT$2","GL_ELEMENT_ARRAY_BUFFER","GL_STREAM_DRAW$1","GL_STATIC_DRAW$1","FLOAT","INT","GL_UNSIGNED_SHORT$4","convertToHalfFloat","ushorts","isNaN","Infinity","sgn","exp","frac","isArrayLike","isPow2$1","GL_COMPRESSED_TEXTURE_FORMATS","GL_TEXTURE_2D$1","GL_TEXTURE_CUBE_MAP$1","GL_TEXTURE_CUBE_MAP_POSITIVE_X$1","GL_RGBA$1","GL_ALPHA","GL_RGB","GL_LUMINANCE","GL_LUMINANCE_ALPHA","GL_RGBA4","GL_RGB5_A1","GL_RGB565","GL_UNSIGNED_SHORT_4_4_4_4$1","GL_UNSIGNED_SHORT_5_5_5_1$1","GL_UNSIGNED_SHORT_5_6_5$1","GL_UNSIGNED_INT_24_8_WEBGL$1","GL_DEPTH_COMPONENT","GL_DEPTH_STENCIL","GL_SRGB_EXT","GL_SRGB_ALPHA_EXT","GL_HALF_FLOAT_OES$1","GL_COMPRESSED_RGB_S3TC_DXT1_EXT","GL_COMPRESSED_RGBA_S3TC_DXT1_EXT","GL_COMPRESSED_RGBA_S3TC_DXT3_EXT","GL_COMPRESSED_RGBA_S3TC_DXT5_EXT","GL_COMPRESSED_RGB_ATC_WEBGL","GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL","GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL","GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG","GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG","GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","GL_COMPRESSED_RGB_ETC1_WEBGL","GL_UNSIGNED_BYTE$5","GL_UNSIGNED_SHORT$3","GL_UNSIGNED_INT$3","GL_FLOAT$4","GL_TEXTURE_WRAP_S","GL_TEXTURE_WRAP_T","GL_REPEAT","GL_CLAMP_TO_EDGE$1","GL_MIRRORED_REPEAT","GL_TEXTURE_MAG_FILTER","GL_TEXTURE_MIN_FILTER","GL_NEAREST$1","GL_LINEAR","GL_NEAREST_MIPMAP_NEAREST$1","GL_LINEAR_MIPMAP_NEAREST$1","GL_NEAREST_MIPMAP_LINEAR$1","GL_LINEAR_MIPMAP_LINEAR$1","GL_GENERATE_MIPMAP_HINT","GL_DONT_CARE","GL_FASTEST","GL_NICEST","GL_TEXTURE_MAX_ANISOTROPY_EXT","GL_UNPACK_ALIGNMENT","GL_UNPACK_FLIP_Y_WEBGL","GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL","GL_UNPACK_COLORSPACE_CONVERSION_WEBGL","GL_BROWSER_DEFAULT_WEBGL","GL_TEXTURE0$1","MIPMAP_FILTERS","CHANNELS_FORMAT","FORMAT_CHANNELS","objectName","CANVAS_CLASS","CONTEXT2D_CLASS","BITMAP_CLASS","IMAGE_CLASS","VIDEO_CLASS","PIXEL_CLASSES","TYPE_SIZES","FORMAT_SIZES_SPECIAL","isNumericArray","arr","isRectArray","classString","isCanvasElement","isPixelData","className","typedArrayCode$1","preConvert","image","postConvert","getTextureSize","isMipmap","isCube","total","createTextureSet","reglPoll","contextState","stats","config","mipmapHint","don't care","dont care","nice","fast","wrapModes","repeat","clamp","mirror","magFilters","nearest","linear","minFilters","mipmap","nearest mipmap nearest","linear mipmap nearest","nearest mipmap linear","linear mipmap linear","colorSpace","none","browser","textureTypes","rgba4","rgb565","rgb5 a1","textureFormats","alpha","luminance","luminance alpha","rgb","rgba","compressedTextureFormats","ext_srgb","srgb","srgba","oes_texture_half_float","webgl_depth_texture","depth stencil","webgl_compressed_texture_s3tc","rgb s3tc dxt1","rgba s3tc dxt1","rgba s3tc dxt3","rgba s3tc dxt5","webgl_compressed_texture_atc","rgb atc","rgba atc explicit alpha","rgba atc interpolated alpha","webgl_compressed_texture_pvrtc","rgb pvrtc 4bppv1","rgb pvrtc 2bppv1","rgba pvrtc 4bppv1","rgba pvrtc 2bppv1","webgl_compressed_texture_etc1","supportedCompressedFormats","slice","supportedFormats","textureFormatsInvert","val","textureTypesInvert","magFiltersInvert","minFiltersInvert","wrapModesInvert","colorFormats","reduce","glenum","TexFlags","premultiplyAlpha","flipY","copyFlags","other","parseFlags","flags","options","alignment","hasChannels","radius","hasFormat","formatStr","setFlags","pixelStorei","TexImage","xOffset","yOffset","needsFree","needsCopy","parseImage","y","viewW","viewportWidth","viewH","viewportHeight","converted","convertData","shapeC","strideC","transposeData","isBitmap","isImageElement","naturalWidth","naturalHeight","isVideoElement","videoWidth","videoHeight","dd","allocData","setImage","miplevel","compressedTexImage2D","copyTexImage2D","nullData","setSubImage","texSubImage2D","compressedTexSubImage2D","copyTexSubImage2D","imagePool","allocImage","freeImage","MipMap","parseMipMapFromShape","parseMipMapFromObject","imgData","setMipMap","mipPool","allocMipMap","freeMipMap","TexInfo","anisotropic","parseTexInfo","min","mag","wrap","optWrapS","optWrapT","hasMipMap","setTexInfo","texParameteri","hint","generateMipmap","textureCount","textureSet","numTexUnits","textureUnits","REGLTexture","refCount","unit","bindCount","texInfo","size","tempBind","tempRestore","prev","destroy","handle","params","unbind","decRef","getTotalTextureSize","create2D","b","reglTexture2D","subimage","x_","y_","level_","imageData","w_","h_","_w","_h","createCube","a0","a1","a2","a3","a4","a5","cubeCount","reglTextureCube","face_input","radius_","getTexture","wrapper","restore","tex","GL_RENDERBUFFER","GL_RGBA4$1","FORMAT_SIZES","getRenderbufferSize","wrapRenderbuffers","formatTypes","stencil","ext_color_buffer_half_float","webgl_color_buffer_float","formatTypesInvert","renderbufferCount","renderbufferSet","REGLRenderbuffer","rb","bindRenderbuffer","deleteRenderbuffer","getTotalRenderbufferSize","createRenderbuffer","reglRenderbuffer","renderbufferStorage","GL_FRAMEBUFFER$1","GL_RENDERBUFFER$1","GL_TEXTURE_2D$2","GL_TEXTURE_CUBE_MAP_POSITIVE_X$2","GL_COLOR_ATTACHMENT0$1","GL_DEPTH_ATTACHMENT","GL_STENCIL_ATTACHMENT","GL_DEPTH_STENCIL_ATTACHMENT","GL_FRAMEBUFFER_COMPLETE$1","GL_DEPTH_COMPONENT$1","colorTextureFormatEnums","textureFormatChannels","textureTypeSizes","GL_DEPTH_COMPONENT16$1","GL_STENCIL_INDEX8$1","GL_DEPTH_STENCIL$2","colorRenderbufferFormatEnums","statusCode","GL_FLOAT$6","AttributeRecord","state","z","normalized","divisor","GL_FRAGMENT_SHADER","GL_VERTEX_SHADER","GL_ACTIVE_UNIFORMS","GL_ACTIVE_ATTRIBUTES","GL_RGBA$3","GL_UNSIGNED_BYTE$7","GL_PACK_ALIGNMENT","GL_FLOAT$7","wrapReadPixels","framebufferState","context","glAttributes","readPixelsImpl","preserveDrawingBuffer","colorAttachments","framebufferWidth","framebufferHeight","setFBO","framebuffer","readPixelsFBO","CUTE_COMPONENTS","GL_UNSIGNED_BYTE$8","ATTRIB_STATE_POINTER","ATTRIB_STATE_CONSTANT","DYN_FUNC$1","DYN_PROP$1","DYN_CONTEXT$1","DYN_STATE$1","DYN_THUNK","S_DITHER","S_BLEND_ENABLE","S_BLEND_COLOR","S_BLEND_EQUATION","S_BLEND_FUNC","S_DEPTH_ENABLE","S_DEPTH_FUNC","S_DEPTH_RANGE","S_DEPTH_MASK","S_COLOR_MASK","S_CULL_ENABLE","S_CULL_FACE","S_FRONT_FACE","S_LINE_WIDTH","S_POLYGON_OFFSET_ENABLE","S_POLYGON_OFFSET_OFFSET","S_SAMPLE_ALPHA","S_SAMPLE_ENABLE","S_SAMPLE_COVERAGE","S_STENCIL_ENABLE","S_STENCIL_MASK","S_STENCIL_FUNC","S_STENCIL_OPFRONT","S_STENCIL_OPBACK","S_SCISSOR_ENABLE","S_SCISSOR_BOX","S_VIEWPORT","S_PROFILE","S_FRAMEBUFFER","S_VERT","S_FRAG","S_ELEMENTS","S_PRIMITIVE","S_COUNT","S_OFFSET","S_INSTANCES","S_FRAMEBUFFER_WIDTH","S_FRAMEBUFFER_HEIGHT","S_VIEWPORT_WIDTH","S_VIEWPORT_HEIGHT","S_DRAWINGBUFFER_WIDTH","S_DRAWINGBUFFER","S_DRAWINGBUFFER_HEIGHT","NESTED_OPTIONS","GL_ARRAY_BUFFER$1","GL_ELEMENT_ARRAY_BUFFER$1","GL_TEXTURE_2D$3","GL_TEXTURE_CUBE_MAP$2","GL_CULL_FACE","GL_BLEND","GL_DITHER","GL_STENCIL_TEST","GL_DEPTH_TEST","GL_SCISSOR_TEST","GL_POLYGON_OFFSET_FILL","GL_SAMPLE_ALPHA_TO_COVERAGE","GL_SAMPLE_COVERAGE","GL_FLOAT$8","GL_FLOAT_VEC2","GL_FLOAT_VEC3","GL_FLOAT_VEC4","GL_INT$3","GL_INT_VEC2","GL_INT_VEC3","GL_INT_VEC4","GL_BOOL","GL_BOOL_VEC2","GL_BOOL_VEC3","GL_BOOL_VEC4","GL_FLOAT_MAT2","GL_FLOAT_MAT3","GL_FLOAT_MAT4","GL_SAMPLER_2D","GL_SAMPLER_CUBE","GL_TRIANGLES$1","GL_FRONT","GL_BACK","GL_CW","GL_CCW","GL_MIN_EXT","GL_MAX_EXT","GL_ALWAYS","GL_KEEP","GL_ZERO","GL_ONE","GL_FUNC_ADD","GL_LESS","GL_FRAMEBUFFER$2","GL_COLOR_ATTACHMENT0$2","blendFuncs","1","one","src color","one minus src color","src alpha","one minus src alpha","dst color","one minus dst color","dst alpha","one minus dst alpha","constant color","one minus constant color","constant alpha","one minus constant alpha","src alpha saturate","invalidBlendCombinations","compareFuncs","never","less","<","equal","=","==","===","lequal","<=","greater",">","notequal","!=","!==","gequal",">=","always","stencilOps","keep","increment","decrement","increment wrap","decrement wrap","invert","shaderType","orientationType","cw","ccw","isBufferArgs","sortState","sort","Declaration","thisDep","contextDep","propDep","append","isStatic","decl","createStaticDecl","createDynamicDecl","dyn","numArgs","SCOPE_DECL","reglCore","bufferState","elementState","textureState","uniformState","attributeState","shaderState","drawState","timer","Record","blendEquations","add","subtract","reverse subtract","ext_blend_minmax","extInstancing","angle_instanced_arrays","extDrawBuffers","currentState","dirty","nextState","GL_STATE_NAMES","GL_FLAGS","GL_VARIABLES","propName","stateFlag","sname","cap","init","stateVariable","func","drawingBufferWidth","drawingBufferHeight","sharedState","current","sharedConstants","backBuffer","drawBuffer","drawCallCounter","createREGLEnvironment","env","varCounter","linkedNames","linkedValues","code","vars","arguments","def","scope","entry","exit","entryToString","exitToString","save","prop","globalBlock","procedures","global","link","proc","count","arg","bodyToString","cond","thenBlock","elseBlock","thenToString","elseToString","else","elseClause","compile","src","Function","createEnvironment","batchId","SHARED","shared","props","CHECK","commandStr","assert","nextVars","currentVars","variable","constants","JSON","stringify","invoke","argList","ref","attribCache","scopeAttribs","scopeAttrib","binding","parseArguments","staticOptions","dynamicOptions","KEY_NAMES","checkKeys","getFramebuffer","FRAMEBUFFER","CONTEXT","FRAMEBUFFER_FUNC","FRAMEBUFFER_STATE","parseFramebuffer","viewportAndScissor","parseBox","box","BOX_W","BOX_H","dynBox","BOX","BOX_X","BOX_Y","prevViewport","VIEWPORT","scissor_box","parseViewportScissor","getElements","ELEMENTS","IS_BUFFER_ARGS","ELEMENT_STATE","elementDefn","elementStream","ifte","parseElements","parseParam","isOffset","OFFSET","dynValue","primitive","dynPrimitive","PRIM_TYPES","prim","parsePrimitive","dynCount","MISSING","DYNAMIC","parseVertCount","instances","parseDraw","STATE","parseStatic","parseDynamic","COMPARE_FUNCS","srcRGB","srcAlpha","dstRGB","dst","dstAlpha","BLEND_FUNCS","read","prefix","suffix","INVALID_BLEND_COMBINATIONS","SRC_RGB","SRC_ALPHA","BLEND_EQUATIONS","RGB","ALPHA","checkProp","cmp","mask","fail","zfail","zpass","STENCIL_OPS","factor","units","sampleValue","sampleInvert","parseGLState","parseShader","progVar","fragId","vertId","SHADER_STATE","progDef","parseProgram","copyBox","defn","profileEnable","enable","parseProfile","staticUniforms","dynamicUniforms","UNIFORMS","reglType","parseUniforms","staticAttributes","dynamicAttributes","attributeDefs","attribute","record","getBuffer","constant","VALID_KEYS","dtype","cache","isStream","VALUE","BUFFER_STATE","defaultRecord","BUFFER","TYPE","emitReadRecord","parseAttributes","staticContext","dynamicContext","parseContext","emitContext","contextEnter","emitPollFramebuffer","skipCheck","EXT_DRAW_BUFFERS","GL","NEXT","DRAW_BUFFERS","BACK_BUFFER","emitPollState","CURRENT_VARS","NEXT_VARS","CURRENT_STATE","NEXT_STATE","CURRENT","emitSetOptions","flag","injectExtensions","instancing","emitProfile","useScope","incrementCounter","CPU_START","QUERY_COUNTER","USE_PROFILE","STATS","TIMER","profileArg","perfCounter","emitProfileStart","emitProfileEnd","scopeProfile","start","end","emitAttributes","ATTRIBUTE","LOCATION","BINDING","CONST_COMPONENTS","COMMON_KEYS","emitBuffer","SIZE","DIVISOR","emitConstant","emitBindAttribute","typeLength","emitUniforms","infix","uniform","UNIFORM","TEX_VALUE","MAT_VALUE","dim","checkType","checkVector","checkTexture","unroll","TEX","matSize","pow","STORAGE","emitDraw","outer","inner","DRAW_STATE","drawOptions","contextDynamic","emitElements","emitValue","INSTANCES","EXT_INSTANCING","PRIMITIVE","COUNT","emitCount","ELEMENT_TYPE","elementsStatic","emitInstancing","emitRegular","createBody","emitBody","parentEnv","emitDrawBody","emitBatchDynamicShaderBody","all","emitBatchBody","BATCH_ID","PROPS","isInnerDefn","isOuterDefn","needsContext","needsFramebuffer","progCache","PROGRAM","PROG_ID","CACHED_PROC","splatObject","isDynamicObject","globals","objectRef","deps","procs","poll","refresh","common","INSTANCING","drawCache","emitDrawProc","saveShader","opt","emitScopeProc","batch","progDefn","batchCache","emitBatchProc","GL_QUERY_RESULT_EXT","GL_QUERY_RESULT_AVAILABLE_EXT","GL_TIME_ELAPSED_EXT","createTimer","ext_disjoint_timer_query","queryPool","freeQuery","query","pendingQueries","PendingStats","startQueryIndex","endQueryIndex","sum","pendingStatsPool","freePendingStats","pendingStats","pushScopeStats","ps","timeSum","queryPtr","beginQuery","createQueryEXT","beginQueryEXT","endQuery","endQueryEXT","update","queryTime","getQueryObjectEXT","startPtr","endPtr","gpuTime","getNumPendingQueries","deleteQueryEXT","GL_COLOR_BUFFER_BIT","GL_DEPTH_BUFFER_BIT","GL_STENCIL_BUFFER_BIT","GL_ARRAY_BUFFER","CONTEXT_LOST_EVENT","CONTEXT_RESTORED_EVENT","DYN_PROP","DYN_CONTEXT","DYN_STATE","find","haystack","needle","getContextAttributes","contextLost","isContextLost","extensionState","tryLoadExtension","name_","getExtension","createExtensionCache","stringIds","stringValues","","stats$$1","bufferCount","elementsCount","framebufferCount","shaderCount","START_TIME","WIDTH","HEIGHT","time","NUM_ATTRIBUTES","attributeBindings","wrapAttributeState","bufferSet","REGLBuffer","createBuffer","usage","dimension","persistentData","bindBuffer","streamPool","initBufferFromTypedArray","bufferData","initBufferFromData","persist","flatData","typedData","disableVertexAttribArray","deleteBuffer","getTotalBufferSize","deferInit","persistent","reglBuffer","setSubData","bufferSubData","_buffer","subdata","offset_","createStream","destroyStream","stream$$1","_initBuffer","wrapBufferState","elementSet","elementCount","elementTypes","REGLElementBuffer","primType","vertCount","oes_element_index_uint","initElements","predictedType","destroyElements","reglElements","_elements","wrapElementsState","fragShaders","vertShaders","ActiveInfo","location","insertActiveInfo","getShader","createShader","shaderSource","compileShader","programCache","programList","PROGRAM_COUNTER","REGLProgram","uniformsCount","attributesCount","linkProgram","createProgram","attachShader","numUniforms","getActiveUniform","getUniformLocation","numAttributes","getActiveAttrib","getAttribLocation","getMaxUniformsCount","getMaxAttributesCount","deleteShader","deleteProgram","wrapShaderState","core","renderbufferState","cur","colorTextureFormats","colorRenderbufferFormats","colorTypes","FramebufferAttachment","incRefAndCheckShape","tw","th","attach","framebufferRenderbuffer","parseAttachment","allocAttachment","isTexture","unwrapAttachment","resizeAttachment","framebufferSet","REGLFramebuffer","depthAttachment","stencilAttachment","depthStencilAttachment","decFBORefs","updateFramebuffer","status","createFBO","reglFramebuffer","needsDepth","needsStencil","colorBuffer","colorTexture","colorFormat","colorType","colorCount","depthBuffer","stencilBuffer","depthStencilBuffer","depthStencilTexture","depthTexture","depthStencil","commonColorAttachmentSize","colorAttachmentSize","_framebuffer","use","reglFramebufferCube","colorCubes","cubeMapParams","cube","fb","wrapFBOState","rafCallbacks","lossCallbacks","restoreCallbacks","destroyCallbacks","activeRAF","handleRAF","flush","startRAF","stopRAF","handleContextLoss","preventDefault","handleContextRestored","compileProcedure","separateDynamic","staticItems","dynamicItems","option","merge","child","op","opBack","opFront","flattenNestedOptions","cpuTime","compiled","EMPTY_ARRAY","reserve","clearImpl","_","clearFlags","clearDepth","clearStencil","pendingCancel","pollViewport","scissorBox","framebuffer_reglType","framebufferCube","on","callback","callbacks","hasExtension","_gl","_refresh","factory","mouseChange","mouseWheel","identity","perspective","lookAt","props_","noScroll","cameraState","view","projection","theta","phi","eye","up","fovy","PI","near","far","dtheta","dphi","rotationSpeed","zoomSpeed","renderOnDirty","undefined","damping","front","minDistance","maxDistance","ddistance","prevX","prevY","isBrowser","mouse","getHeight","offsetHeight","buttons","dx","offsetWidth","dy","damp","xd","abs","lo","hi","injectContext","assign","setupCamera","vf","vr","vu","updateCamera","buttonState","mods","alt","control","meta","attached","updateMods","ev","changed","altKey","shiftKey","ctrlKey","metaKey","handleEvent","nextButtons","nextX","nextY","clearState","handleBlur","handleMods","handleMouseMove","handleMouseDown","handleMouseUp","attachListeners","defineProperties","enabled","mouseElement","srcElement","which","button","offsetX","clientX","offsetY","clientY","toPX","lineHeight","listener","deltaX","deltaY","dz","deltaZ","deltaMode","scale","parseUnit","PIXELS_PER_INCH","getSizeBrutal","getPropertyInPX","getComputedStyle","getPropertyValue","testDIV","clientHeight","px","String","num","parseFloat","match","aspect","tan","nf","x0","x1","x2","y0","y1","y2","z0","z1","z2","len","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","sqrt"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","module.exports = __webpack_public_path__ + \"dcbe4e47e8a4cb4c76f00dc2ca584ea3.bin\";","module.exports = identity;\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nfunction identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};","module.exports = __webpack_public_path__ + \"8c72ff38eff4b3d878b6e59563fb2558.bin\";","module.exports = __webpack_public_path__ + \"c40f782b6d48c16bbdfa867a67914314.bin\";","module.exports = __webpack_public_path__ + \"670398984b2a839f0da3039cd8ae215a.bin\";","module.exports = __webpack_public_path__ + \"4cc86edf6517c35dd8aecdbf6a4b1a2e.bin\";","module.exports = __webpack_public_path__ + \"aad316ae2f3185e637764ab20f4536ee.bin\";","module.exports = __webpack_public_path__ + \"c5d1e42d1b2c2960ef12ca75b5e71fc1.bin\";","module.exports = __webpack_public_path__ + \"80e3348d39fbc859dfe0bb2cda08c5b1.bin\";","module.exports = __webpack_public_path__ + \"8ab0cc172cd882ef6b69422eaa5a502d.bin\";","module.exports = __webpack_public_path__ + \"88a1fb4d8c42c36a027c7ab503de7511.bin\";","module.exports = __webpack_public_path__ + \"a7a417e76651f9fa75e63e45e22095e6.bin\";","module.exports = __webpack_public_path__ + \"b8f9c879c9c795656294aa401ac3854c.bin\";","module.exports = __webpack_public_path__ + \"5293ee29e3db7bbd05f03823aa9bd53a.bin\";","module.exports = __webpack_public_path__ + \"6f2d59ca82e22144ee26889cc862912f.bin\";","module.exports = __webpack_public_path__ + \"f988ae2257d2f750090c9bda21c58f10.bin\";","import hexsphere_0 from \"./shapes/hexsphere_r1_d0.bin\"\nimport hexsphere_1 from \"./shapes/hexsphere_r1_d1.bin\"\nimport hexsphere_2 from \"./shapes/hexsphere_r1_d2.bin\"\nimport hexsphere_3 from \"./shapes/hexsphere_r1_d3.bin\"\nimport hexsphere_4 from \"./shapes/hexsphere_r1_d4.bin\"\nimport hexsphere_5 from \"./shapes/hexsphere_r1_d5.bin\"\nimport hexsphere_6 from \"./shapes/hexsphere_r1_d6.bin\"\nimport icosahedron_0 from \"./shapes/icosahedron_r1_d0.bin\"\nimport icosahedron_1 from \"./shapes/icosahedron_r1_d1.bin\"\nimport icosahedron_2 from \"./shapes/icosahedron_r1_d2.bin\"\nimport icosahedron_3 from \"./shapes/icosahedron_r1_d3.bin\"\nimport icosahedron_4 from \"./shapes/icosahedron_r1_d4.bin\"\nimport icosahedron_5 from \"./shapes/icosahedron_r1_d5.bin\"\nimport icosahedron_6 from \"./shapes/icosahedron_r1_d6.bin\"\nimport icosahedron_7 from \"./shapes/icosahedron_r1_d7.bin\"\n\nconst shapes = {\n  \"hexsphere_0\": hexsphere_0,\n  \"hexsphere_1\": hexsphere_1,\n  \"hexsphere_2\": hexsphere_2,\n  \"hexsphere_3\": hexsphere_3,\n  \"hexsphere_4\": hexsphere_4,\n  \"hexsphere_5\": hexsphere_5,\n  \"hexsphere_6\": hexsphere_6,\n  \"icosahedron_0\": icosahedron_0,\n  \"icosahedron_1\": icosahedron_1,\n  \"icosahedron_2\": icosahedron_2,\n  \"icosahedron_3\": icosahedron_3,\n  \"icosahedron_4\": icosahedron_4,\n  \"icosahedron_5\": icosahedron_5,\n  \"icosahedron_6\": icosahedron_6,\n  \"icosahedron_7\": icosahedron_7,\n}\n\nconst regl = require(\"regl\")({\n  extensions: [\"OES_element_index_uint\"],\n})\nconst camera = require(\"regl-camera\")(regl, {\n  center: [0, 0, 0],\n  distance: 3,\n})\n\nconst drawShape = hexsphere => regl({\n  vert: `\n  precision mediump float;\n  uniform mat4 projection, view;\n  attribute vec3 position, normal, color;\n  varying vec3 fragNormal, fragPosition, fragColor;\n  void main() {\n    fragNormal = normal;\n    fragPosition = position;\n    fragColor = color;\n    gl_Position = projection * view * vec4(position, 1.0);\n  }`,\n\n  frag: `\n  precision mediump float;\n  struct Light {\n    vec3 color;\n    vec3 position;\n  };\n  uniform Light lights[1];\n  varying vec3 fragNormal, fragPosition, fragColor;\n  void main() {\n    vec3 normal = normalize(fragNormal);\n    vec3 light = vec3(0.1, 0.1, 0.1);\n    for (int i = 0; i < 1; i++) {\n      vec3 lightDir = normalize(lights[i].position - fragPosition);\n      float diffuse = max(0.0, dot(lightDir, normal));\n      light += diffuse * lights[i].color;\n    }\n    gl_FragColor = vec4(fragColor * light, 1.0);\n  }`,\n\n  attributes: {\n    position: hexsphere.positions,\n    normal: hexsphere.normals,\n    color: hexsphere.colors,\n  },\n  elements: hexsphere.cells,\n  uniforms: {\n    \"lights[0].color\": [1, 1, 1],\n    \"lights[0].position\": ({ tick }) => {\n      const t = 0.008 * tick\n      return [\n        1000 * Math.cos(t),\n        1000 * Math.sin(t),\n        1000 * Math.sin(t)\n      ]\n    },\n  },\n})\n\nlet draw = null\n\nconst loadShape = shape => {\n  fetch(shape)\n    .then(response => response.arrayBuffer())\n    .then(buffer => {\n      let reader = new DataView(buffer);\n      let numVertices = reader.getUint32(0, true);\n      let numCells = reader.getUint32(4, true);\n      const shapeData = {\n        positions: new Float32Array(buffer, 8, numVertices * 3),\n        normals: new Float32Array(buffer, numVertices * 12 + 8, numVertices * 3),\n        colors: new Float32Array(buffer, numVertices * 24 + 8, numVertices * 3),\n        cells: new Uint32Array(buffer, numVertices * 36 + 8, numCells * 3),\n      }\n      draw = drawShape(shapeData)\n      regl.frame(() => {\n        regl.clear({\n          depth: 1,\n          color: [0, 0, 0, 1]\n        })\n\n        camera(() => {\n          draw()\n        })\n      })\n      shapeSelectLoading.style.display = \"none\"\n    })\n}\n\nconst shapeSelect = document.querySelector(\"select#shape-select\")\nconst shapeSelectLoading = document.querySelector(\"#shape-loading\")\nshapeSelect.value = \"hexsphere_4\"\nloadShape(hexsphere_4)\n\nshapeSelect.addEventListener(\"change\", event => {\n  shapeSelectLoading.style.display = \"inline\"\n  loadShape(shapes[event.target.value])\n})\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.createREGL = factory());\n}(this, (function () { 'use strict';\n\nvar isTypedArray = function (x) {\r\n  return (\r\n    x instanceof Uint8Array ||\r\n    x instanceof Uint16Array ||\r\n    x instanceof Uint32Array ||\r\n    x instanceof Int8Array ||\r\n    x instanceof Int16Array ||\r\n    x instanceof Int32Array ||\r\n    x instanceof Float32Array ||\r\n    x instanceof Float64Array ||\r\n    x instanceof Uint8ClampedArray\r\n  )\r\n};\n\nvar extend = function (base, opts) {\r\n  var keys = Object.keys(opts);\r\n  for (var i = 0; i < keys.length; ++i) {\r\n    base[keys[i]] = opts[keys[i]];\r\n  }\r\n  return base\r\n};\n\n// Error checking and parameter validation.\r\n//\r\n// Statements for the form `check.someProcedure(...)` get removed by\r\n// a browserify transform for optimized/minified bundles.\r\n//\r\n/* globals atob */\r\nvar endl = '\\n';\r\n\r\n// only used for extracting shader names.  if atob not present, then errors\r\n// will be slightly crappier\r\nfunction decodeB64 (str) {\r\n  if (typeof atob !== 'undefined') {\r\n    return atob(str)\r\n  }\r\n  return 'base64:' + str\r\n}\r\n\r\nfunction raise (message) {\r\n  var error = new Error('(regl) ' + message);\r\n  console.error(error);\r\n  throw error\r\n}\r\n\r\nfunction check (pred, message) {\r\n  if (!pred) {\r\n    raise(message);\r\n  }\r\n}\r\n\r\nfunction encolon (message) {\r\n  if (message) {\r\n    return ': ' + message\r\n  }\r\n  return ''\r\n}\r\n\r\nfunction checkParameter (param, possibilities, message) {\r\n  if (!(param in possibilities)) {\r\n    raise('unknown parameter (' + param + ')' + encolon(message) +\r\n          '. possible values: ' + Object.keys(possibilities).join());\r\n  }\r\n}\r\n\r\nfunction checkIsTypedArray (data, message) {\r\n  if (!isTypedArray(data)) {\r\n    raise(\r\n      'invalid parameter type' + encolon(message) +\r\n      '. must be a typed array');\r\n  }\r\n}\r\n\r\nfunction checkTypeOf (value, type, message) {\r\n  if (typeof value !== type) {\r\n    raise(\r\n      'invalid parameter type' + encolon(message) +\r\n      '. expected ' + type + ', got ' + (typeof value));\r\n  }\r\n}\r\n\r\nfunction checkNonNegativeInt (value, message) {\r\n  if (!((value >= 0) &&\r\n        ((value | 0) === value))) {\r\n    raise('invalid parameter type, (' + value + ')' + encolon(message) +\r\n          '. must be a nonnegative integer');\r\n  }\r\n}\r\n\r\nfunction checkOneOf (value, list, message) {\r\n  if (list.indexOf(value) < 0) {\r\n    raise('invalid value' + encolon(message) + '. must be one of: ' + list);\r\n  }\r\n}\r\n\r\nvar constructorKeys = [\r\n  'gl',\r\n  'canvas',\r\n  'container',\r\n  'attributes',\r\n  'pixelRatio',\r\n  'extensions',\r\n  'optionalExtensions',\r\n  'profile',\r\n  'onDone'\r\n];\r\n\r\nfunction checkConstructor (obj) {\r\n  Object.keys(obj).forEach(function (key) {\r\n    if (constructorKeys.indexOf(key) < 0) {\r\n      raise('invalid regl constructor argument \"' + key + '\". must be one of ' + constructorKeys);\r\n    }\r\n  });\r\n}\r\n\r\nfunction leftPad (str, n) {\r\n  str = str + '';\r\n  while (str.length < n) {\r\n    str = ' ' + str;\r\n  }\r\n  return str\r\n}\r\n\r\nfunction ShaderFile () {\r\n  this.name = 'unknown';\r\n  this.lines = [];\r\n  this.index = {};\r\n  this.hasErrors = false;\r\n}\r\n\r\nfunction ShaderLine (number, line) {\r\n  this.number = number;\r\n  this.line = line;\r\n  this.errors = [];\r\n}\r\n\r\nfunction ShaderError (fileNumber, lineNumber, message) {\r\n  this.file = fileNumber;\r\n  this.line = lineNumber;\r\n  this.message = message;\r\n}\r\n\r\nfunction guessCommand () {\r\n  var error = new Error();\r\n  var stack = (error.stack || error).toString();\r\n  var pat = /compileProcedure.*\\n\\s*at.*\\((.*)\\)/.exec(stack);\r\n  if (pat) {\r\n    return pat[1]\r\n  }\r\n  var pat2 = /compileProcedure.*\\n\\s*at\\s+(.*)(\\n|$)/.exec(stack);\r\n  if (pat2) {\r\n    return pat2[1]\r\n  }\r\n  return 'unknown'\r\n}\r\n\r\nfunction guessCallSite () {\r\n  var error = new Error();\r\n  var stack = (error.stack || error).toString();\r\n  var pat = /at REGLCommand.*\\n\\s+at.*\\((.*)\\)/.exec(stack);\r\n  if (pat) {\r\n    return pat[1]\r\n  }\r\n  var pat2 = /at REGLCommand.*\\n\\s+at\\s+(.*)\\n/.exec(stack);\r\n  if (pat2) {\r\n    return pat2[1]\r\n  }\r\n  return 'unknown'\r\n}\r\n\r\nfunction parseSource (source, command) {\r\n  var lines = source.split('\\n');\r\n  var lineNumber = 1;\r\n  var fileNumber = 0;\r\n  var files = {\r\n    unknown: new ShaderFile(),\r\n    0: new ShaderFile()\r\n  };\r\n  files.unknown.name = files[0].name = command || guessCommand();\r\n  files.unknown.lines.push(new ShaderLine(0, ''));\r\n  for (var i = 0; i < lines.length; ++i) {\r\n    var line = lines[i];\r\n    var parts = /^\\s*\\#\\s*(\\w+)\\s+(.+)\\s*$/.exec(line);\r\n    if (parts) {\r\n      switch (parts[1]) {\r\n        case 'line':\r\n          var lineNumberInfo = /(\\d+)(\\s+\\d+)?/.exec(parts[2]);\r\n          if (lineNumberInfo) {\r\n            lineNumber = lineNumberInfo[1] | 0;\r\n            if (lineNumberInfo[2]) {\r\n              fileNumber = lineNumberInfo[2] | 0;\r\n              if (!(fileNumber in files)) {\r\n                files[fileNumber] = new ShaderFile();\r\n              }\r\n            }\r\n          }\r\n          break\r\n        case 'define':\r\n          var nameInfo = /SHADER_NAME(_B64)?\\s+(.*)$/.exec(parts[2]);\r\n          if (nameInfo) {\r\n            files[fileNumber].name = (nameInfo[1]\r\n                ? decodeB64(nameInfo[2])\r\n                : nameInfo[2]);\r\n          }\r\n          break\r\n      }\r\n    }\r\n    files[fileNumber].lines.push(new ShaderLine(lineNumber++, line));\r\n  }\r\n  Object.keys(files).forEach(function (fileNumber) {\r\n    var file = files[fileNumber];\r\n    file.lines.forEach(function (line) {\r\n      file.index[line.number] = line;\r\n    });\r\n  });\r\n  return files\r\n}\r\n\r\nfunction parseErrorLog (errLog) {\r\n  var result = [];\r\n  errLog.split('\\n').forEach(function (errMsg) {\r\n    if (errMsg.length < 5) {\r\n      return\r\n    }\r\n    var parts = /^ERROR\\:\\s+(\\d+)\\:(\\d+)\\:\\s*(.*)$/.exec(errMsg);\r\n    if (parts) {\r\n      result.push(new ShaderError(\r\n        parts[1] | 0,\r\n        parts[2] | 0,\r\n        parts[3].trim()));\r\n    } else if (errMsg.length > 0) {\r\n      result.push(new ShaderError('unknown', 0, errMsg));\r\n    }\r\n  });\r\n  return result\r\n}\r\n\r\nfunction annotateFiles (files, errors) {\r\n  errors.forEach(function (error) {\r\n    var file = files[error.file];\r\n    if (file) {\r\n      var line = file.index[error.line];\r\n      if (line) {\r\n        line.errors.push(error);\r\n        file.hasErrors = true;\r\n        return\r\n      }\r\n    }\r\n    files.unknown.hasErrors = true;\r\n    files.unknown.lines[0].errors.push(error);\r\n  });\r\n}\r\n\r\nfunction checkShaderError (gl, shader, source, type, command) {\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    var errLog = gl.getShaderInfoLog(shader);\r\n    var typeName = type === gl.FRAGMENT_SHADER ? 'fragment' : 'vertex';\r\n    checkCommandType(source, 'string', typeName + ' shader source must be a string', command);\r\n    var files = parseSource(source, command);\r\n    var errors = parseErrorLog(errLog);\r\n    annotateFiles(files, errors);\r\n\r\n    Object.keys(files).forEach(function (fileNumber) {\r\n      var file = files[fileNumber];\r\n      if (!file.hasErrors) {\r\n        return\r\n      }\r\n\r\n      var strings = [''];\r\n      var styles = [''];\r\n\r\n      function push (str, style) {\r\n        strings.push(str);\r\n        styles.push(style || '');\r\n      }\r\n\r\n      push('file number ' + fileNumber + ': ' + file.name + '\\n', 'color:red;text-decoration:underline;font-weight:bold');\r\n\r\n      file.lines.forEach(function (line) {\r\n        if (line.errors.length > 0) {\r\n          push(leftPad(line.number, 4) + '|  ', 'background-color:yellow; font-weight:bold');\r\n          push(line.line + endl, 'color:red; background-color:yellow; font-weight:bold');\r\n\r\n          // try to guess token\r\n          var offset = 0;\r\n          line.errors.forEach(function (error) {\r\n            var message = error.message;\r\n            var token = /^\\s*\\'(.*)\\'\\s*\\:\\s*(.*)$/.exec(message);\r\n            if (token) {\r\n              var tokenPat = token[1];\r\n              message = token[2];\r\n              switch (tokenPat) {\r\n                case 'assign':\r\n                  tokenPat = '=';\r\n                  break\r\n              }\r\n              offset = Math.max(line.line.indexOf(tokenPat, offset), 0);\r\n            } else {\r\n              offset = 0;\r\n            }\r\n\r\n            push(leftPad('| ', 6));\r\n            push(leftPad('^^^', offset + 3) + endl, 'font-weight:bold');\r\n            push(leftPad('| ', 6));\r\n            push(message + endl, 'font-weight:bold');\r\n          });\r\n          push(leftPad('| ', 6) + endl);\r\n        } else {\r\n          push(leftPad(line.number, 4) + '|  ');\r\n          push(line.line + endl, 'color:red');\r\n        }\r\n      });\r\n      if (typeof document !== 'undefined' && !window.chrome) {\r\n        styles[0] = strings.join('%c');\r\n        console.log.apply(console, styles);\r\n      } else {\r\n        console.log(strings.join(''));\r\n      }\r\n    });\r\n\r\n    check.raise('Error compiling ' + typeName + ' shader, ' + files[0].name);\r\n  }\r\n}\r\n\r\nfunction checkLinkError (gl, program, fragShader, vertShader, command) {\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    var errLog = gl.getProgramInfoLog(program);\r\n    var fragParse = parseSource(fragShader, command);\r\n    var vertParse = parseSource(vertShader, command);\r\n\r\n    var header = 'Error linking program with vertex shader, \"' +\r\n      vertParse[0].name + '\", and fragment shader \"' + fragParse[0].name + '\"';\r\n\r\n    if (typeof document !== 'undefined') {\r\n      console.log('%c' + header + endl + '%c' + errLog,\r\n        'color:red;text-decoration:underline;font-weight:bold',\r\n        'color:red');\r\n    } else {\r\n      console.log(header + endl + errLog);\r\n    }\r\n    check.raise(header);\r\n  }\r\n}\r\n\r\nfunction saveCommandRef (object) {\r\n  object._commandRef = guessCommand();\r\n}\r\n\r\nfunction saveDrawCommandInfo (opts, uniforms, attributes, stringStore) {\r\n  saveCommandRef(opts);\r\n\r\n  function id (str) {\r\n    if (str) {\r\n      return stringStore.id(str)\r\n    }\r\n    return 0\r\n  }\r\n  opts._fragId = id(opts.static.frag);\r\n  opts._vertId = id(opts.static.vert);\r\n\r\n  function addProps (dict, set) {\r\n    Object.keys(set).forEach(function (u) {\r\n      dict[stringStore.id(u)] = true;\r\n    });\r\n  }\r\n\r\n  var uniformSet = opts._uniformSet = {};\r\n  addProps(uniformSet, uniforms.static);\r\n  addProps(uniformSet, uniforms.dynamic);\r\n\r\n  var attributeSet = opts._attributeSet = {};\r\n  addProps(attributeSet, attributes.static);\r\n  addProps(attributeSet, attributes.dynamic);\r\n\r\n  opts._hasCount = (\r\n    'count' in opts.static ||\r\n    'count' in opts.dynamic ||\r\n    'elements' in opts.static ||\r\n    'elements' in opts.dynamic);\r\n}\r\n\r\nfunction commandRaise (message, command) {\r\n  var callSite = guessCallSite();\r\n  raise(message +\r\n    ' in command ' + (command || guessCommand()) +\r\n    (callSite === 'unknown' ? '' : ' called from ' + callSite));\r\n}\r\n\r\nfunction checkCommand (pred, message, command) {\r\n  if (!pred) {\r\n    commandRaise(message, command || guessCommand());\r\n  }\r\n}\r\n\r\nfunction checkParameterCommand (param, possibilities, message, command) {\r\n  if (!(param in possibilities)) {\r\n    commandRaise(\r\n      'unknown parameter (' + param + ')' + encolon(message) +\r\n      '. possible values: ' + Object.keys(possibilities).join(),\r\n      command || guessCommand());\r\n  }\r\n}\r\n\r\nfunction checkCommandType (value, type, message, command) {\r\n  if (typeof value !== type) {\r\n    commandRaise(\r\n      'invalid parameter type' + encolon(message) +\r\n      '. expected ' + type + ', got ' + (typeof value),\r\n      command || guessCommand());\r\n  }\r\n}\r\n\r\nfunction checkOptional (block) {\r\n  block();\r\n}\r\n\r\nfunction checkFramebufferFormat (attachment, texFormats, rbFormats) {\r\n  if (attachment.texture) {\r\n    checkOneOf(\r\n      attachment.texture._texture.internalformat,\r\n      texFormats,\r\n      'unsupported texture format for attachment');\r\n  } else {\r\n    checkOneOf(\r\n      attachment.renderbuffer._renderbuffer.format,\r\n      rbFormats,\r\n      'unsupported renderbuffer format for attachment');\r\n  }\r\n}\r\n\r\nvar GL_CLAMP_TO_EDGE = 0x812F;\r\n\r\nvar GL_NEAREST = 0x2600;\r\nvar GL_NEAREST_MIPMAP_NEAREST = 0x2700;\r\nvar GL_LINEAR_MIPMAP_NEAREST = 0x2701;\r\nvar GL_NEAREST_MIPMAP_LINEAR = 0x2702;\r\nvar GL_LINEAR_MIPMAP_LINEAR = 0x2703;\r\n\r\nvar GL_BYTE = 5120;\r\nvar GL_UNSIGNED_BYTE = 5121;\r\nvar GL_SHORT = 5122;\r\nvar GL_UNSIGNED_SHORT = 5123;\r\nvar GL_INT = 5124;\r\nvar GL_UNSIGNED_INT = 5125;\r\nvar GL_FLOAT = 5126;\r\n\r\nvar GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;\r\nvar GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;\r\nvar GL_UNSIGNED_SHORT_5_6_5 = 0x8363;\r\nvar GL_UNSIGNED_INT_24_8_WEBGL = 0x84FA;\r\n\r\nvar GL_HALF_FLOAT_OES = 0x8D61;\r\n\r\nvar TYPE_SIZE = {};\r\n\r\nTYPE_SIZE[GL_BYTE] =\r\nTYPE_SIZE[GL_UNSIGNED_BYTE] = 1;\r\n\r\nTYPE_SIZE[GL_SHORT] =\r\nTYPE_SIZE[GL_UNSIGNED_SHORT] =\r\nTYPE_SIZE[GL_HALF_FLOAT_OES] =\r\nTYPE_SIZE[GL_UNSIGNED_SHORT_5_6_5] =\r\nTYPE_SIZE[GL_UNSIGNED_SHORT_4_4_4_4] =\r\nTYPE_SIZE[GL_UNSIGNED_SHORT_5_5_5_1] = 2;\r\n\r\nTYPE_SIZE[GL_INT] =\r\nTYPE_SIZE[GL_UNSIGNED_INT] =\r\nTYPE_SIZE[GL_FLOAT] =\r\nTYPE_SIZE[GL_UNSIGNED_INT_24_8_WEBGL] = 4;\r\n\r\nfunction pixelSize (type, channels) {\r\n  if (type === GL_UNSIGNED_SHORT_5_5_5_1 ||\r\n      type === GL_UNSIGNED_SHORT_4_4_4_4 ||\r\n      type === GL_UNSIGNED_SHORT_5_6_5) {\r\n    return 2\r\n  } else if (type === GL_UNSIGNED_INT_24_8_WEBGL) {\r\n    return 4\r\n  } else {\r\n    return TYPE_SIZE[type] * channels\r\n  }\r\n}\r\n\r\nfunction isPow2 (v) {\r\n  return !(v & (v - 1)) && (!!v)\r\n}\r\n\r\nfunction checkTexture2D (info, mipData, limits) {\r\n  var i;\r\n  var w = mipData.width;\r\n  var h = mipData.height;\r\n  var c = mipData.channels;\r\n\r\n  // Check texture shape\r\n  check(w > 0 && w <= limits.maxTextureSize &&\r\n        h > 0 && h <= limits.maxTextureSize,\r\n        'invalid texture shape');\r\n\r\n  // check wrap mode\r\n  if (info.wrapS !== GL_CLAMP_TO_EDGE || info.wrapT !== GL_CLAMP_TO_EDGE) {\r\n    check(isPow2(w) && isPow2(h),\r\n      'incompatible wrap mode for texture, both width and height must be power of 2');\r\n  }\r\n\r\n  if (mipData.mipmask === 1) {\r\n    if (w !== 1 && h !== 1) {\r\n      check(\r\n        info.minFilter !== GL_NEAREST_MIPMAP_NEAREST &&\r\n        info.minFilter !== GL_NEAREST_MIPMAP_LINEAR &&\r\n        info.minFilter !== GL_LINEAR_MIPMAP_NEAREST &&\r\n        info.minFilter !== GL_LINEAR_MIPMAP_LINEAR,\r\n        'min filter requires mipmap');\r\n    }\r\n  } else {\r\n    // texture must be power of 2\r\n    check(isPow2(w) && isPow2(h),\r\n      'texture must be a square power of 2 to support mipmapping');\r\n    check(mipData.mipmask === (w << 1) - 1,\r\n      'missing or incomplete mipmap data');\r\n  }\r\n\r\n  if (mipData.type === GL_FLOAT) {\r\n    if (limits.extensions.indexOf('oes_texture_float_linear') < 0) {\r\n      check(info.minFilter === GL_NEAREST && info.magFilter === GL_NEAREST,\r\n        'filter not supported, must enable oes_texture_float_linear');\r\n    }\r\n    check(!info.genMipmaps,\r\n      'mipmap generation not supported with float textures');\r\n  }\r\n\r\n  // check image complete\r\n  var mipimages = mipData.images;\r\n  for (i = 0; i < 16; ++i) {\r\n    if (mipimages[i]) {\r\n      var mw = w >> i;\r\n      var mh = h >> i;\r\n      check(mipData.mipmask & (1 << i), 'missing mipmap data');\r\n\r\n      var img = mipimages[i];\r\n\r\n      check(\r\n        img.width === mw &&\r\n        img.height === mh,\r\n        'invalid shape for mip images');\r\n\r\n      check(\r\n        img.format === mipData.format &&\r\n        img.internalformat === mipData.internalformat &&\r\n        img.type === mipData.type,\r\n        'incompatible type for mip image');\r\n\r\n      if (img.compressed) {\r\n        // TODO: check size for compressed images\r\n      } else if (img.data) {\r\n        // check(img.data.byteLength === mw * mh *\r\n        // Math.max(pixelSize(img.type, c), img.unpackAlignment),\r\n        var rowSize = Math.ceil(pixelSize(img.type, c) * mw / img.unpackAlignment) * img.unpackAlignment;\r\n        check(img.data.byteLength === rowSize * mh,\r\n          'invalid data for image, buffer size is inconsistent with image format');\r\n      } else if (img.element) {\r\n        // TODO: check element can be loaded\r\n      } else if (img.copy) {\r\n        // TODO: check compatible format and type\r\n      }\r\n    } else if (!info.genMipmaps) {\r\n      check((mipData.mipmask & (1 << i)) === 0, 'extra mipmap data');\r\n    }\r\n  }\r\n\r\n  if (mipData.compressed) {\r\n    check(!info.genMipmaps,\r\n      'mipmap generation for compressed images not supported');\r\n  }\r\n}\r\n\r\nfunction checkTextureCube (texture, info, faces, limits) {\r\n  var w = texture.width;\r\n  var h = texture.height;\r\n  var c = texture.channels;\r\n\r\n  // Check texture shape\r\n  check(\r\n    w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize,\r\n    'invalid texture shape');\r\n  check(\r\n    w === h,\r\n    'cube map must be square');\r\n  check(\r\n    info.wrapS === GL_CLAMP_TO_EDGE && info.wrapT === GL_CLAMP_TO_EDGE,\r\n    'wrap mode not supported by cube map');\r\n\r\n  for (var i = 0; i < faces.length; ++i) {\r\n    var face = faces[i];\r\n    check(\r\n      face.width === w && face.height === h,\r\n      'inconsistent cube map face shape');\r\n\r\n    if (info.genMipmaps) {\r\n      check(!face.compressed,\r\n        'can not generate mipmap for compressed textures');\r\n      check(face.mipmask === 1,\r\n        'can not specify mipmaps and generate mipmaps');\r\n    } else {\r\n      // TODO: check mip and filter mode\r\n    }\r\n\r\n    var mipmaps = face.images;\r\n    for (var j = 0; j < 16; ++j) {\r\n      var img = mipmaps[j];\r\n      if (img) {\r\n        var mw = w >> j;\r\n        var mh = h >> j;\r\n        check(face.mipmask & (1 << j), 'missing mipmap data');\r\n        check(\r\n          img.width === mw &&\r\n          img.height === mh,\r\n          'invalid shape for mip images');\r\n        check(\r\n          img.format === texture.format &&\r\n          img.internalformat === texture.internalformat &&\r\n          img.type === texture.type,\r\n          'incompatible type for mip image');\r\n\r\n        if (img.compressed) {\r\n          // TODO: check size for compressed images\r\n        } else if (img.data) {\r\n          check(img.data.byteLength === mw * mh *\r\n            Math.max(pixelSize(img.type, c), img.unpackAlignment),\r\n            'invalid data for image, buffer size is inconsistent with image format');\r\n        } else if (img.element) {\r\n          // TODO: check element can be loaded\r\n        } else if (img.copy) {\r\n          // TODO: check compatible format and type\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nvar check$1 = extend(check, {\r\n  optional: checkOptional,\r\n  raise: raise,\r\n  commandRaise: commandRaise,\r\n  command: checkCommand,\r\n  parameter: checkParameter,\r\n  commandParameter: checkParameterCommand,\r\n  constructor: checkConstructor,\r\n  type: checkTypeOf,\r\n  commandType: checkCommandType,\r\n  isTypedArray: checkIsTypedArray,\r\n  nni: checkNonNegativeInt,\r\n  oneOf: checkOneOf,\r\n  shaderError: checkShaderError,\r\n  linkError: checkLinkError,\r\n  callSite: guessCallSite,\r\n  saveCommandRef: saveCommandRef,\r\n  saveDrawInfo: saveDrawCommandInfo,\r\n  framebufferFormat: checkFramebufferFormat,\r\n  guessCommand: guessCommand,\r\n  texture2D: checkTexture2D,\r\n  textureCube: checkTextureCube\r\n});\n\nvar VARIABLE_COUNTER = 0;\r\n\r\nvar DYN_FUNC = 0;\r\n\r\nfunction DynamicVariable (type, data) {\r\n  this.id = (VARIABLE_COUNTER++);\r\n  this.type = type;\r\n  this.data = data;\r\n}\r\n\r\nfunction escapeStr (str) {\r\n  return str.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')\r\n}\r\n\r\nfunction splitParts (str) {\r\n  if (str.length === 0) {\r\n    return []\r\n  }\r\n\r\n  var firstChar = str.charAt(0);\r\n  var lastChar = str.charAt(str.length - 1);\r\n\r\n  if (str.length > 1 &&\r\n      firstChar === lastChar &&\r\n      (firstChar === '\"' || firstChar === \"'\")) {\r\n    return ['\"' + escapeStr(str.substr(1, str.length - 2)) + '\"']\r\n  }\r\n\r\n  var parts = /\\[(false|true|null|\\d+|'[^']*'|\"[^\"]*\")\\]/.exec(str);\r\n  if (parts) {\r\n    return (\r\n      splitParts(str.substr(0, parts.index))\r\n      .concat(splitParts(parts[1]))\r\n      .concat(splitParts(str.substr(parts.index + parts[0].length)))\r\n    )\r\n  }\r\n\r\n  var subparts = str.split('.');\r\n  if (subparts.length === 1) {\r\n    return ['\"' + escapeStr(str) + '\"']\r\n  }\r\n\r\n  var result = [];\r\n  for (var i = 0; i < subparts.length; ++i) {\r\n    result = result.concat(splitParts(subparts[i]));\r\n  }\r\n  return result\r\n}\r\n\r\nfunction toAccessorString (str) {\r\n  return '[' + splitParts(str).join('][') + ']'\r\n}\r\n\r\nfunction defineDynamic (type, data) {\r\n  return new DynamicVariable(type, toAccessorString(data + ''))\r\n}\r\n\r\nfunction isDynamic (x) {\r\n  return (typeof x === 'function' && !x._reglType) ||\r\n         x instanceof DynamicVariable\r\n}\r\n\r\nfunction unbox (x, path) {\r\n  if (typeof x === 'function') {\r\n    return new DynamicVariable(DYN_FUNC, x)\r\n  }\r\n  return x\r\n}\r\n\r\nvar dynamic = {\r\n  DynamicVariable: DynamicVariable,\r\n  define: defineDynamic,\r\n  isDynamic: isDynamic,\r\n  unbox: unbox,\r\n  accessor: toAccessorString\r\n};\n\n/* globals requestAnimationFrame, cancelAnimationFrame */\r\nvar raf = {\r\n  next: typeof requestAnimationFrame === 'function'\r\n    ? function (cb) { return requestAnimationFrame(cb) }\r\n    : function (cb) { return setTimeout(cb, 16) },\r\n  cancel: typeof cancelAnimationFrame === 'function'\r\n    ? function (raf) { return cancelAnimationFrame(raf) }\r\n    : clearTimeout\r\n};\n\n/* globals performance */\r\nvar clock = (typeof performance !== 'undefined' && performance.now)\r\n  ? function () { return performance.now() }\r\n  : function () { return +(new Date()) };\n\nfunction createStringStore () {\r\n  var stringIds = {'': 0};\r\n  var stringValues = [''];\r\n  return {\r\n    id: function (str) {\r\n      var result = stringIds[str];\r\n      if (result) {\r\n        return result\r\n      }\r\n      result = stringIds[str] = stringValues.length;\r\n      stringValues.push(str);\r\n      return result\r\n    },\r\n\r\n    str: function (id) {\r\n      return stringValues[id]\r\n    }\r\n  }\r\n}\n\n// Context and canvas creation helper functions\r\nfunction createCanvas (element, onDone, pixelRatio) {\r\n  var canvas = document.createElement('canvas');\r\n  extend(canvas.style, {\r\n    border: 0,\r\n    margin: 0,\r\n    padding: 0,\r\n    top: 0,\r\n    left: 0\r\n  });\r\n  element.appendChild(canvas);\r\n\r\n  if (element === document.body) {\r\n    canvas.style.position = 'absolute';\r\n    extend(element.style, {\r\n      margin: 0,\r\n      padding: 0\r\n    });\r\n  }\r\n\r\n  function resize () {\r\n    var w = window.innerWidth;\r\n    var h = window.innerHeight;\r\n    if (element !== document.body) {\r\n      var bounds = element.getBoundingClientRect();\r\n      w = bounds.right - bounds.left;\r\n      h = bounds.bottom - bounds.top;\r\n    }\r\n    canvas.width = pixelRatio * w;\r\n    canvas.height = pixelRatio * h;\r\n    extend(canvas.style, {\r\n      width: w + 'px',\r\n      height: h + 'px'\r\n    });\r\n  }\r\n\r\n  window.addEventListener('resize', resize, false);\r\n\r\n  function onDestroy () {\r\n    window.removeEventListener('resize', resize);\r\n    element.removeChild(canvas);\r\n  }\r\n\r\n  resize();\r\n\r\n  return {\r\n    canvas: canvas,\r\n    onDestroy: onDestroy\r\n  }\r\n}\r\n\r\nfunction createContext (canvas, contextAttributes) {\r\n  function get (name) {\r\n    try {\r\n      return canvas.getContext(name, contextAttributes)\r\n    } catch (e) {\r\n      return null\r\n    }\r\n  }\r\n  return (\r\n    get('webgl') ||\r\n    get('experimental-webgl') ||\r\n    get('webgl-experimental')\r\n  )\r\n}\r\n\r\nfunction isHTMLElement (obj) {\r\n  return (\r\n    typeof obj.nodeName === 'string' &&\r\n    typeof obj.appendChild === 'function' &&\r\n    typeof obj.getBoundingClientRect === 'function'\r\n  )\r\n}\r\n\r\nfunction isWebGLContext (obj) {\r\n  return (\r\n    typeof obj.drawArrays === 'function' ||\r\n    typeof obj.drawElements === 'function'\r\n  )\r\n}\r\n\r\nfunction parseExtensions (input) {\r\n  if (typeof input === 'string') {\r\n    return input.split()\r\n  }\r\n  check$1(Array.isArray(input), 'invalid extension array');\r\n  return input\r\n}\r\n\r\nfunction getElement (desc) {\r\n  if (typeof desc === 'string') {\r\n    check$1(typeof document !== 'undefined', 'not supported outside of DOM');\r\n    return document.querySelector(desc)\r\n  }\r\n  return desc\r\n}\r\n\r\nfunction parseArgs (args_) {\r\n  var args = args_ || {};\r\n  var element, container, canvas, gl;\r\n  var contextAttributes = {};\r\n  var extensions = [];\r\n  var optionalExtensions = [];\r\n  var pixelRatio = (typeof window === 'undefined' ? 1 : window.devicePixelRatio);\r\n  var profile = false;\r\n  var onDone = function (err) {\r\n    if (err) {\r\n      check$1.raise(err);\r\n    }\r\n  };\r\n  var onDestroy = function () {};\r\n  if (typeof args === 'string') {\r\n    check$1(\r\n      typeof document !== 'undefined',\r\n      'selector queries only supported in DOM enviroments');\r\n    element = document.querySelector(args);\r\n    check$1(element, 'invalid query string for element');\r\n  } else if (typeof args === 'object') {\r\n    if (isHTMLElement(args)) {\r\n      element = args;\r\n    } else if (isWebGLContext(args)) {\r\n      gl = args;\r\n      canvas = gl.canvas;\r\n    } else {\r\n      check$1.constructor(args);\r\n      if ('gl' in args) {\r\n        gl = args.gl;\r\n      } else if ('canvas' in args) {\r\n        canvas = getElement(args.canvas);\r\n      } else if ('container' in args) {\r\n        container = getElement(args.container);\r\n      }\r\n      if ('attributes' in args) {\r\n        contextAttributes = args.attributes;\r\n        check$1.type(contextAttributes, 'object', 'invalid context attributes');\r\n      }\r\n      if ('extensions' in args) {\r\n        extensions = parseExtensions(args.extensions);\r\n      }\r\n      if ('optionalExtensions' in args) {\r\n        optionalExtensions = parseExtensions(args.optionalExtensions);\r\n      }\r\n      if ('onDone' in args) {\r\n        check$1.type(\r\n          args.onDone, 'function',\r\n          'invalid or missing onDone callback');\r\n        onDone = args.onDone;\r\n      }\r\n      if ('profile' in args) {\r\n        profile = !!args.profile;\r\n      }\r\n      if ('pixelRatio' in args) {\r\n        pixelRatio = +args.pixelRatio;\r\n        check$1(pixelRatio > 0, 'invalid pixel ratio');\r\n      }\r\n    }\r\n  } else {\r\n    check$1.raise('invalid arguments to regl');\r\n  }\r\n\r\n  if (element) {\r\n    if (element.nodeName.toLowerCase() === 'canvas') {\r\n      canvas = element;\r\n    } else {\r\n      container = element;\r\n    }\r\n  }\r\n\r\n  if (!gl) {\r\n    if (!canvas) {\r\n      check$1(\r\n        typeof document !== 'undefined',\r\n        'must manually specify webgl context outside of DOM environments');\r\n      var result = createCanvas(container || document.body, onDone, pixelRatio);\r\n      if (!result) {\r\n        return null\r\n      }\r\n      canvas = result.canvas;\r\n      onDestroy = result.onDestroy;\r\n    }\r\n    gl = createContext(canvas, contextAttributes);\r\n  }\r\n\r\n  if (!gl) {\r\n    onDestroy();\r\n    onDone('webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org');\r\n    return null\r\n  }\r\n\r\n  return {\r\n    gl: gl,\r\n    canvas: canvas,\r\n    container: container,\r\n    extensions: extensions,\r\n    optionalExtensions: optionalExtensions,\r\n    pixelRatio: pixelRatio,\r\n    profile: profile,\r\n    onDone: onDone,\r\n    onDestroy: onDestroy\r\n  }\r\n}\n\nfunction createExtensionCache (gl, config) {\r\n  var extensions = {};\r\n\r\n  function tryLoadExtension (name_) {\r\n    check$1.type(name_, 'string', 'extension name must be string');\r\n    var name = name_.toLowerCase();\r\n    var ext;\r\n    try {\r\n      ext = extensions[name] = gl.getExtension(name);\r\n    } catch (e) {}\r\n    return !!ext\r\n  }\r\n\r\n  for (var i = 0; i < config.extensions.length; ++i) {\r\n    var name = config.extensions[i];\r\n    if (!tryLoadExtension(name)) {\r\n      config.onDestroy();\r\n      config.onDone('\"' + name + '\" extension is not supported by the current WebGL context, try upgrading your system or a different browser');\r\n      return null\r\n    }\r\n  }\r\n\r\n  config.optionalExtensions.forEach(tryLoadExtension);\r\n\r\n  return {\r\n    extensions: extensions,\r\n    restore: function () {\r\n      Object.keys(extensions).forEach(function (name) {\r\n        if (extensions[name] && !tryLoadExtension(name)) {\r\n          throw new Error('(regl): error restoring extension ' + name)\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\n\nfunction loop (n, f) {\r\n  var result = Array(n);\r\n  for (var i = 0; i < n; ++i) {\r\n    result[i] = f(i);\r\n  }\r\n  return result\r\n}\n\nvar GL_BYTE$1 = 5120;\r\nvar GL_UNSIGNED_BYTE$2 = 5121;\r\nvar GL_SHORT$1 = 5122;\r\nvar GL_UNSIGNED_SHORT$1 = 5123;\r\nvar GL_INT$1 = 5124;\r\nvar GL_UNSIGNED_INT$1 = 5125;\r\nvar GL_FLOAT$2 = 5126;\r\n\r\nfunction nextPow16 (v) {\r\n  for (var i = 16; i <= (1 << 28); i *= 16) {\r\n    if (v <= i) {\r\n      return i\r\n    }\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction log2 (v) {\r\n  var r, shift;\r\n  r = (v > 0xFFFF) << 4;\r\n  v >>>= r;\r\n  shift = (v > 0xFF) << 3;\r\n  v >>>= shift; r |= shift;\r\n  shift = (v > 0xF) << 2;\r\n  v >>>= shift; r |= shift;\r\n  shift = (v > 0x3) << 1;\r\n  v >>>= shift; r |= shift;\r\n  return r | (v >> 1)\r\n}\r\n\r\nfunction createPool () {\r\n  var bufferPool = loop(8, function () {\r\n    return []\r\n  });\r\n\r\n  function alloc (n) {\r\n    var sz = nextPow16(n);\r\n    var bin = bufferPool[log2(sz) >> 2];\r\n    if (bin.length > 0) {\r\n      return bin.pop()\r\n    }\r\n    return new ArrayBuffer(sz)\r\n  }\r\n\r\n  function free (buf) {\r\n    bufferPool[log2(buf.byteLength) >> 2].push(buf);\r\n  }\r\n\r\n  function allocType (type, n) {\r\n    var result = null;\r\n    switch (type) {\r\n      case GL_BYTE$1:\r\n        result = new Int8Array(alloc(n), 0, n);\r\n        break\r\n      case GL_UNSIGNED_BYTE$2:\r\n        result = new Uint8Array(alloc(n), 0, n);\r\n        break\r\n      case GL_SHORT$1:\r\n        result = new Int16Array(alloc(2 * n), 0, n);\r\n        break\r\n      case GL_UNSIGNED_SHORT$1:\r\n        result = new Uint16Array(alloc(2 * n), 0, n);\r\n        break\r\n      case GL_INT$1:\r\n        result = new Int32Array(alloc(4 * n), 0, n);\r\n        break\r\n      case GL_UNSIGNED_INT$1:\r\n        result = new Uint32Array(alloc(4 * n), 0, n);\r\n        break\r\n      case GL_FLOAT$2:\r\n        result = new Float32Array(alloc(4 * n), 0, n);\r\n        break\r\n      default:\r\n        return null\r\n    }\r\n    if (result.length !== n) {\r\n      return result.subarray(0, n)\r\n    }\r\n    return result\r\n  }\r\n\r\n  function freeType (array) {\r\n    free(array.buffer);\r\n  }\r\n\r\n  return {\r\n    alloc: alloc,\r\n    free: free,\r\n    allocType: allocType,\r\n    freeType: freeType\r\n  }\r\n}\r\n\r\nvar pool = createPool();\r\n\r\n// zero pool for initial zero data\r\npool.zero = createPool();\n\nvar GL_SUBPIXEL_BITS = 0x0D50;\r\nvar GL_RED_BITS = 0x0D52;\r\nvar GL_GREEN_BITS = 0x0D53;\r\nvar GL_BLUE_BITS = 0x0D54;\r\nvar GL_ALPHA_BITS = 0x0D55;\r\nvar GL_DEPTH_BITS = 0x0D56;\r\nvar GL_STENCIL_BITS = 0x0D57;\r\n\r\nvar GL_ALIASED_POINT_SIZE_RANGE = 0x846D;\r\nvar GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;\r\n\r\nvar GL_MAX_TEXTURE_SIZE = 0x0D33;\r\nvar GL_MAX_VIEWPORT_DIMS = 0x0D3A;\r\nvar GL_MAX_VERTEX_ATTRIBS = 0x8869;\r\nvar GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;\r\nvar GL_MAX_VARYING_VECTORS = 0x8DFC;\r\nvar GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;\r\nvar GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;\r\nvar GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;\r\nvar GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;\r\nvar GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;\r\nvar GL_MAX_RENDERBUFFER_SIZE = 0x84E8;\r\n\r\nvar GL_VENDOR = 0x1F00;\r\nvar GL_RENDERER = 0x1F01;\r\nvar GL_VERSION = 0x1F02;\r\nvar GL_SHADING_LANGUAGE_VERSION = 0x8B8C;\r\n\r\nvar GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;\r\n\r\nvar GL_MAX_COLOR_ATTACHMENTS_WEBGL = 0x8CDF;\r\nvar GL_MAX_DRAW_BUFFERS_WEBGL = 0x8824;\r\n\r\nvar GL_TEXTURE_2D = 0x0DE1;\r\nvar GL_TEXTURE_CUBE_MAP = 0x8513;\r\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\r\nvar GL_TEXTURE0 = 0x84C0;\r\nvar GL_RGBA = 0x1908;\r\nvar GL_FLOAT$1 = 0x1406;\r\nvar GL_UNSIGNED_BYTE$1 = 0x1401;\r\nvar GL_FRAMEBUFFER = 0x8D40;\r\nvar GL_FRAMEBUFFER_COMPLETE = 0x8CD5;\r\nvar GL_COLOR_ATTACHMENT0 = 0x8CE0;\r\nvar GL_COLOR_BUFFER_BIT$1 = 0x4000;\r\n\r\nvar wrapLimits = function (gl, extensions) {\r\n  var maxAnisotropic = 1;\r\n  if (extensions.ext_texture_filter_anisotropic) {\r\n    maxAnisotropic = gl.getParameter(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT);\r\n  }\r\n\r\n  var maxDrawbuffers = 1;\r\n  var maxColorAttachments = 1;\r\n  if (extensions.webgl_draw_buffers) {\r\n    maxDrawbuffers = gl.getParameter(GL_MAX_DRAW_BUFFERS_WEBGL);\r\n    maxColorAttachments = gl.getParameter(GL_MAX_COLOR_ATTACHMENTS_WEBGL);\r\n  }\r\n\r\n  // detect if reading float textures is available (Safari doesn't support)\r\n  var readFloat = !!extensions.oes_texture_float;\r\n  if (readFloat) {\r\n    var readFloatTexture = gl.createTexture();\r\n    gl.bindTexture(GL_TEXTURE_2D, readFloatTexture);\r\n    gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0, GL_RGBA, GL_FLOAT$1, null);\r\n\r\n    var fbo = gl.createFramebuffer();\r\n    gl.bindFramebuffer(GL_FRAMEBUFFER, fbo);\r\n    gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, readFloatTexture, 0);\r\n    gl.bindTexture(GL_TEXTURE_2D, null);\r\n\r\n    if (gl.checkFramebufferStatus(GL_FRAMEBUFFER) !== GL_FRAMEBUFFER_COMPLETE) readFloat = false;\r\n\r\n    else {\r\n      gl.viewport(0, 0, 1, 1);\r\n      gl.clearColor(1.0, 0.0, 0.0, 1.0);\r\n      gl.clear(GL_COLOR_BUFFER_BIT$1);\r\n      var pixels = pool.allocType(GL_FLOAT$1, 4);\r\n      gl.readPixels(0, 0, 1, 1, GL_RGBA, GL_FLOAT$1, pixels);\r\n\r\n      if (gl.getError()) readFloat = false;\r\n      else {\r\n        gl.deleteFramebuffer(fbo);\r\n        gl.deleteTexture(readFloatTexture);\r\n\r\n        readFloat = pixels[0] === 1.0;\r\n      }\r\n\r\n      pool.freeType(pixels);\r\n    }\r\n  }\r\n\r\n  // detect non power of two cube textures support (IE doesn't support)\r\n  var isIE = typeof navigator !== 'undefined' && (/MSIE/.test(navigator.userAgent) || /Trident\\//.test(navigator.appVersion) || /Edge/.test(navigator.userAgent));\r\n\r\n  var npotTextureCube = true;\r\n\r\n  if (!isIE) {\r\n    var cubeTexture = gl.createTexture();\r\n    var data = pool.allocType(GL_UNSIGNED_BYTE$1, 36);\r\n    gl.activeTexture(GL_TEXTURE0);\r\n    gl.bindTexture(GL_TEXTURE_CUBE_MAP, cubeTexture);\r\n    gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL_RGBA, 3, 3, 0, GL_RGBA, GL_UNSIGNED_BYTE$1, data);\r\n    pool.freeType(data);\r\n    gl.bindTexture(GL_TEXTURE_CUBE_MAP, null);\r\n    gl.deleteTexture(cubeTexture);\r\n    npotTextureCube = !gl.getError();\r\n  }\r\n\r\n  return {\r\n    // drawing buffer bit depth\r\n    colorBits: [\r\n      gl.getParameter(GL_RED_BITS),\r\n      gl.getParameter(GL_GREEN_BITS),\r\n      gl.getParameter(GL_BLUE_BITS),\r\n      gl.getParameter(GL_ALPHA_BITS)\r\n    ],\r\n    depthBits: gl.getParameter(GL_DEPTH_BITS),\r\n    stencilBits: gl.getParameter(GL_STENCIL_BITS),\r\n    subpixelBits: gl.getParameter(GL_SUBPIXEL_BITS),\r\n\r\n    // supported extensions\r\n    extensions: Object.keys(extensions).filter(function (ext) {\r\n      return !!extensions[ext]\r\n    }),\r\n\r\n    // max aniso samples\r\n    maxAnisotropic: maxAnisotropic,\r\n\r\n    // max draw buffers\r\n    maxDrawbuffers: maxDrawbuffers,\r\n    maxColorAttachments: maxColorAttachments,\r\n\r\n    // point and line size ranges\r\n    pointSizeDims: gl.getParameter(GL_ALIASED_POINT_SIZE_RANGE),\r\n    lineWidthDims: gl.getParameter(GL_ALIASED_LINE_WIDTH_RANGE),\r\n    maxViewportDims: gl.getParameter(GL_MAX_VIEWPORT_DIMS),\r\n    maxCombinedTextureUnits: gl.getParameter(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS),\r\n    maxCubeMapSize: gl.getParameter(GL_MAX_CUBE_MAP_TEXTURE_SIZE),\r\n    maxRenderbufferSize: gl.getParameter(GL_MAX_RENDERBUFFER_SIZE),\r\n    maxTextureUnits: gl.getParameter(GL_MAX_TEXTURE_IMAGE_UNITS),\r\n    maxTextureSize: gl.getParameter(GL_MAX_TEXTURE_SIZE),\r\n    maxAttributes: gl.getParameter(GL_MAX_VERTEX_ATTRIBS),\r\n    maxVertexUniforms: gl.getParameter(GL_MAX_VERTEX_UNIFORM_VECTORS),\r\n    maxVertexTextureUnits: gl.getParameter(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS),\r\n    maxVaryingVectors: gl.getParameter(GL_MAX_VARYING_VECTORS),\r\n    maxFragmentUniforms: gl.getParameter(GL_MAX_FRAGMENT_UNIFORM_VECTORS),\r\n\r\n    // vendor info\r\n    glsl: gl.getParameter(GL_SHADING_LANGUAGE_VERSION),\r\n    renderer: gl.getParameter(GL_RENDERER),\r\n    vendor: gl.getParameter(GL_VENDOR),\r\n    version: gl.getParameter(GL_VERSION),\r\n\r\n    // quirks\r\n    readFloat: readFloat,\r\n    npotTextureCube: npotTextureCube\r\n  }\r\n};\n\nfunction isNDArrayLike (obj) {\r\n  return (\r\n    !!obj &&\r\n    typeof obj === 'object' &&\r\n    Array.isArray(obj.shape) &&\r\n    Array.isArray(obj.stride) &&\r\n    typeof obj.offset === 'number' &&\r\n    obj.shape.length === obj.stride.length &&\r\n    (Array.isArray(obj.data) ||\r\n      isTypedArray(obj.data)))\r\n}\n\nvar values = function (obj) {\r\n  return Object.keys(obj).map(function (key) { return obj[key] })\r\n};\n\nvar flattenUtils = {\r\n  shape: arrayShape$1,\r\n  flatten: flattenArray\r\n};\r\n\r\nfunction flatten1D (array, nx, out) {\r\n  for (var i = 0; i < nx; ++i) {\r\n    out[i] = array[i];\r\n  }\r\n}\r\n\r\nfunction flatten2D (array, nx, ny, out) {\r\n  var ptr = 0;\r\n  for (var i = 0; i < nx; ++i) {\r\n    var row = array[i];\r\n    for (var j = 0; j < ny; ++j) {\r\n      out[ptr++] = row[j];\r\n    }\r\n  }\r\n}\r\n\r\nfunction flatten3D (array, nx, ny, nz, out, ptr_) {\r\n  var ptr = ptr_;\r\n  for (var i = 0; i < nx; ++i) {\r\n    var row = array[i];\r\n    for (var j = 0; j < ny; ++j) {\r\n      var col = row[j];\r\n      for (var k = 0; k < nz; ++k) {\r\n        out[ptr++] = col[k];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction flattenRec (array, shape, level, out, ptr) {\r\n  var stride = 1;\r\n  for (var i = level + 1; i < shape.length; ++i) {\r\n    stride *= shape[i];\r\n  }\r\n  var n = shape[level];\r\n  if (shape.length - level === 4) {\r\n    var nx = shape[level + 1];\r\n    var ny = shape[level + 2];\r\n    var nz = shape[level + 3];\r\n    for (i = 0; i < n; ++i) {\r\n      flatten3D(array[i], nx, ny, nz, out, ptr);\r\n      ptr += stride;\r\n    }\r\n  } else {\r\n    for (i = 0; i < n; ++i) {\r\n      flattenRec(array[i], shape, level + 1, out, ptr);\r\n      ptr += stride;\r\n    }\r\n  }\r\n}\r\n\r\nfunction flattenArray (array, shape, type, out_) {\r\n  var sz = 1;\r\n  if (shape.length) {\r\n    for (var i = 0; i < shape.length; ++i) {\r\n      sz *= shape[i];\r\n    }\r\n  } else {\r\n    sz = 0;\r\n  }\r\n  var out = out_ || pool.allocType(type, sz);\r\n  switch (shape.length) {\r\n    case 0:\r\n      break\r\n    case 1:\r\n      flatten1D(array, shape[0], out);\r\n      break\r\n    case 2:\r\n      flatten2D(array, shape[0], shape[1], out);\r\n      break\r\n    case 3:\r\n      flatten3D(array, shape[0], shape[1], shape[2], out, 0);\r\n      break\r\n    default:\r\n      flattenRec(array, shape, 0, out, 0);\r\n  }\r\n  return out\r\n}\r\n\r\nfunction arrayShape$1 (array_) {\r\n  var shape = [];\r\n  for (var array = array_; array.length; array = array[0]) {\r\n    shape.push(array.length);\r\n  }\r\n  return shape\r\n}\n\nvar arrayTypes = {\n\t\"[object Int8Array]\": 5120,\n\t\"[object Int16Array]\": 5122,\n\t\"[object Int32Array]\": 5124,\n\t\"[object Uint8Array]\": 5121,\n\t\"[object Uint8ClampedArray]\": 5121,\n\t\"[object Uint16Array]\": 5123,\n\t\"[object Uint32Array]\": 5125,\n\t\"[object Float32Array]\": 5126,\n\t\"[object Float64Array]\": 5121,\n\t\"[object ArrayBuffer]\": 5121\n};\n\nvar int8 = 5120;\nvar int16 = 5122;\nvar int32 = 5124;\nvar uint8 = 5121;\nvar uint16 = 5123;\nvar uint32 = 5125;\nvar float = 5126;\nvar float32 = 5126;\nvar glTypes = {\n\tint8: int8,\n\tint16: int16,\n\tint32: int32,\n\tuint8: uint8,\n\tuint16: uint16,\n\tuint32: uint32,\n\tfloat: float,\n\tfloat32: float32\n};\n\nvar dynamic$1 = 35048;\nvar stream = 35040;\nvar usageTypes = {\n\tdynamic: dynamic$1,\n\tstream: stream,\n\t\"static\": 35044\n};\n\nvar arrayFlatten = flattenUtils.flatten;\r\nvar arrayShape = flattenUtils.shape;\r\n\r\nvar GL_STATIC_DRAW = 0x88E4;\r\nvar GL_STREAM_DRAW = 0x88E0;\r\n\r\nvar GL_UNSIGNED_BYTE$3 = 5121;\r\nvar GL_FLOAT$3 = 5126;\r\n\r\nvar DTYPES_SIZES = [];\r\nDTYPES_SIZES[5120] = 1; // int8\r\nDTYPES_SIZES[5122] = 2; // int16\r\nDTYPES_SIZES[5124] = 4; // int32\r\nDTYPES_SIZES[5121] = 1; // uint8\r\nDTYPES_SIZES[5123] = 2; // uint16\r\nDTYPES_SIZES[5125] = 4; // uint32\r\nDTYPES_SIZES[5126] = 4; // float32\r\n\r\nfunction typedArrayCode (data) {\r\n  return arrayTypes[Object.prototype.toString.call(data)] | 0\r\n}\r\n\r\nfunction copyArray (out, inp) {\r\n  for (var i = 0; i < inp.length; ++i) {\r\n    out[i] = inp[i];\r\n  }\r\n}\r\n\r\nfunction transpose (\r\n  result, data, shapeX, shapeY, strideX, strideY, offset) {\r\n  var ptr = 0;\r\n  for (var i = 0; i < shapeX; ++i) {\r\n    for (var j = 0; j < shapeY; ++j) {\r\n      result[ptr++] = data[strideX * i + strideY * j + offset];\r\n    }\r\n  }\r\n}\r\n\r\nfunction wrapBufferState (gl, stats, config, attributeState) {\r\n  var bufferCount = 0;\r\n  var bufferSet = {};\r\n\r\n  function REGLBuffer (type) {\r\n    this.id = bufferCount++;\r\n    this.buffer = gl.createBuffer();\r\n    this.type = type;\r\n    this.usage = GL_STATIC_DRAW;\r\n    this.byteLength = 0;\r\n    this.dimension = 1;\r\n    this.dtype = GL_UNSIGNED_BYTE$3;\r\n\r\n    this.persistentData = null;\r\n\r\n    if (config.profile) {\r\n      this.stats = {size: 0};\r\n    }\r\n  }\r\n\r\n  REGLBuffer.prototype.bind = function () {\r\n    gl.bindBuffer(this.type, this.buffer);\r\n  };\r\n\r\n  REGLBuffer.prototype.destroy = function () {\r\n    destroy(this);\r\n  };\r\n\r\n  var streamPool = [];\r\n\r\n  function createStream (type, data) {\r\n    var buffer = streamPool.pop();\r\n    if (!buffer) {\r\n      buffer = new REGLBuffer(type);\r\n    }\r\n    buffer.bind();\r\n    initBufferFromData(buffer, data, GL_STREAM_DRAW, 0, 1, false);\r\n    return buffer\r\n  }\r\n\r\n  function destroyStream (stream$$1) {\r\n    streamPool.push(stream$$1);\r\n  }\r\n\r\n  function initBufferFromTypedArray (buffer, data, usage) {\r\n    buffer.byteLength = data.byteLength;\r\n    gl.bufferData(buffer.type, data, usage);\r\n  }\r\n\r\n  function initBufferFromData (buffer, data, usage, dtype, dimension, persist) {\r\n    var shape;\r\n    buffer.usage = usage;\r\n    if (Array.isArray(data)) {\r\n      buffer.dtype = dtype || GL_FLOAT$3;\r\n      if (data.length > 0) {\r\n        var flatData;\r\n        if (Array.isArray(data[0])) {\r\n          shape = arrayShape(data);\r\n          var dim = 1;\r\n          for (var i = 1; i < shape.length; ++i) {\r\n            dim *= shape[i];\r\n          }\r\n          buffer.dimension = dim;\r\n          flatData = arrayFlatten(data, shape, buffer.dtype);\r\n          initBufferFromTypedArray(buffer, flatData, usage);\r\n          if (persist) {\r\n            buffer.persistentData = flatData;\r\n          } else {\r\n            pool.freeType(flatData);\r\n          }\r\n        } else if (typeof data[0] === 'number') {\r\n          buffer.dimension = dimension;\r\n          var typedData = pool.allocType(buffer.dtype, data.length);\r\n          copyArray(typedData, data);\r\n          initBufferFromTypedArray(buffer, typedData, usage);\r\n          if (persist) {\r\n            buffer.persistentData = typedData;\r\n          } else {\r\n            pool.freeType(typedData);\r\n          }\r\n        } else if (isTypedArray(data[0])) {\r\n          buffer.dimension = data[0].length;\r\n          buffer.dtype = dtype || typedArrayCode(data[0]) || GL_FLOAT$3;\r\n          flatData = arrayFlatten(\r\n            data,\r\n            [data.length, data[0].length],\r\n            buffer.dtype);\r\n          initBufferFromTypedArray(buffer, flatData, usage);\r\n          if (persist) {\r\n            buffer.persistentData = flatData;\r\n          } else {\r\n            pool.freeType(flatData);\r\n          }\r\n        } else {\r\n          check$1.raise('invalid buffer data');\r\n        }\r\n      }\r\n    } else if (isTypedArray(data)) {\r\n      buffer.dtype = dtype || typedArrayCode(data);\r\n      buffer.dimension = dimension;\r\n      initBufferFromTypedArray(buffer, data, usage);\r\n      if (persist) {\r\n        buffer.persistentData = new Uint8Array(new Uint8Array(data.buffer));\r\n      }\r\n    } else if (isNDArrayLike(data)) {\r\n      shape = data.shape;\r\n      var stride = data.stride;\r\n      var offset = data.offset;\r\n\r\n      var shapeX = 0;\r\n      var shapeY = 0;\r\n      var strideX = 0;\r\n      var strideY = 0;\r\n      if (shape.length === 1) {\r\n        shapeX = shape[0];\r\n        shapeY = 1;\r\n        strideX = stride[0];\r\n        strideY = 0;\r\n      } else if (shape.length === 2) {\r\n        shapeX = shape[0];\r\n        shapeY = shape[1];\r\n        strideX = stride[0];\r\n        strideY = stride[1];\r\n      } else {\r\n        check$1.raise('invalid shape');\r\n      }\r\n\r\n      buffer.dtype = dtype || typedArrayCode(data.data) || GL_FLOAT$3;\r\n      buffer.dimension = shapeY;\r\n\r\n      var transposeData = pool.allocType(buffer.dtype, shapeX * shapeY);\r\n      transpose(transposeData,\r\n        data.data,\r\n        shapeX, shapeY,\r\n        strideX, strideY,\r\n        offset);\r\n      initBufferFromTypedArray(buffer, transposeData, usage);\r\n      if (persist) {\r\n        buffer.persistentData = transposeData;\r\n      } else {\r\n        pool.freeType(transposeData);\r\n      }\r\n    } else {\r\n      check$1.raise('invalid buffer data');\r\n    }\r\n  }\r\n\r\n  function destroy (buffer) {\r\n    stats.bufferCount--;\r\n\r\n    for (var i = 0; i < attributeState.state.length; ++i) {\r\n      var record = attributeState.state[i];\r\n      if (record.buffer === buffer) {\r\n        gl.disableVertexAttribArray(i);\r\n        record.buffer = null;\r\n      }\r\n    }\r\n\r\n    var handle = buffer.buffer;\r\n    check$1(handle, 'buffer must not be deleted already');\r\n    gl.deleteBuffer(handle);\r\n    buffer.buffer = null;\r\n    delete bufferSet[buffer.id];\r\n  }\r\n\r\n  function createBuffer (options, type, deferInit, persistent) {\r\n    stats.bufferCount++;\r\n\r\n    var buffer = new REGLBuffer(type);\r\n    bufferSet[buffer.id] = buffer;\r\n\r\n    function reglBuffer (options) {\r\n      var usage = GL_STATIC_DRAW;\r\n      var data = null;\r\n      var byteLength = 0;\r\n      var dtype = 0;\r\n      var dimension = 1;\r\n      if (Array.isArray(options) ||\r\n          isTypedArray(options) ||\r\n          isNDArrayLike(options)) {\r\n        data = options;\r\n      } else if (typeof options === 'number') {\r\n        byteLength = options | 0;\r\n      } else if (options) {\r\n        check$1.type(\r\n          options, 'object',\r\n          'buffer arguments must be an object, a number or an array');\r\n\r\n        if ('data' in options) {\r\n          check$1(\r\n            data === null ||\r\n            Array.isArray(data) ||\r\n            isTypedArray(data) ||\r\n            isNDArrayLike(data),\r\n            'invalid data for buffer');\r\n          data = options.data;\r\n        }\r\n\r\n        if ('usage' in options) {\r\n          check$1.parameter(options.usage, usageTypes, 'invalid buffer usage');\r\n          usage = usageTypes[options.usage];\r\n        }\r\n\r\n        if ('type' in options) {\r\n          check$1.parameter(options.type, glTypes, 'invalid buffer type');\r\n          dtype = glTypes[options.type];\r\n        }\r\n\r\n        if ('dimension' in options) {\r\n          check$1.type(options.dimension, 'number', 'invalid dimension');\r\n          dimension = options.dimension | 0;\r\n        }\r\n\r\n        if ('length' in options) {\r\n          check$1.nni(byteLength, 'buffer length must be a nonnegative integer');\r\n          byteLength = options.length | 0;\r\n        }\r\n      }\r\n\r\n      buffer.bind();\r\n      if (!data) {\r\n        // #475\r\n        if (byteLength) gl.bufferData(buffer.type, byteLength, usage);\r\n        buffer.dtype = dtype || GL_UNSIGNED_BYTE$3;\r\n        buffer.usage = usage;\r\n        buffer.dimension = dimension;\r\n        buffer.byteLength = byteLength;\r\n      } else {\r\n        initBufferFromData(buffer, data, usage, dtype, dimension, persistent);\r\n      }\r\n\r\n      if (config.profile) {\r\n        buffer.stats.size = buffer.byteLength * DTYPES_SIZES[buffer.dtype];\r\n      }\r\n\r\n      return reglBuffer\r\n    }\r\n\r\n    function setSubData (data, offset) {\r\n      check$1(offset + data.byteLength <= buffer.byteLength,\r\n        'invalid buffer subdata call, buffer is too small. ' + ' Can\\'t write data of size ' + data.byteLength + ' starting from offset ' + offset + ' to a buffer of size ' + buffer.byteLength);\r\n\r\n      gl.bufferSubData(buffer.type, offset, data);\r\n    }\r\n\r\n    function subdata (data, offset_) {\r\n      var offset = (offset_ || 0) | 0;\r\n      var shape;\r\n      buffer.bind();\r\n      if (isTypedArray(data)) {\r\n        setSubData(data, offset);\r\n      } else if (Array.isArray(data)) {\r\n        if (data.length > 0) {\r\n          if (typeof data[0] === 'number') {\r\n            var converted = pool.allocType(buffer.dtype, data.length);\r\n            copyArray(converted, data);\r\n            setSubData(converted, offset);\r\n            pool.freeType(converted);\r\n          } else if (Array.isArray(data[0]) || isTypedArray(data[0])) {\r\n            shape = arrayShape(data);\r\n            var flatData = arrayFlatten(data, shape, buffer.dtype);\r\n            setSubData(flatData, offset);\r\n            pool.freeType(flatData);\r\n          } else {\r\n            check$1.raise('invalid buffer data');\r\n          }\r\n        }\r\n      } else if (isNDArrayLike(data)) {\r\n        shape = data.shape;\r\n        var stride = data.stride;\r\n\r\n        var shapeX = 0;\r\n        var shapeY = 0;\r\n        var strideX = 0;\r\n        var strideY = 0;\r\n        if (shape.length === 1) {\r\n          shapeX = shape[0];\r\n          shapeY = 1;\r\n          strideX = stride[0];\r\n          strideY = 0;\r\n        } else if (shape.length === 2) {\r\n          shapeX = shape[0];\r\n          shapeY = shape[1];\r\n          strideX = stride[0];\r\n          strideY = stride[1];\r\n        } else {\r\n          check$1.raise('invalid shape');\r\n        }\r\n        var dtype = Array.isArray(data.data)\r\n          ? buffer.dtype\r\n          : typedArrayCode(data.data);\r\n\r\n        var transposeData = pool.allocType(dtype, shapeX * shapeY);\r\n        transpose(transposeData,\r\n          data.data,\r\n          shapeX, shapeY,\r\n          strideX, strideY,\r\n          data.offset);\r\n        setSubData(transposeData, offset);\r\n        pool.freeType(transposeData);\r\n      } else {\r\n        check$1.raise('invalid data for buffer subdata');\r\n      }\r\n      return reglBuffer\r\n    }\r\n\r\n    if (!deferInit) {\r\n      reglBuffer(options);\r\n    }\r\n\r\n    reglBuffer._reglType = 'buffer';\r\n    reglBuffer._buffer = buffer;\r\n    reglBuffer.subdata = subdata;\r\n    if (config.profile) {\r\n      reglBuffer.stats = buffer.stats;\r\n    }\r\n    reglBuffer.destroy = function () { destroy(buffer); };\r\n\r\n    return reglBuffer\r\n  }\r\n\r\n  function restoreBuffers () {\r\n    values(bufferSet).forEach(function (buffer) {\r\n      buffer.buffer = gl.createBuffer();\r\n      gl.bindBuffer(buffer.type, buffer.buffer);\r\n      gl.bufferData(\r\n        buffer.type, buffer.persistentData || buffer.byteLength, buffer.usage);\r\n    });\r\n  }\r\n\r\n  if (config.profile) {\r\n    stats.getTotalBufferSize = function () {\r\n      var total = 0;\r\n      // TODO: Right now, the streams are not part of the total count.\r\n      Object.keys(bufferSet).forEach(function (key) {\r\n        total += bufferSet[key].stats.size;\r\n      });\r\n      return total\r\n    };\r\n  }\r\n\r\n  return {\r\n    create: createBuffer,\r\n\r\n    createStream: createStream,\r\n    destroyStream: destroyStream,\r\n\r\n    clear: function () {\r\n      values(bufferSet).forEach(destroy);\r\n      streamPool.forEach(destroy);\r\n    },\r\n\r\n    getBuffer: function (wrapper) {\r\n      if (wrapper && wrapper._buffer instanceof REGLBuffer) {\r\n        return wrapper._buffer\r\n      }\r\n      return null\r\n    },\r\n\r\n    restore: restoreBuffers,\r\n\r\n    _initBuffer: initBufferFromData\r\n  }\r\n}\n\nvar points = 0;\nvar point = 0;\nvar lines = 1;\nvar line = 1;\nvar triangles = 4;\nvar triangle = 4;\nvar primTypes = {\n\tpoints: points,\n\tpoint: point,\n\tlines: lines,\n\tline: line,\n\ttriangles: triangles,\n\ttriangle: triangle,\n\t\"line loop\": 2,\n\t\"line strip\": 3,\n\t\"triangle strip\": 5,\n\t\"triangle fan\": 6\n};\n\nvar GL_POINTS = 0;\r\nvar GL_LINES = 1;\r\nvar GL_TRIANGLES = 4;\r\n\r\nvar GL_BYTE$2 = 5120;\r\nvar GL_UNSIGNED_BYTE$4 = 5121;\r\nvar GL_SHORT$2 = 5122;\r\nvar GL_UNSIGNED_SHORT$2 = 5123;\r\nvar GL_INT$2 = 5124;\r\nvar GL_UNSIGNED_INT$2 = 5125;\r\n\r\nvar GL_ELEMENT_ARRAY_BUFFER = 34963;\r\n\r\nvar GL_STREAM_DRAW$1 = 0x88E0;\r\nvar GL_STATIC_DRAW$1 = 0x88E4;\r\n\r\nfunction wrapElementsState (gl, extensions, bufferState, stats) {\r\n  var elementSet = {};\r\n  var elementCount = 0;\r\n\r\n  var elementTypes = {\r\n    'uint8': GL_UNSIGNED_BYTE$4,\r\n    'uint16': GL_UNSIGNED_SHORT$2\r\n  };\r\n\r\n  if (extensions.oes_element_index_uint) {\r\n    elementTypes.uint32 = GL_UNSIGNED_INT$2;\r\n  }\r\n\r\n  function REGLElementBuffer (buffer) {\r\n    this.id = elementCount++;\r\n    elementSet[this.id] = this;\r\n    this.buffer = buffer;\r\n    this.primType = GL_TRIANGLES;\r\n    this.vertCount = 0;\r\n    this.type = 0;\r\n  }\r\n\r\n  REGLElementBuffer.prototype.bind = function () {\r\n    this.buffer.bind();\r\n  };\r\n\r\n  var bufferPool = [];\r\n\r\n  function createElementStream (data) {\r\n    var result = bufferPool.pop();\r\n    if (!result) {\r\n      result = new REGLElementBuffer(bufferState.create(\r\n        null,\r\n        GL_ELEMENT_ARRAY_BUFFER,\r\n        true,\r\n        false)._buffer);\r\n    }\r\n    initElements(result, data, GL_STREAM_DRAW$1, -1, -1, 0, 0);\r\n    return result\r\n  }\r\n\r\n  function destroyElementStream (elements) {\r\n    bufferPool.push(elements);\r\n  }\r\n\r\n  function initElements (\r\n    elements,\r\n    data,\r\n    usage,\r\n    prim,\r\n    count,\r\n    byteLength,\r\n    type) {\r\n    elements.buffer.bind();\r\n    if (data) {\r\n      var predictedType = type;\r\n      if (!type && (\r\n          !isTypedArray(data) ||\r\n         (isNDArrayLike(data) && !isTypedArray(data.data)))) {\r\n        predictedType = extensions.oes_element_index_uint\r\n          ? GL_UNSIGNED_INT$2\r\n          : GL_UNSIGNED_SHORT$2;\r\n      }\r\n      bufferState._initBuffer(\r\n        elements.buffer,\r\n        data,\r\n        usage,\r\n        predictedType,\r\n        3);\r\n    } else {\r\n      gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, byteLength, usage);\r\n      elements.buffer.dtype = dtype || GL_UNSIGNED_BYTE$4;\r\n      elements.buffer.usage = usage;\r\n      elements.buffer.dimension = 3;\r\n      elements.buffer.byteLength = byteLength;\r\n    }\r\n\r\n    var dtype = type;\r\n    if (!type) {\r\n      switch (elements.buffer.dtype) {\r\n        case GL_UNSIGNED_BYTE$4:\r\n        case GL_BYTE$2:\r\n          dtype = GL_UNSIGNED_BYTE$4;\r\n          break\r\n\r\n        case GL_UNSIGNED_SHORT$2:\r\n        case GL_SHORT$2:\r\n          dtype = GL_UNSIGNED_SHORT$2;\r\n          break\r\n\r\n        case GL_UNSIGNED_INT$2:\r\n        case GL_INT$2:\r\n          dtype = GL_UNSIGNED_INT$2;\r\n          break\r\n\r\n        default:\r\n          check$1.raise('unsupported type for element array');\r\n      }\r\n      elements.buffer.dtype = dtype;\r\n    }\r\n    elements.type = dtype;\r\n\r\n    // Check oes_element_index_uint extension\r\n    check$1(\r\n      dtype !== GL_UNSIGNED_INT$2 ||\r\n      !!extensions.oes_element_index_uint,\r\n      '32 bit element buffers not supported, enable oes_element_index_uint first');\r\n\r\n    // try to guess default primitive type and arguments\r\n    var vertCount = count;\r\n    if (vertCount < 0) {\r\n      vertCount = elements.buffer.byteLength;\r\n      if (dtype === GL_UNSIGNED_SHORT$2) {\r\n        vertCount >>= 1;\r\n      } else if (dtype === GL_UNSIGNED_INT$2) {\r\n        vertCount >>= 2;\r\n      }\r\n    }\r\n    elements.vertCount = vertCount;\r\n\r\n    // try to guess primitive type from cell dimension\r\n    var primType = prim;\r\n    if (prim < 0) {\r\n      primType = GL_TRIANGLES;\r\n      var dimension = elements.buffer.dimension;\r\n      if (dimension === 1) primType = GL_POINTS;\r\n      if (dimension === 2) primType = GL_LINES;\r\n      if (dimension === 3) primType = GL_TRIANGLES;\r\n    }\r\n    elements.primType = primType;\r\n  }\r\n\r\n  function destroyElements (elements) {\r\n    stats.elementsCount--;\r\n\r\n    check$1(elements.buffer !== null, 'must not double destroy elements');\r\n    delete elementSet[elements.id];\r\n    elements.buffer.destroy();\r\n    elements.buffer = null;\r\n  }\r\n\r\n  function createElements (options, persistent) {\r\n    var buffer = bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true);\r\n    var elements = new REGLElementBuffer(buffer._buffer);\r\n    stats.elementsCount++;\r\n\r\n    function reglElements (options) {\r\n      if (!options) {\r\n        buffer();\r\n        elements.primType = GL_TRIANGLES;\r\n        elements.vertCount = 0;\r\n        elements.type = GL_UNSIGNED_BYTE$4;\r\n      } else if (typeof options === 'number') {\r\n        buffer(options);\r\n        elements.primType = GL_TRIANGLES;\r\n        elements.vertCount = options | 0;\r\n        elements.type = GL_UNSIGNED_BYTE$4;\r\n      } else {\r\n        var data = null;\r\n        var usage = GL_STATIC_DRAW$1;\r\n        var primType = -1;\r\n        var vertCount = -1;\r\n        var byteLength = 0;\r\n        var dtype = 0;\r\n        if (Array.isArray(options) ||\r\n            isTypedArray(options) ||\r\n            isNDArrayLike(options)) {\r\n          data = options;\r\n        } else {\r\n          check$1.type(options, 'object', 'invalid arguments for elements');\r\n          if ('data' in options) {\r\n            data = options.data;\r\n            check$1(\r\n                Array.isArray(data) ||\r\n                isTypedArray(data) ||\r\n                isNDArrayLike(data),\r\n                'invalid data for element buffer');\r\n          }\r\n          if ('usage' in options) {\r\n            check$1.parameter(\r\n              options.usage,\r\n              usageTypes,\r\n              'invalid element buffer usage');\r\n            usage = usageTypes[options.usage];\r\n          }\r\n          if ('primitive' in options) {\r\n            check$1.parameter(\r\n              options.primitive,\r\n              primTypes,\r\n              'invalid element buffer primitive');\r\n            primType = primTypes[options.primitive];\r\n          }\r\n          if ('count' in options) {\r\n            check$1(\r\n              typeof options.count === 'number' && options.count >= 0,\r\n              'invalid vertex count for elements');\r\n            vertCount = options.count | 0;\r\n          }\r\n          if ('type' in options) {\r\n            check$1.parameter(\r\n              options.type,\r\n              elementTypes,\r\n              'invalid buffer type');\r\n            dtype = elementTypes[options.type];\r\n          }\r\n          if ('length' in options) {\r\n            byteLength = options.length | 0;\r\n          } else {\r\n            byteLength = vertCount;\r\n            if (dtype === GL_UNSIGNED_SHORT$2 || dtype === GL_SHORT$2) {\r\n              byteLength *= 2;\r\n            } else if (dtype === GL_UNSIGNED_INT$2 || dtype === GL_INT$2) {\r\n              byteLength *= 4;\r\n            }\r\n          }\r\n        }\r\n        initElements(\r\n          elements,\r\n          data,\r\n          usage,\r\n          primType,\r\n          vertCount,\r\n          byteLength,\r\n          dtype);\r\n      }\r\n\r\n      return reglElements\r\n    }\r\n\r\n    reglElements(options);\r\n\r\n    reglElements._reglType = 'elements';\r\n    reglElements._elements = elements;\r\n    reglElements.subdata = function (data, offset) {\r\n      buffer.subdata(data, offset);\r\n      return reglElements\r\n    };\r\n    reglElements.destroy = function () {\r\n      destroyElements(elements);\r\n    };\r\n\r\n    return reglElements\r\n  }\r\n\r\n  return {\r\n    create: createElements,\r\n    createStream: createElementStream,\r\n    destroyStream: destroyElementStream,\r\n    getElements: function (elements) {\r\n      if (typeof elements === 'function' &&\r\n          elements._elements instanceof REGLElementBuffer) {\r\n        return elements._elements\r\n      }\r\n      return null\r\n    },\r\n    clear: function () {\r\n      values(elementSet).forEach(destroyElements);\r\n    }\r\n  }\r\n}\n\nvar FLOAT = new Float32Array(1);\r\nvar INT = new Uint32Array(FLOAT.buffer);\r\n\r\nvar GL_UNSIGNED_SHORT$4 = 5123;\r\n\r\nfunction convertToHalfFloat (array) {\r\n  var ushorts = pool.allocType(GL_UNSIGNED_SHORT$4, array.length);\r\n\r\n  for (var i = 0; i < array.length; ++i) {\r\n    if (isNaN(array[i])) {\r\n      ushorts[i] = 0xffff;\r\n    } else if (array[i] === Infinity) {\r\n      ushorts[i] = 0x7c00;\r\n    } else if (array[i] === -Infinity) {\r\n      ushorts[i] = 0xfc00;\r\n    } else {\r\n      FLOAT[0] = array[i];\r\n      var x = INT[0];\r\n\r\n      var sgn = (x >>> 31) << 15;\r\n      var exp = ((x << 1) >>> 24) - 127;\r\n      var frac = (x >> 13) & ((1 << 10) - 1);\r\n\r\n      if (exp < -24) {\r\n        // round non-representable denormals to 0\r\n        ushorts[i] = sgn;\r\n      } else if (exp < -14) {\r\n        // handle denormals\r\n        var s = -14 - exp;\r\n        ushorts[i] = sgn + ((frac + (1 << 10)) >> s);\r\n      } else if (exp > 15) {\r\n        // round overflow to +/- Infinity\r\n        ushorts[i] = sgn + 0x7c00;\r\n      } else {\r\n        // otherwise convert directly\r\n        ushorts[i] = sgn + ((exp + 15) << 10) + frac;\r\n      }\r\n    }\r\n  }\r\n\r\n  return ushorts\r\n}\n\nfunction isArrayLike (s) {\r\n  return Array.isArray(s) || isTypedArray(s)\r\n}\n\nvar isPow2$1 = function (v) {\r\n  return !(v & (v - 1)) && (!!v)\r\n};\n\nvar GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;\r\n\r\nvar GL_TEXTURE_2D$1 = 0x0DE1;\r\nvar GL_TEXTURE_CUBE_MAP$1 = 0x8513;\r\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 = 0x8515;\r\n\r\nvar GL_RGBA$1 = 0x1908;\r\nvar GL_ALPHA = 0x1906;\r\nvar GL_RGB = 0x1907;\r\nvar GL_LUMINANCE = 0x1909;\r\nvar GL_LUMINANCE_ALPHA = 0x190A;\r\n\r\nvar GL_RGBA4 = 0x8056;\r\nvar GL_RGB5_A1 = 0x8057;\r\nvar GL_RGB565 = 0x8D62;\r\n\r\nvar GL_UNSIGNED_SHORT_4_4_4_4$1 = 0x8033;\r\nvar GL_UNSIGNED_SHORT_5_5_5_1$1 = 0x8034;\r\nvar GL_UNSIGNED_SHORT_5_6_5$1 = 0x8363;\r\nvar GL_UNSIGNED_INT_24_8_WEBGL$1 = 0x84FA;\r\n\r\nvar GL_DEPTH_COMPONENT = 0x1902;\r\nvar GL_DEPTH_STENCIL = 0x84F9;\r\n\r\nvar GL_SRGB_EXT = 0x8C40;\r\nvar GL_SRGB_ALPHA_EXT = 0x8C42;\r\n\r\nvar GL_HALF_FLOAT_OES$1 = 0x8D61;\r\n\r\nvar GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\r\nvar GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\r\nvar GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\r\nvar GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\r\n\r\nvar GL_COMPRESSED_RGB_ATC_WEBGL = 0x8C92;\r\nvar GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93;\r\nvar GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE;\r\n\r\nvar GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;\r\nvar GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;\r\nvar GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;\r\nvar GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;\r\n\r\nvar GL_COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;\r\n\r\nvar GL_UNSIGNED_BYTE$5 = 0x1401;\r\nvar GL_UNSIGNED_SHORT$3 = 0x1403;\r\nvar GL_UNSIGNED_INT$3 = 0x1405;\r\nvar GL_FLOAT$4 = 0x1406;\r\n\r\nvar GL_TEXTURE_WRAP_S = 0x2802;\r\nvar GL_TEXTURE_WRAP_T = 0x2803;\r\n\r\nvar GL_REPEAT = 0x2901;\r\nvar GL_CLAMP_TO_EDGE$1 = 0x812F;\r\nvar GL_MIRRORED_REPEAT = 0x8370;\r\n\r\nvar GL_TEXTURE_MAG_FILTER = 0x2800;\r\nvar GL_TEXTURE_MIN_FILTER = 0x2801;\r\n\r\nvar GL_NEAREST$1 = 0x2600;\r\nvar GL_LINEAR = 0x2601;\r\nvar GL_NEAREST_MIPMAP_NEAREST$1 = 0x2700;\r\nvar GL_LINEAR_MIPMAP_NEAREST$1 = 0x2701;\r\nvar GL_NEAREST_MIPMAP_LINEAR$1 = 0x2702;\r\nvar GL_LINEAR_MIPMAP_LINEAR$1 = 0x2703;\r\n\r\nvar GL_GENERATE_MIPMAP_HINT = 0x8192;\r\nvar GL_DONT_CARE = 0x1100;\r\nvar GL_FASTEST = 0x1101;\r\nvar GL_NICEST = 0x1102;\r\n\r\nvar GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;\r\n\r\nvar GL_UNPACK_ALIGNMENT = 0x0CF5;\r\nvar GL_UNPACK_FLIP_Y_WEBGL = 0x9240;\r\nvar GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;\r\nvar GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\r\n\r\nvar GL_BROWSER_DEFAULT_WEBGL = 0x9244;\r\n\r\nvar GL_TEXTURE0$1 = 0x84C0;\r\n\r\nvar MIPMAP_FILTERS = [\r\n  GL_NEAREST_MIPMAP_NEAREST$1,\r\n  GL_NEAREST_MIPMAP_LINEAR$1,\r\n  GL_LINEAR_MIPMAP_NEAREST$1,\r\n  GL_LINEAR_MIPMAP_LINEAR$1\r\n];\r\n\r\nvar CHANNELS_FORMAT = [\r\n  0,\r\n  GL_LUMINANCE,\r\n  GL_LUMINANCE_ALPHA,\r\n  GL_RGB,\r\n  GL_RGBA$1\r\n];\r\n\r\nvar FORMAT_CHANNELS = {};\r\nFORMAT_CHANNELS[GL_LUMINANCE] =\r\nFORMAT_CHANNELS[GL_ALPHA] =\r\nFORMAT_CHANNELS[GL_DEPTH_COMPONENT] = 1;\r\nFORMAT_CHANNELS[GL_DEPTH_STENCIL] =\r\nFORMAT_CHANNELS[GL_LUMINANCE_ALPHA] = 2;\r\nFORMAT_CHANNELS[GL_RGB] =\r\nFORMAT_CHANNELS[GL_SRGB_EXT] = 3;\r\nFORMAT_CHANNELS[GL_RGBA$1] =\r\nFORMAT_CHANNELS[GL_SRGB_ALPHA_EXT] = 4;\r\n\r\nfunction objectName (str) {\r\n  return '[object ' + str + ']'\r\n}\r\n\r\nvar CANVAS_CLASS = objectName('HTMLCanvasElement');\r\nvar CONTEXT2D_CLASS = objectName('CanvasRenderingContext2D');\r\nvar BITMAP_CLASS = objectName('ImageBitmap');\r\nvar IMAGE_CLASS = objectName('HTMLImageElement');\r\nvar VIDEO_CLASS = objectName('HTMLVideoElement');\r\n\r\nvar PIXEL_CLASSES = Object.keys(arrayTypes).concat([\r\n  CANVAS_CLASS,\r\n  CONTEXT2D_CLASS,\r\n  BITMAP_CLASS,\r\n  IMAGE_CLASS,\r\n  VIDEO_CLASS\r\n]);\r\n\r\n// for every texture type, store\r\n// the size in bytes.\r\nvar TYPE_SIZES = [];\r\nTYPE_SIZES[GL_UNSIGNED_BYTE$5] = 1;\r\nTYPE_SIZES[GL_FLOAT$4] = 4;\r\nTYPE_SIZES[GL_HALF_FLOAT_OES$1] = 2;\r\n\r\nTYPE_SIZES[GL_UNSIGNED_SHORT$3] = 2;\r\nTYPE_SIZES[GL_UNSIGNED_INT$3] = 4;\r\n\r\nvar FORMAT_SIZES_SPECIAL = [];\r\nFORMAT_SIZES_SPECIAL[GL_RGBA4] = 2;\r\nFORMAT_SIZES_SPECIAL[GL_RGB5_A1] = 2;\r\nFORMAT_SIZES_SPECIAL[GL_RGB565] = 2;\r\nFORMAT_SIZES_SPECIAL[GL_DEPTH_STENCIL] = 4;\r\n\r\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_S3TC_DXT1_EXT] = 0.5;\r\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT1_EXT] = 0.5;\r\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT3_EXT] = 1;\r\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT5_EXT] = 1;\r\n\r\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ATC_WEBGL] = 0.5;\r\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL] = 1;\r\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL] = 1;\r\n\r\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = 0.5;\r\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = 0.25;\r\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = 0.5;\r\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = 0.25;\r\n\r\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ETC1_WEBGL] = 0.5;\r\n\r\nfunction isNumericArray (arr) {\r\n  return (\r\n    Array.isArray(arr) &&\r\n    (arr.length === 0 ||\r\n    typeof arr[0] === 'number'))\r\n}\r\n\r\nfunction isRectArray (arr) {\r\n  if (!Array.isArray(arr)) {\r\n    return false\r\n  }\r\n  var width = arr.length;\r\n  if (width === 0 || !isArrayLike(arr[0])) {\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\nfunction classString (x) {\r\n  return Object.prototype.toString.call(x)\r\n}\r\n\r\nfunction isCanvasElement (object) {\r\n  return classString(object) === CANVAS_CLASS\r\n}\r\n\r\nfunction isContext2D (object) {\r\n  return classString(object) === CONTEXT2D_CLASS\r\n}\r\n\r\nfunction isBitmap (object) {\r\n  return classString(object) === BITMAP_CLASS\r\n}\r\n\r\nfunction isImageElement (object) {\r\n  return classString(object) === IMAGE_CLASS\r\n}\r\n\r\nfunction isVideoElement (object) {\r\n  return classString(object) === VIDEO_CLASS\r\n}\r\n\r\nfunction isPixelData (object) {\r\n  if (!object) {\r\n    return false\r\n  }\r\n  var className = classString(object);\r\n  if (PIXEL_CLASSES.indexOf(className) >= 0) {\r\n    return true\r\n  }\r\n  return (\r\n    isNumericArray(object) ||\r\n    isRectArray(object) ||\r\n    isNDArrayLike(object))\r\n}\r\n\r\nfunction typedArrayCode$1 (data) {\r\n  return arrayTypes[Object.prototype.toString.call(data)] | 0\r\n}\r\n\r\nfunction convertData (result, data) {\r\n  var n = data.length;\r\n  switch (result.type) {\r\n    case GL_UNSIGNED_BYTE$5:\r\n    case GL_UNSIGNED_SHORT$3:\r\n    case GL_UNSIGNED_INT$3:\r\n    case GL_FLOAT$4:\r\n      var converted = pool.allocType(result.type, n);\r\n      converted.set(data);\r\n      result.data = converted;\r\n      break\r\n\r\n    case GL_HALF_FLOAT_OES$1:\r\n      result.data = convertToHalfFloat(data);\r\n      break\r\n\r\n    default:\r\n      check$1.raise('unsupported texture type, must specify a typed array');\r\n  }\r\n}\r\n\r\nfunction preConvert (image, n) {\r\n  return pool.allocType(\r\n    image.type === GL_HALF_FLOAT_OES$1\r\n      ? GL_FLOAT$4\r\n      : image.type, n)\r\n}\r\n\r\nfunction postConvert (image, data) {\r\n  if (image.type === GL_HALF_FLOAT_OES$1) {\r\n    image.data = convertToHalfFloat(data);\r\n    pool.freeType(data);\r\n  } else {\r\n    image.data = data;\r\n  }\r\n}\r\n\r\nfunction transposeData (image, array, strideX, strideY, strideC, offset) {\r\n  var w = image.width;\r\n  var h = image.height;\r\n  var c = image.channels;\r\n  var n = w * h * c;\r\n  var data = preConvert(image, n);\r\n\r\n  var p = 0;\r\n  for (var i = 0; i < h; ++i) {\r\n    for (var j = 0; j < w; ++j) {\r\n      for (var k = 0; k < c; ++k) {\r\n        data[p++] = array[strideX * j + strideY * i + strideC * k + offset];\r\n      }\r\n    }\r\n  }\r\n\r\n  postConvert(image, data);\r\n}\r\n\r\nfunction getTextureSize (format, type, width, height, isMipmap, isCube) {\r\n  var s;\r\n  if (typeof FORMAT_SIZES_SPECIAL[format] !== 'undefined') {\r\n    // we have a special array for dealing with weird color formats such as RGB5A1\r\n    s = FORMAT_SIZES_SPECIAL[format];\r\n  } else {\r\n    s = FORMAT_CHANNELS[format] * TYPE_SIZES[type];\r\n  }\r\n\r\n  if (isCube) {\r\n    s *= 6;\r\n  }\r\n\r\n  if (isMipmap) {\r\n    // compute the total size of all the mipmaps.\r\n    var total = 0;\r\n\r\n    var w = width;\r\n    while (w >= 1) {\r\n      // we can only use mipmaps on a square image,\r\n      // so we can simply use the width and ignore the height:\r\n      total += s * w * w;\r\n      w /= 2;\r\n    }\r\n    return total\r\n  } else {\r\n    return s * width * height\r\n  }\r\n}\r\n\r\nfunction createTextureSet (\r\n  gl, extensions, limits, reglPoll, contextState, stats, config) {\r\n  // -------------------------------------------------------\r\n  // Initialize constants and parameter tables here\r\n  // -------------------------------------------------------\r\n  var mipmapHint = {\r\n    \"don't care\": GL_DONT_CARE,\r\n    'dont care': GL_DONT_CARE,\r\n    'nice': GL_NICEST,\r\n    'fast': GL_FASTEST\r\n  };\r\n\r\n  var wrapModes = {\r\n    'repeat': GL_REPEAT,\r\n    'clamp': GL_CLAMP_TO_EDGE$1,\r\n    'mirror': GL_MIRRORED_REPEAT\r\n  };\r\n\r\n  var magFilters = {\r\n    'nearest': GL_NEAREST$1,\r\n    'linear': GL_LINEAR\r\n  };\r\n\r\n  var minFilters = extend({\r\n    'mipmap': GL_LINEAR_MIPMAP_LINEAR$1,\r\n    'nearest mipmap nearest': GL_NEAREST_MIPMAP_NEAREST$1,\r\n    'linear mipmap nearest': GL_LINEAR_MIPMAP_NEAREST$1,\r\n    'nearest mipmap linear': GL_NEAREST_MIPMAP_LINEAR$1,\r\n    'linear mipmap linear': GL_LINEAR_MIPMAP_LINEAR$1\r\n  }, magFilters);\r\n\r\n  var colorSpace = {\r\n    'none': 0,\r\n    'browser': GL_BROWSER_DEFAULT_WEBGL\r\n  };\r\n\r\n  var textureTypes = {\r\n    'uint8': GL_UNSIGNED_BYTE$5,\r\n    'rgba4': GL_UNSIGNED_SHORT_4_4_4_4$1,\r\n    'rgb565': GL_UNSIGNED_SHORT_5_6_5$1,\r\n    'rgb5 a1': GL_UNSIGNED_SHORT_5_5_5_1$1\r\n  };\r\n\r\n  var textureFormats = {\r\n    'alpha': GL_ALPHA,\r\n    'luminance': GL_LUMINANCE,\r\n    'luminance alpha': GL_LUMINANCE_ALPHA,\r\n    'rgb': GL_RGB,\r\n    'rgba': GL_RGBA$1,\r\n    'rgba4': GL_RGBA4,\r\n    'rgb5 a1': GL_RGB5_A1,\r\n    'rgb565': GL_RGB565\r\n  };\r\n\r\n  var compressedTextureFormats = {};\r\n\r\n  if (extensions.ext_srgb) {\r\n    textureFormats.srgb = GL_SRGB_EXT;\r\n    textureFormats.srgba = GL_SRGB_ALPHA_EXT;\r\n  }\r\n\r\n  if (extensions.oes_texture_float) {\r\n    textureTypes.float32 = textureTypes.float = GL_FLOAT$4;\r\n  }\r\n\r\n  if (extensions.oes_texture_half_float) {\r\n    textureTypes['float16'] = textureTypes['half float'] = GL_HALF_FLOAT_OES$1;\r\n  }\r\n\r\n  if (extensions.webgl_depth_texture) {\r\n    extend(textureFormats, {\r\n      'depth': GL_DEPTH_COMPONENT,\r\n      'depth stencil': GL_DEPTH_STENCIL\r\n    });\r\n\r\n    extend(textureTypes, {\r\n      'uint16': GL_UNSIGNED_SHORT$3,\r\n      'uint32': GL_UNSIGNED_INT$3,\r\n      'depth stencil': GL_UNSIGNED_INT_24_8_WEBGL$1\r\n    });\r\n  }\r\n\r\n  if (extensions.webgl_compressed_texture_s3tc) {\r\n    extend(compressedTextureFormats, {\r\n      'rgb s3tc dxt1': GL_COMPRESSED_RGB_S3TC_DXT1_EXT,\r\n      'rgba s3tc dxt1': GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,\r\n      'rgba s3tc dxt3': GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,\r\n      'rgba s3tc dxt5': GL_COMPRESSED_RGBA_S3TC_DXT5_EXT\r\n    });\r\n  }\r\n\r\n  if (extensions.webgl_compressed_texture_atc) {\r\n    extend(compressedTextureFormats, {\r\n      'rgb atc': GL_COMPRESSED_RGB_ATC_WEBGL,\r\n      'rgba atc explicit alpha': GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,\r\n      'rgba atc interpolated alpha': GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\r\n    });\r\n  }\r\n\r\n  if (extensions.webgl_compressed_texture_pvrtc) {\r\n    extend(compressedTextureFormats, {\r\n      'rgb pvrtc 4bppv1': GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\r\n      'rgb pvrtc 2bppv1': GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG,\r\n      'rgba pvrtc 4bppv1': GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\r\n      'rgba pvrtc 2bppv1': GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\r\n    });\r\n  }\r\n\r\n  if (extensions.webgl_compressed_texture_etc1) {\r\n    compressedTextureFormats['rgb etc1'] = GL_COMPRESSED_RGB_ETC1_WEBGL;\r\n  }\r\n\r\n  // Copy over all texture formats\r\n  var supportedCompressedFormats = Array.prototype.slice.call(\r\n    gl.getParameter(GL_COMPRESSED_TEXTURE_FORMATS));\r\n  Object.keys(compressedTextureFormats).forEach(function (name) {\r\n    var format = compressedTextureFormats[name];\r\n    if (supportedCompressedFormats.indexOf(format) >= 0) {\r\n      textureFormats[name] = format;\r\n    }\r\n  });\r\n\r\n  var supportedFormats = Object.keys(textureFormats);\r\n  limits.textureFormats = supportedFormats;\r\n\r\n  // associate with every format string its\r\n  // corresponding GL-value.\r\n  var textureFormatsInvert = [];\r\n  Object.keys(textureFormats).forEach(function (key) {\r\n    var val = textureFormats[key];\r\n    textureFormatsInvert[val] = key;\r\n  });\r\n\r\n  // associate with every type string its\r\n  // corresponding GL-value.\r\n  var textureTypesInvert = [];\r\n  Object.keys(textureTypes).forEach(function (key) {\r\n    var val = textureTypes[key];\r\n    textureTypesInvert[val] = key;\r\n  });\r\n\r\n  var magFiltersInvert = [];\r\n  Object.keys(magFilters).forEach(function (key) {\r\n    var val = magFilters[key];\r\n    magFiltersInvert[val] = key;\r\n  });\r\n\r\n  var minFiltersInvert = [];\r\n  Object.keys(minFilters).forEach(function (key) {\r\n    var val = minFilters[key];\r\n    minFiltersInvert[val] = key;\r\n  });\r\n\r\n  var wrapModesInvert = [];\r\n  Object.keys(wrapModes).forEach(function (key) {\r\n    var val = wrapModes[key];\r\n    wrapModesInvert[val] = key;\r\n  });\r\n\r\n  // colorFormats[] gives the format (channels) associated to an\r\n  // internalformat\r\n  var colorFormats = supportedFormats.reduce(function (color, key) {\r\n    var glenum = textureFormats[key];\r\n    if (glenum === GL_LUMINANCE ||\r\n        glenum === GL_ALPHA ||\r\n        glenum === GL_LUMINANCE ||\r\n        glenum === GL_LUMINANCE_ALPHA ||\r\n        glenum === GL_DEPTH_COMPONENT ||\r\n        glenum === GL_DEPTH_STENCIL) {\r\n      color[glenum] = glenum;\r\n    } else if (glenum === GL_RGB5_A1 || key.indexOf('rgba') >= 0) {\r\n      color[glenum] = GL_RGBA$1;\r\n    } else {\r\n      color[glenum] = GL_RGB;\r\n    }\r\n    return color\r\n  }, {});\r\n\r\n  function TexFlags () {\r\n    // format info\r\n    this.internalformat = GL_RGBA$1;\r\n    this.format = GL_RGBA$1;\r\n    this.type = GL_UNSIGNED_BYTE$5;\r\n    this.compressed = false;\r\n\r\n    // pixel storage\r\n    this.premultiplyAlpha = false;\r\n    this.flipY = false;\r\n    this.unpackAlignment = 1;\r\n    this.colorSpace = GL_BROWSER_DEFAULT_WEBGL;\r\n\r\n    // shape info\r\n    this.width = 0;\r\n    this.height = 0;\r\n    this.channels = 0;\r\n  }\r\n\r\n  function copyFlags (result, other) {\r\n    result.internalformat = other.internalformat;\r\n    result.format = other.format;\r\n    result.type = other.type;\r\n    result.compressed = other.compressed;\r\n\r\n    result.premultiplyAlpha = other.premultiplyAlpha;\r\n    result.flipY = other.flipY;\r\n    result.unpackAlignment = other.unpackAlignment;\r\n    result.colorSpace = other.colorSpace;\r\n\r\n    result.width = other.width;\r\n    result.height = other.height;\r\n    result.channels = other.channels;\r\n  }\r\n\r\n  function parseFlags (flags, options) {\r\n    if (typeof options !== 'object' || !options) {\r\n      return\r\n    }\r\n\r\n    if ('premultiplyAlpha' in options) {\r\n      check$1.type(options.premultiplyAlpha, 'boolean',\r\n        'invalid premultiplyAlpha');\r\n      flags.premultiplyAlpha = options.premultiplyAlpha;\r\n    }\r\n\r\n    if ('flipY' in options) {\r\n      check$1.type(options.flipY, 'boolean',\r\n        'invalid texture flip');\r\n      flags.flipY = options.flipY;\r\n    }\r\n\r\n    if ('alignment' in options) {\r\n      check$1.oneOf(options.alignment, [1, 2, 4, 8],\r\n        'invalid texture unpack alignment');\r\n      flags.unpackAlignment = options.alignment;\r\n    }\r\n\r\n    if ('colorSpace' in options) {\r\n      check$1.parameter(options.colorSpace, colorSpace,\r\n        'invalid colorSpace');\r\n      flags.colorSpace = colorSpace[options.colorSpace];\r\n    }\r\n\r\n    if ('type' in options) {\r\n      var type = options.type;\r\n      check$1(extensions.oes_texture_float ||\r\n        !(type === 'float' || type === 'float32'),\r\n        'you must enable the OES_texture_float extension in order to use floating point textures.');\r\n      check$1(extensions.oes_texture_half_float ||\r\n        !(type === 'half float' || type === 'float16'),\r\n        'you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures.');\r\n      check$1(extensions.webgl_depth_texture ||\r\n        !(type === 'uint16' || type === 'uint32' || type === 'depth stencil'),\r\n        'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.');\r\n      check$1.parameter(type, textureTypes,\r\n        'invalid texture type');\r\n      flags.type = textureTypes[type];\r\n    }\r\n\r\n    var w = flags.width;\r\n    var h = flags.height;\r\n    var c = flags.channels;\r\n    var hasChannels = false;\r\n    if ('shape' in options) {\r\n      check$1(Array.isArray(options.shape) && options.shape.length >= 2,\r\n        'shape must be an array');\r\n      w = options.shape[0];\r\n      h = options.shape[1];\r\n      if (options.shape.length === 3) {\r\n        c = options.shape[2];\r\n        check$1(c > 0 && c <= 4, 'invalid number of channels');\r\n        hasChannels = true;\r\n      }\r\n      check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid width');\r\n      check$1(h >= 0 && h <= limits.maxTextureSize, 'invalid height');\r\n    } else {\r\n      if ('radius' in options) {\r\n        w = h = options.radius;\r\n        check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid radius');\r\n      }\r\n      if ('width' in options) {\r\n        w = options.width;\r\n        check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid width');\r\n      }\r\n      if ('height' in options) {\r\n        h = options.height;\r\n        check$1(h >= 0 && h <= limits.maxTextureSize, 'invalid height');\r\n      }\r\n      if ('channels' in options) {\r\n        c = options.channels;\r\n        check$1(c > 0 && c <= 4, 'invalid number of channels');\r\n        hasChannels = true;\r\n      }\r\n    }\r\n    flags.width = w | 0;\r\n    flags.height = h | 0;\r\n    flags.channels = c | 0;\r\n\r\n    var hasFormat = false;\r\n    if ('format' in options) {\r\n      var formatStr = options.format;\r\n      check$1(extensions.webgl_depth_texture ||\r\n        !(formatStr === 'depth' || formatStr === 'depth stencil'),\r\n        'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.');\r\n      check$1.parameter(formatStr, textureFormats,\r\n        'invalid texture format');\r\n      var internalformat = flags.internalformat = textureFormats[formatStr];\r\n      flags.format = colorFormats[internalformat];\r\n      if (formatStr in textureTypes) {\r\n        if (!('type' in options)) {\r\n          flags.type = textureTypes[formatStr];\r\n        }\r\n      }\r\n      if (formatStr in compressedTextureFormats) {\r\n        flags.compressed = true;\r\n      }\r\n      hasFormat = true;\r\n    }\r\n\r\n    // Reconcile channels and format\r\n    if (!hasChannels && hasFormat) {\r\n      flags.channels = FORMAT_CHANNELS[flags.format];\r\n    } else if (hasChannels && !hasFormat) {\r\n      if (flags.channels !== CHANNELS_FORMAT[flags.format]) {\r\n        flags.format = flags.internalformat = CHANNELS_FORMAT[flags.channels];\r\n      }\r\n    } else if (hasFormat && hasChannels) {\r\n      check$1(\r\n        flags.channels === FORMAT_CHANNELS[flags.format],\r\n        'number of channels inconsistent with specified format');\r\n    }\r\n  }\r\n\r\n  function setFlags (flags) {\r\n    gl.pixelStorei(GL_UNPACK_FLIP_Y_WEBGL, flags.flipY);\r\n    gl.pixelStorei(GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL, flags.premultiplyAlpha);\r\n    gl.pixelStorei(GL_UNPACK_COLORSPACE_CONVERSION_WEBGL, flags.colorSpace);\r\n    gl.pixelStorei(GL_UNPACK_ALIGNMENT, flags.unpackAlignment);\r\n  }\r\n\r\n  // -------------------------------------------------------\r\n  // Tex image data\r\n  // -------------------------------------------------------\r\n  function TexImage () {\r\n    TexFlags.call(this);\r\n\r\n    this.xOffset = 0;\r\n    this.yOffset = 0;\r\n\r\n    // data\r\n    this.data = null;\r\n    this.needsFree = false;\r\n\r\n    // html element\r\n    this.element = null;\r\n\r\n    // copyTexImage info\r\n    this.needsCopy = false;\r\n  }\r\n\r\n  function parseImage (image, options) {\r\n    var data = null;\r\n    if (isPixelData(options)) {\r\n      data = options;\r\n    } else if (options) {\r\n      check$1.type(options, 'object', 'invalid pixel data type');\r\n      parseFlags(image, options);\r\n      if ('x' in options) {\r\n        image.xOffset = options.x | 0;\r\n      }\r\n      if ('y' in options) {\r\n        image.yOffset = options.y | 0;\r\n      }\r\n      if (isPixelData(options.data)) {\r\n        data = options.data;\r\n      }\r\n    }\r\n\r\n    check$1(\r\n      !image.compressed ||\r\n      data instanceof Uint8Array,\r\n      'compressed texture data must be stored in a uint8array');\r\n\r\n    if (options.copy) {\r\n      check$1(!data, 'can not specify copy and data field for the same texture');\r\n      var viewW = contextState.viewportWidth;\r\n      var viewH = contextState.viewportHeight;\r\n      image.width = image.width || (viewW - image.xOffset);\r\n      image.height = image.height || (viewH - image.yOffset);\r\n      image.needsCopy = true;\r\n      check$1(image.xOffset >= 0 && image.xOffset < viewW &&\r\n            image.yOffset >= 0 && image.yOffset < viewH &&\r\n            image.width > 0 && image.width <= viewW &&\r\n            image.height > 0 && image.height <= viewH,\r\n            'copy texture read out of bounds');\r\n    } else if (!data) {\r\n      image.width = image.width || 1;\r\n      image.height = image.height || 1;\r\n      image.channels = image.channels || 4;\r\n    } else if (isTypedArray(data)) {\r\n      image.channels = image.channels || 4;\r\n      image.data = data;\r\n      if (!('type' in options) && image.type === GL_UNSIGNED_BYTE$5) {\r\n        image.type = typedArrayCode$1(data);\r\n      }\r\n    } else if (isNumericArray(data)) {\r\n      image.channels = image.channels || 4;\r\n      convertData(image, data);\r\n      image.alignment = 1;\r\n      image.needsFree = true;\r\n    } else if (isNDArrayLike(data)) {\r\n      var array = data.data;\r\n      if (!Array.isArray(array) && image.type === GL_UNSIGNED_BYTE$5) {\r\n        image.type = typedArrayCode$1(array);\r\n      }\r\n      var shape = data.shape;\r\n      var stride = data.stride;\r\n      var shapeX, shapeY, shapeC, strideX, strideY, strideC;\r\n      if (shape.length === 3) {\r\n        shapeC = shape[2];\r\n        strideC = stride[2];\r\n      } else {\r\n        check$1(shape.length === 2, 'invalid ndarray pixel data, must be 2 or 3D');\r\n        shapeC = 1;\r\n        strideC = 1;\r\n      }\r\n      shapeX = shape[0];\r\n      shapeY = shape[1];\r\n      strideX = stride[0];\r\n      strideY = stride[1];\r\n      image.alignment = 1;\r\n      image.width = shapeX;\r\n      image.height = shapeY;\r\n      image.channels = shapeC;\r\n      image.format = image.internalformat = CHANNELS_FORMAT[shapeC];\r\n      image.needsFree = true;\r\n      transposeData(image, array, strideX, strideY, strideC, data.offset);\r\n    } else if (isCanvasElement(data) || isContext2D(data)) {\r\n      if (isCanvasElement(data)) {\r\n        image.element = data;\r\n      } else {\r\n        image.element = data.canvas;\r\n      }\r\n      image.width = image.element.width;\r\n      image.height = image.element.height;\r\n      image.channels = 4;\r\n    } else if (isBitmap(data)) {\r\n      image.element = data;\r\n      image.width = data.width;\r\n      image.height = data.height;\r\n      image.channels = 4;\r\n    } else if (isImageElement(data)) {\r\n      image.element = data;\r\n      image.width = data.naturalWidth;\r\n      image.height = data.naturalHeight;\r\n      image.channels = 4;\r\n    } else if (isVideoElement(data)) {\r\n      image.element = data;\r\n      image.width = data.videoWidth;\r\n      image.height = data.videoHeight;\r\n      image.channels = 4;\r\n    } else if (isRectArray(data)) {\r\n      var w = image.width || data[0].length;\r\n      var h = image.height || data.length;\r\n      var c = image.channels;\r\n      if (isArrayLike(data[0][0])) {\r\n        c = c || data[0][0].length;\r\n      } else {\r\n        c = c || 1;\r\n      }\r\n      var arrayShape = flattenUtils.shape(data);\r\n      var n = 1;\r\n      for (var dd = 0; dd < arrayShape.length; ++dd) {\r\n        n *= arrayShape[dd];\r\n      }\r\n      var allocData = preConvert(image, n);\r\n      flattenUtils.flatten(data, arrayShape, '', allocData);\r\n      postConvert(image, allocData);\r\n      image.alignment = 1;\r\n      image.width = w;\r\n      image.height = h;\r\n      image.channels = c;\r\n      image.format = image.internalformat = CHANNELS_FORMAT[c];\r\n      image.needsFree = true;\r\n    }\r\n\r\n    if (image.type === GL_FLOAT$4) {\r\n      check$1(limits.extensions.indexOf('oes_texture_float') >= 0,\r\n        'oes_texture_float extension not enabled');\r\n    } else if (image.type === GL_HALF_FLOAT_OES$1) {\r\n      check$1(limits.extensions.indexOf('oes_texture_half_float') >= 0,\r\n        'oes_texture_half_float extension not enabled');\r\n    }\r\n\r\n    // do compressed texture  validation here.\r\n  }\r\n\r\n  function setImage (info, target, miplevel) {\r\n    var element = info.element;\r\n    var data = info.data;\r\n    var internalformat = info.internalformat;\r\n    var format = info.format;\r\n    var type = info.type;\r\n    var width = info.width;\r\n    var height = info.height;\r\n    var channels = info.channels;\r\n\r\n    setFlags(info);\r\n\r\n    if (element) {\r\n      gl.texImage2D(target, miplevel, format, format, type, element);\r\n    } else if (info.compressed) {\r\n      gl.compressedTexImage2D(target, miplevel, internalformat, width, height, 0, data);\r\n    } else if (info.needsCopy) {\r\n      reglPoll();\r\n      gl.copyTexImage2D(\r\n        target, miplevel, format, info.xOffset, info.yOffset, width, height, 0);\r\n    } else {\r\n      var nullData = !data;\r\n      if (nullData) {\r\n        data = pool.zero.allocType(type, width * height * channels);\r\n      }\r\n\r\n      gl.texImage2D(target, miplevel, format, width, height, 0, format, type, data);\r\n\r\n      if (nullData && data) {\r\n        pool.zero.freeType(data);\r\n      }\r\n    }\r\n  }\r\n\r\n  function setSubImage (info, target, x, y, miplevel) {\r\n    var element = info.element;\r\n    var data = info.data;\r\n    var internalformat = info.internalformat;\r\n    var format = info.format;\r\n    var type = info.type;\r\n    var width = info.width;\r\n    var height = info.height;\r\n\r\n    setFlags(info);\r\n\r\n    if (element) {\r\n      gl.texSubImage2D(\r\n        target, miplevel, x, y, format, type, element);\r\n    } else if (info.compressed) {\r\n      gl.compressedTexSubImage2D(\r\n        target, miplevel, x, y, internalformat, width, height, data);\r\n    } else if (info.needsCopy) {\r\n      reglPoll();\r\n      gl.copyTexSubImage2D(\r\n        target, miplevel, x, y, info.xOffset, info.yOffset, width, height);\r\n    } else {\r\n      gl.texSubImage2D(\r\n        target, miplevel, x, y, width, height, format, type, data);\r\n    }\r\n  }\r\n\r\n  // texImage pool\r\n  var imagePool = [];\r\n\r\n  function allocImage () {\r\n    return imagePool.pop() || new TexImage()\r\n  }\r\n\r\n  function freeImage (image) {\r\n    if (image.needsFree) {\r\n      pool.freeType(image.data);\r\n    }\r\n    TexImage.call(image);\r\n    imagePool.push(image);\r\n  }\r\n\r\n  // -------------------------------------------------------\r\n  // Mip map\r\n  // -------------------------------------------------------\r\n  function MipMap () {\r\n    TexFlags.call(this);\r\n\r\n    this.genMipmaps = false;\r\n    this.mipmapHint = GL_DONT_CARE;\r\n    this.mipmask = 0;\r\n    this.images = Array(16);\r\n  }\r\n\r\n  function parseMipMapFromShape (mipmap, width, height) {\r\n    var img = mipmap.images[0] = allocImage();\r\n    mipmap.mipmask = 1;\r\n    img.width = mipmap.width = width;\r\n    img.height = mipmap.height = height;\r\n    img.channels = mipmap.channels = 4;\r\n  }\r\n\r\n  function parseMipMapFromObject (mipmap, options) {\r\n    var imgData = null;\r\n    if (isPixelData(options)) {\r\n      imgData = mipmap.images[0] = allocImage();\r\n      copyFlags(imgData, mipmap);\r\n      parseImage(imgData, options);\r\n      mipmap.mipmask = 1;\r\n    } else {\r\n      parseFlags(mipmap, options);\r\n      if (Array.isArray(options.mipmap)) {\r\n        var mipData = options.mipmap;\r\n        for (var i = 0; i < mipData.length; ++i) {\r\n          imgData = mipmap.images[i] = allocImage();\r\n          copyFlags(imgData, mipmap);\r\n          imgData.width >>= i;\r\n          imgData.height >>= i;\r\n          parseImage(imgData, mipData[i]);\r\n          mipmap.mipmask |= (1 << i);\r\n        }\r\n      } else {\r\n        imgData = mipmap.images[0] = allocImage();\r\n        copyFlags(imgData, mipmap);\r\n        parseImage(imgData, options);\r\n        mipmap.mipmask = 1;\r\n      }\r\n    }\r\n    copyFlags(mipmap, mipmap.images[0]);\r\n\r\n    // For textures of the compressed format WEBGL_compressed_texture_s3tc\r\n    // we must have that\r\n    //\r\n    // \"When level equals zero width and height must be a multiple of 4.\r\n    // When level is greater than 0 width and height must be 0, 1, 2 or a multiple of 4. \"\r\n    //\r\n    // but we do not yet support having multiple mipmap levels for compressed textures,\r\n    // so we only test for level zero.\r\n\r\n    if (mipmap.compressed &&\r\n        (mipmap.internalformat === GL_COMPRESSED_RGB_S3TC_DXT1_EXT) ||\r\n        (mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT1_EXT) ||\r\n        (mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT3_EXT) ||\r\n        (mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT5_EXT)) {\r\n      check$1(mipmap.width % 4 === 0 &&\r\n            mipmap.height % 4 === 0,\r\n            'for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4');\r\n    }\r\n  }\r\n\r\n  function setMipMap (mipmap, target) {\r\n    var images = mipmap.images;\r\n    for (var i = 0; i < images.length; ++i) {\r\n      if (!images[i]) {\r\n        return\r\n      }\r\n      setImage(images[i], target, i);\r\n    }\r\n  }\r\n\r\n  var mipPool = [];\r\n\r\n  function allocMipMap () {\r\n    var result = mipPool.pop() || new MipMap();\r\n    TexFlags.call(result);\r\n    result.mipmask = 0;\r\n    for (var i = 0; i < 16; ++i) {\r\n      result.images[i] = null;\r\n    }\r\n    return result\r\n  }\r\n\r\n  function freeMipMap (mipmap) {\r\n    var images = mipmap.images;\r\n    for (var i = 0; i < images.length; ++i) {\r\n      if (images[i]) {\r\n        freeImage(images[i]);\r\n      }\r\n      images[i] = null;\r\n    }\r\n    mipPool.push(mipmap);\r\n  }\r\n\r\n  // -------------------------------------------------------\r\n  // Tex info\r\n  // -------------------------------------------------------\r\n  function TexInfo () {\r\n    this.minFilter = GL_NEAREST$1;\r\n    this.magFilter = GL_NEAREST$1;\r\n\r\n    this.wrapS = GL_CLAMP_TO_EDGE$1;\r\n    this.wrapT = GL_CLAMP_TO_EDGE$1;\r\n\r\n    this.anisotropic = 1;\r\n\r\n    this.genMipmaps = false;\r\n    this.mipmapHint = GL_DONT_CARE;\r\n  }\r\n\r\n  function parseTexInfo (info, options) {\r\n    if ('min' in options) {\r\n      var minFilter = options.min;\r\n      check$1.parameter(minFilter, minFilters);\r\n      info.minFilter = minFilters[minFilter];\r\n      if (MIPMAP_FILTERS.indexOf(info.minFilter) >= 0 && !('faces' in options)) {\r\n        info.genMipmaps = true;\r\n      }\r\n    }\r\n\r\n    if ('mag' in options) {\r\n      var magFilter = options.mag;\r\n      check$1.parameter(magFilter, magFilters);\r\n      info.magFilter = magFilters[magFilter];\r\n    }\r\n\r\n    var wrapS = info.wrapS;\r\n    var wrapT = info.wrapT;\r\n    if ('wrap' in options) {\r\n      var wrap = options.wrap;\r\n      if (typeof wrap === 'string') {\r\n        check$1.parameter(wrap, wrapModes);\r\n        wrapS = wrapT = wrapModes[wrap];\r\n      } else if (Array.isArray(wrap)) {\r\n        check$1.parameter(wrap[0], wrapModes);\r\n        check$1.parameter(wrap[1], wrapModes);\r\n        wrapS = wrapModes[wrap[0]];\r\n        wrapT = wrapModes[wrap[1]];\r\n      }\r\n    } else {\r\n      if ('wrapS' in options) {\r\n        var optWrapS = options.wrapS;\r\n        check$1.parameter(optWrapS, wrapModes);\r\n        wrapS = wrapModes[optWrapS];\r\n      }\r\n      if ('wrapT' in options) {\r\n        var optWrapT = options.wrapT;\r\n        check$1.parameter(optWrapT, wrapModes);\r\n        wrapT = wrapModes[optWrapT];\r\n      }\r\n    }\r\n    info.wrapS = wrapS;\r\n    info.wrapT = wrapT;\r\n\r\n    if ('anisotropic' in options) {\r\n      var anisotropic = options.anisotropic;\r\n      check$1(typeof anisotropic === 'number' &&\r\n         anisotropic >= 1 && anisotropic <= limits.maxAnisotropic,\r\n        'aniso samples must be between 1 and ');\r\n      info.anisotropic = options.anisotropic;\r\n    }\r\n\r\n    if ('mipmap' in options) {\r\n      var hasMipMap = false;\r\n      switch (typeof options.mipmap) {\r\n        case 'string':\r\n          check$1.parameter(options.mipmap, mipmapHint,\r\n            'invalid mipmap hint');\r\n          info.mipmapHint = mipmapHint[options.mipmap];\r\n          info.genMipmaps = true;\r\n          hasMipMap = true;\r\n          break\r\n\r\n        case 'boolean':\r\n          hasMipMap = info.genMipmaps = options.mipmap;\r\n          break\r\n\r\n        case 'object':\r\n          check$1(Array.isArray(options.mipmap), 'invalid mipmap type');\r\n          info.genMipmaps = false;\r\n          hasMipMap = true;\r\n          break\r\n\r\n        default:\r\n          check$1.raise('invalid mipmap type');\r\n      }\r\n      if (hasMipMap && !('min' in options)) {\r\n        info.minFilter = GL_NEAREST_MIPMAP_NEAREST$1;\r\n      }\r\n    }\r\n  }\r\n\r\n  function setTexInfo (info, target) {\r\n    gl.texParameteri(target, GL_TEXTURE_MIN_FILTER, info.minFilter);\r\n    gl.texParameteri(target, GL_TEXTURE_MAG_FILTER, info.magFilter);\r\n    gl.texParameteri(target, GL_TEXTURE_WRAP_S, info.wrapS);\r\n    gl.texParameteri(target, GL_TEXTURE_WRAP_T, info.wrapT);\r\n    if (extensions.ext_texture_filter_anisotropic) {\r\n      gl.texParameteri(target, GL_TEXTURE_MAX_ANISOTROPY_EXT, info.anisotropic);\r\n    }\r\n    if (info.genMipmaps) {\r\n      gl.hint(GL_GENERATE_MIPMAP_HINT, info.mipmapHint);\r\n      gl.generateMipmap(target);\r\n    }\r\n  }\r\n\r\n  // -------------------------------------------------------\r\n  // Full texture object\r\n  // -------------------------------------------------------\r\n  var textureCount = 0;\r\n  var textureSet = {};\r\n  var numTexUnits = limits.maxTextureUnits;\r\n  var textureUnits = Array(numTexUnits).map(function () {\r\n    return null\r\n  });\r\n\r\n  function REGLTexture (target) {\r\n    TexFlags.call(this);\r\n    this.mipmask = 0;\r\n    this.internalformat = GL_RGBA$1;\r\n\r\n    this.id = textureCount++;\r\n\r\n    this.refCount = 1;\r\n\r\n    this.target = target;\r\n    this.texture = gl.createTexture();\r\n\r\n    this.unit = -1;\r\n    this.bindCount = 0;\r\n\r\n    this.texInfo = new TexInfo();\r\n\r\n    if (config.profile) {\r\n      this.stats = {size: 0};\r\n    }\r\n  }\r\n\r\n  function tempBind (texture) {\r\n    gl.activeTexture(GL_TEXTURE0$1);\r\n    gl.bindTexture(texture.target, texture.texture);\r\n  }\r\n\r\n  function tempRestore () {\r\n    var prev = textureUnits[0];\r\n    if (prev) {\r\n      gl.bindTexture(prev.target, prev.texture);\r\n    } else {\r\n      gl.bindTexture(GL_TEXTURE_2D$1, null);\r\n    }\r\n  }\r\n\r\n  function destroy (texture) {\r\n    var handle = texture.texture;\r\n    check$1(handle, 'must not double destroy texture');\r\n    var unit = texture.unit;\r\n    var target = texture.target;\r\n    if (unit >= 0) {\r\n      gl.activeTexture(GL_TEXTURE0$1 + unit);\r\n      gl.bindTexture(target, null);\r\n      textureUnits[unit] = null;\r\n    }\r\n    gl.deleteTexture(handle);\r\n    texture.texture = null;\r\n    texture.params = null;\r\n    texture.pixels = null;\r\n    texture.refCount = 0;\r\n    delete textureSet[texture.id];\r\n    stats.textureCount--;\r\n  }\r\n\r\n  extend(REGLTexture.prototype, {\r\n    bind: function () {\r\n      var texture = this;\r\n      texture.bindCount += 1;\r\n      var unit = texture.unit;\r\n      if (unit < 0) {\r\n        for (var i = 0; i < numTexUnits; ++i) {\r\n          var other = textureUnits[i];\r\n          if (other) {\r\n            if (other.bindCount > 0) {\r\n              continue\r\n            }\r\n            other.unit = -1;\r\n          }\r\n          textureUnits[i] = texture;\r\n          unit = i;\r\n          break\r\n        }\r\n        if (unit >= numTexUnits) {\r\n          check$1.raise('insufficient number of texture units');\r\n        }\r\n        if (config.profile && stats.maxTextureUnits < (unit + 1)) {\r\n          stats.maxTextureUnits = unit + 1; // +1, since the units are zero-based\r\n        }\r\n        texture.unit = unit;\r\n        gl.activeTexture(GL_TEXTURE0$1 + unit);\r\n        gl.bindTexture(texture.target, texture.texture);\r\n      }\r\n      return unit\r\n    },\r\n\r\n    unbind: function () {\r\n      this.bindCount -= 1;\r\n    },\r\n\r\n    decRef: function () {\r\n      if (--this.refCount <= 0) {\r\n        destroy(this);\r\n      }\r\n    }\r\n  });\r\n\r\n  function createTexture2D (a, b) {\r\n    var texture = new REGLTexture(GL_TEXTURE_2D$1);\r\n    textureSet[texture.id] = texture;\r\n    stats.textureCount++;\r\n\r\n    function reglTexture2D (a, b) {\r\n      var texInfo = texture.texInfo;\r\n      TexInfo.call(texInfo);\r\n      var mipData = allocMipMap();\r\n\r\n      if (typeof a === 'number') {\r\n        if (typeof b === 'number') {\r\n          parseMipMapFromShape(mipData, a | 0, b | 0);\r\n        } else {\r\n          parseMipMapFromShape(mipData, a | 0, a | 0);\r\n        }\r\n      } else if (a) {\r\n        check$1.type(a, 'object', 'invalid arguments to regl.texture');\r\n        parseTexInfo(texInfo, a);\r\n        parseMipMapFromObject(mipData, a);\r\n      } else {\r\n        // empty textures get assigned a default shape of 1x1\r\n        parseMipMapFromShape(mipData, 1, 1);\r\n      }\r\n\r\n      if (texInfo.genMipmaps) {\r\n        mipData.mipmask = (mipData.width << 1) - 1;\r\n      }\r\n      texture.mipmask = mipData.mipmask;\r\n\r\n      copyFlags(texture, mipData);\r\n\r\n      check$1.texture2D(texInfo, mipData, limits);\r\n      texture.internalformat = mipData.internalformat;\r\n\r\n      reglTexture2D.width = mipData.width;\r\n      reglTexture2D.height = mipData.height;\r\n\r\n      tempBind(texture);\r\n      setMipMap(mipData, GL_TEXTURE_2D$1);\r\n      setTexInfo(texInfo, GL_TEXTURE_2D$1);\r\n      tempRestore();\r\n\r\n      freeMipMap(mipData);\r\n\r\n      if (config.profile) {\r\n        texture.stats.size = getTextureSize(\r\n          texture.internalformat,\r\n          texture.type,\r\n          mipData.width,\r\n          mipData.height,\r\n          texInfo.genMipmaps,\r\n          false);\r\n      }\r\n      reglTexture2D.format = textureFormatsInvert[texture.internalformat];\r\n      reglTexture2D.type = textureTypesInvert[texture.type];\r\n\r\n      reglTexture2D.mag = magFiltersInvert[texInfo.magFilter];\r\n      reglTexture2D.min = minFiltersInvert[texInfo.minFilter];\r\n\r\n      reglTexture2D.wrapS = wrapModesInvert[texInfo.wrapS];\r\n      reglTexture2D.wrapT = wrapModesInvert[texInfo.wrapT];\r\n\r\n      return reglTexture2D\r\n    }\r\n\r\n    function subimage (image, x_, y_, level_) {\r\n      check$1(!!image, 'must specify image data');\r\n\r\n      var x = x_ | 0;\r\n      var y = y_ | 0;\r\n      var level = level_ | 0;\r\n\r\n      var imageData = allocImage();\r\n      copyFlags(imageData, texture);\r\n      imageData.width = 0;\r\n      imageData.height = 0;\r\n      parseImage(imageData, image);\r\n      imageData.width = imageData.width || ((texture.width >> level) - x);\r\n      imageData.height = imageData.height || ((texture.height >> level) - y);\r\n\r\n      check$1(\r\n        texture.type === imageData.type &&\r\n        texture.format === imageData.format &&\r\n        texture.internalformat === imageData.internalformat,\r\n        'incompatible format for texture.subimage');\r\n      check$1(\r\n        x >= 0 && y >= 0 &&\r\n        x + imageData.width <= texture.width &&\r\n        y + imageData.height <= texture.height,\r\n        'texture.subimage write out of bounds');\r\n      check$1(\r\n        texture.mipmask & (1 << level),\r\n        'missing mipmap data');\r\n      check$1(\r\n        imageData.data || imageData.element || imageData.needsCopy,\r\n        'missing image data');\r\n\r\n      tempBind(texture);\r\n      setSubImage(imageData, GL_TEXTURE_2D$1, x, y, level);\r\n      tempRestore();\r\n\r\n      freeImage(imageData);\r\n\r\n      return reglTexture2D\r\n    }\r\n\r\n    function resize (w_, h_) {\r\n      var w = w_ | 0;\r\n      var h = (h_ | 0) || w;\r\n      if (w === texture.width && h === texture.height) {\r\n        return reglTexture2D\r\n      }\r\n\r\n      reglTexture2D.width = texture.width = w;\r\n      reglTexture2D.height = texture.height = h;\r\n\r\n      tempBind(texture);\r\n\r\n      var data;\r\n      var channels = texture.channels;\r\n      var type = texture.type;\r\n\r\n      for (var i = 0; texture.mipmask >> i; ++i) {\r\n        var _w = w >> i;\r\n        var _h = h >> i;\r\n        if (!_w || !_h) break\r\n        data = pool.zero.allocType(type, _w * _h * channels);\r\n        gl.texImage2D(\r\n          GL_TEXTURE_2D$1,\r\n          i,\r\n          texture.format,\r\n          _w,\r\n          _h,\r\n          0,\r\n          texture.format,\r\n          texture.type,\r\n          data);\r\n        if (data) pool.zero.freeType(data);\r\n      }\r\n      tempRestore();\r\n\r\n      // also, recompute the texture size.\r\n      if (config.profile) {\r\n        texture.stats.size = getTextureSize(\r\n          texture.internalformat,\r\n          texture.type,\r\n          w,\r\n          h,\r\n          false,\r\n          false);\r\n      }\r\n\r\n      return reglTexture2D\r\n    }\r\n\r\n    reglTexture2D(a, b);\r\n\r\n    reglTexture2D.subimage = subimage;\r\n    reglTexture2D.resize = resize;\r\n    reglTexture2D._reglType = 'texture2d';\r\n    reglTexture2D._texture = texture;\r\n    if (config.profile) {\r\n      reglTexture2D.stats = texture.stats;\r\n    }\r\n    reglTexture2D.destroy = function () {\r\n      texture.decRef();\r\n    };\r\n\r\n    return reglTexture2D\r\n  }\r\n\r\n  function createTextureCube (a0, a1, a2, a3, a4, a5) {\r\n    var texture = new REGLTexture(GL_TEXTURE_CUBE_MAP$1);\r\n    textureSet[texture.id] = texture;\r\n    stats.cubeCount++;\r\n\r\n    var faces = new Array(6);\r\n\r\n    function reglTextureCube (a0, a1, a2, a3, a4, a5) {\r\n      var i;\r\n      var texInfo = texture.texInfo;\r\n      TexInfo.call(texInfo);\r\n      for (i = 0; i < 6; ++i) {\r\n        faces[i] = allocMipMap();\r\n      }\r\n\r\n      if (typeof a0 === 'number' || !a0) {\r\n        var s = (a0 | 0) || 1;\r\n        for (i = 0; i < 6; ++i) {\r\n          parseMipMapFromShape(faces[i], s, s);\r\n        }\r\n      } else if (typeof a0 === 'object') {\r\n        if (a1) {\r\n          parseMipMapFromObject(faces[0], a0);\r\n          parseMipMapFromObject(faces[1], a1);\r\n          parseMipMapFromObject(faces[2], a2);\r\n          parseMipMapFromObject(faces[3], a3);\r\n          parseMipMapFromObject(faces[4], a4);\r\n          parseMipMapFromObject(faces[5], a5);\r\n        } else {\r\n          parseTexInfo(texInfo, a0);\r\n          parseFlags(texture, a0);\r\n          if ('faces' in a0) {\r\n            var face_input = a0.faces;\r\n            check$1(Array.isArray(face_input) && face_input.length === 6,\r\n              'cube faces must be a length 6 array');\r\n            for (i = 0; i < 6; ++i) {\r\n              check$1(typeof face_input[i] === 'object' && !!face_input[i],\r\n                'invalid input for cube map face');\r\n              copyFlags(faces[i], texture);\r\n              parseMipMapFromObject(faces[i], face_input[i]);\r\n            }\r\n          } else {\r\n            for (i = 0; i < 6; ++i) {\r\n              parseMipMapFromObject(faces[i], a0);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        check$1.raise('invalid arguments to cube map');\r\n      }\r\n\r\n      copyFlags(texture, faces[0]);\r\n\r\n      if (!limits.npotTextureCube) {\r\n        check$1(isPow2$1(texture.width) && isPow2$1(texture.height), 'your browser does not support non power or two texture dimensions');\r\n      }\r\n\r\n      if (texInfo.genMipmaps) {\r\n        texture.mipmask = (faces[0].width << 1) - 1;\r\n      } else {\r\n        texture.mipmask = faces[0].mipmask;\r\n      }\r\n\r\n      check$1.textureCube(texture, texInfo, faces, limits);\r\n      texture.internalformat = faces[0].internalformat;\r\n\r\n      reglTextureCube.width = faces[0].width;\r\n      reglTextureCube.height = faces[0].height;\r\n\r\n      tempBind(texture);\r\n      for (i = 0; i < 6; ++i) {\r\n        setMipMap(faces[i], GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i);\r\n      }\r\n      setTexInfo(texInfo, GL_TEXTURE_CUBE_MAP$1);\r\n      tempRestore();\r\n\r\n      if (config.profile) {\r\n        texture.stats.size = getTextureSize(\r\n          texture.internalformat,\r\n          texture.type,\r\n          reglTextureCube.width,\r\n          reglTextureCube.height,\r\n          texInfo.genMipmaps,\r\n          true);\r\n      }\r\n\r\n      reglTextureCube.format = textureFormatsInvert[texture.internalformat];\r\n      reglTextureCube.type = textureTypesInvert[texture.type];\r\n\r\n      reglTextureCube.mag = magFiltersInvert[texInfo.magFilter];\r\n      reglTextureCube.min = minFiltersInvert[texInfo.minFilter];\r\n\r\n      reglTextureCube.wrapS = wrapModesInvert[texInfo.wrapS];\r\n      reglTextureCube.wrapT = wrapModesInvert[texInfo.wrapT];\r\n\r\n      for (i = 0; i < 6; ++i) {\r\n        freeMipMap(faces[i]);\r\n      }\r\n\r\n      return reglTextureCube\r\n    }\r\n\r\n    function subimage (face, image, x_, y_, level_) {\r\n      check$1(!!image, 'must specify image data');\r\n      check$1(typeof face === 'number' && face === (face | 0) &&\r\n        face >= 0 && face < 6, 'invalid face');\r\n\r\n      var x = x_ | 0;\r\n      var y = y_ | 0;\r\n      var level = level_ | 0;\r\n\r\n      var imageData = allocImage();\r\n      copyFlags(imageData, texture);\r\n      imageData.width = 0;\r\n      imageData.height = 0;\r\n      parseImage(imageData, image);\r\n      imageData.width = imageData.width || ((texture.width >> level) - x);\r\n      imageData.height = imageData.height || ((texture.height >> level) - y);\r\n\r\n      check$1(\r\n        texture.type === imageData.type &&\r\n        texture.format === imageData.format &&\r\n        texture.internalformat === imageData.internalformat,\r\n        'incompatible format for texture.subimage');\r\n      check$1(\r\n        x >= 0 && y >= 0 &&\r\n        x + imageData.width <= texture.width &&\r\n        y + imageData.height <= texture.height,\r\n        'texture.subimage write out of bounds');\r\n      check$1(\r\n        texture.mipmask & (1 << level),\r\n        'missing mipmap data');\r\n      check$1(\r\n        imageData.data || imageData.element || imageData.needsCopy,\r\n        'missing image data');\r\n\r\n      tempBind(texture);\r\n      setSubImage(imageData, GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + face, x, y, level);\r\n      tempRestore();\r\n\r\n      freeImage(imageData);\r\n\r\n      return reglTextureCube\r\n    }\r\n\r\n    function resize (radius_) {\r\n      var radius = radius_ | 0;\r\n      if (radius === texture.width) {\r\n        return\r\n      }\r\n\r\n      reglTextureCube.width = texture.width = radius;\r\n      reglTextureCube.height = texture.height = radius;\r\n\r\n      tempBind(texture);\r\n      for (var i = 0; i < 6; ++i) {\r\n        for (var j = 0; texture.mipmask >> j; ++j) {\r\n          gl.texImage2D(\r\n            GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i,\r\n            j,\r\n            texture.format,\r\n            radius >> j,\r\n            radius >> j,\r\n            0,\r\n            texture.format,\r\n            texture.type,\r\n            null);\r\n        }\r\n      }\r\n      tempRestore();\r\n\r\n      if (config.profile) {\r\n        texture.stats.size = getTextureSize(\r\n          texture.internalformat,\r\n          texture.type,\r\n          reglTextureCube.width,\r\n          reglTextureCube.height,\r\n          false,\r\n          true);\r\n      }\r\n\r\n      return reglTextureCube\r\n    }\r\n\r\n    reglTextureCube(a0, a1, a2, a3, a4, a5);\r\n\r\n    reglTextureCube.subimage = subimage;\r\n    reglTextureCube.resize = resize;\r\n    reglTextureCube._reglType = 'textureCube';\r\n    reglTextureCube._texture = texture;\r\n    if (config.profile) {\r\n      reglTextureCube.stats = texture.stats;\r\n    }\r\n    reglTextureCube.destroy = function () {\r\n      texture.decRef();\r\n    };\r\n\r\n    return reglTextureCube\r\n  }\r\n\r\n  // Called when regl is destroyed\r\n  function destroyTextures () {\r\n    for (var i = 0; i < numTexUnits; ++i) {\r\n      gl.activeTexture(GL_TEXTURE0$1 + i);\r\n      gl.bindTexture(GL_TEXTURE_2D$1, null);\r\n      textureUnits[i] = null;\r\n    }\r\n    values(textureSet).forEach(destroy);\r\n\r\n    stats.cubeCount = 0;\r\n    stats.textureCount = 0;\r\n  }\r\n\r\n  if (config.profile) {\r\n    stats.getTotalTextureSize = function () {\r\n      var total = 0;\r\n      Object.keys(textureSet).forEach(function (key) {\r\n        total += textureSet[key].stats.size;\r\n      });\r\n      return total\r\n    };\r\n  }\r\n\r\n  function restoreTextures () {\r\n    for (var i = 0; i < numTexUnits; ++i) {\r\n      var tex = textureUnits[i];\r\n      if (tex) {\r\n        tex.bindCount = 0;\r\n        tex.unit = -1;\r\n        textureUnits[i] = null;\r\n      }\r\n    }\r\n\r\n    values(textureSet).forEach(function (texture) {\r\n      texture.texture = gl.createTexture();\r\n      gl.bindTexture(texture.target, texture.texture);\r\n      for (var i = 0; i < 32; ++i) {\r\n        if ((texture.mipmask & (1 << i)) === 0) {\r\n          continue\r\n        }\r\n        if (texture.target === GL_TEXTURE_2D$1) {\r\n          gl.texImage2D(GL_TEXTURE_2D$1,\r\n            i,\r\n            texture.internalformat,\r\n            texture.width >> i,\r\n            texture.height >> i,\r\n            0,\r\n            texture.internalformat,\r\n            texture.type,\r\n            null);\r\n        } else {\r\n          for (var j = 0; j < 6; ++j) {\r\n            gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + j,\r\n              i,\r\n              texture.internalformat,\r\n              texture.width >> i,\r\n              texture.height >> i,\r\n              0,\r\n              texture.internalformat,\r\n              texture.type,\r\n              null);\r\n          }\r\n        }\r\n      }\r\n      setTexInfo(texture.texInfo, texture.target);\r\n    });\r\n  }\r\n\r\n  return {\r\n    create2D: createTexture2D,\r\n    createCube: createTextureCube,\r\n    clear: destroyTextures,\r\n    getTexture: function (wrapper) {\r\n      return null\r\n    },\r\n    restore: restoreTextures\r\n  }\r\n}\n\nvar GL_RENDERBUFFER = 0x8D41;\r\n\r\nvar GL_RGBA4$1 = 0x8056;\r\nvar GL_RGB5_A1$1 = 0x8057;\r\nvar GL_RGB565$1 = 0x8D62;\r\nvar GL_DEPTH_COMPONENT16 = 0x81A5;\r\nvar GL_STENCIL_INDEX8 = 0x8D48;\r\nvar GL_DEPTH_STENCIL$1 = 0x84F9;\r\n\r\nvar GL_SRGB8_ALPHA8_EXT = 0x8C43;\r\n\r\nvar GL_RGBA32F_EXT = 0x8814;\r\n\r\nvar GL_RGBA16F_EXT = 0x881A;\r\nvar GL_RGB16F_EXT = 0x881B;\r\n\r\nvar FORMAT_SIZES = [];\r\n\r\nFORMAT_SIZES[GL_RGBA4$1] = 2;\r\nFORMAT_SIZES[GL_RGB5_A1$1] = 2;\r\nFORMAT_SIZES[GL_RGB565$1] = 2;\r\n\r\nFORMAT_SIZES[GL_DEPTH_COMPONENT16] = 2;\r\nFORMAT_SIZES[GL_STENCIL_INDEX8] = 1;\r\nFORMAT_SIZES[GL_DEPTH_STENCIL$1] = 4;\r\n\r\nFORMAT_SIZES[GL_SRGB8_ALPHA8_EXT] = 4;\r\nFORMAT_SIZES[GL_RGBA32F_EXT] = 16;\r\nFORMAT_SIZES[GL_RGBA16F_EXT] = 8;\r\nFORMAT_SIZES[GL_RGB16F_EXT] = 6;\r\n\r\nfunction getRenderbufferSize (format, width, height) {\r\n  return FORMAT_SIZES[format] * width * height\r\n}\r\n\r\nvar wrapRenderbuffers = function (gl, extensions, limits, stats, config) {\r\n  var formatTypes = {\r\n    'rgba4': GL_RGBA4$1,\r\n    'rgb565': GL_RGB565$1,\r\n    'rgb5 a1': GL_RGB5_A1$1,\r\n    'depth': GL_DEPTH_COMPONENT16,\r\n    'stencil': GL_STENCIL_INDEX8,\r\n    'depth stencil': GL_DEPTH_STENCIL$1\r\n  };\r\n\r\n  if (extensions.ext_srgb) {\r\n    formatTypes['srgba'] = GL_SRGB8_ALPHA8_EXT;\r\n  }\r\n\r\n  if (extensions.ext_color_buffer_half_float) {\r\n    formatTypes['rgba16f'] = GL_RGBA16F_EXT;\r\n    formatTypes['rgb16f'] = GL_RGB16F_EXT;\r\n  }\r\n\r\n  if (extensions.webgl_color_buffer_float) {\r\n    formatTypes['rgba32f'] = GL_RGBA32F_EXT;\r\n  }\r\n\r\n  var formatTypesInvert = [];\r\n  Object.keys(formatTypes).forEach(function (key) {\r\n    var val = formatTypes[key];\r\n    formatTypesInvert[val] = key;\r\n  });\r\n\r\n  var renderbufferCount = 0;\r\n  var renderbufferSet = {};\r\n\r\n  function REGLRenderbuffer (renderbuffer) {\r\n    this.id = renderbufferCount++;\r\n    this.refCount = 1;\r\n\r\n    this.renderbuffer = renderbuffer;\r\n\r\n    this.format = GL_RGBA4$1;\r\n    this.width = 0;\r\n    this.height = 0;\r\n\r\n    if (config.profile) {\r\n      this.stats = {size: 0};\r\n    }\r\n  }\r\n\r\n  REGLRenderbuffer.prototype.decRef = function () {\r\n    if (--this.refCount <= 0) {\r\n      destroy(this);\r\n    }\r\n  };\r\n\r\n  function destroy (rb) {\r\n    var handle = rb.renderbuffer;\r\n    check$1(handle, 'must not double destroy renderbuffer');\r\n    gl.bindRenderbuffer(GL_RENDERBUFFER, null);\r\n    gl.deleteRenderbuffer(handle);\r\n    rb.renderbuffer = null;\r\n    rb.refCount = 0;\r\n    delete renderbufferSet[rb.id];\r\n    stats.renderbufferCount--;\r\n  }\r\n\r\n  function createRenderbuffer (a, b) {\r\n    var renderbuffer = new REGLRenderbuffer(gl.createRenderbuffer());\r\n    renderbufferSet[renderbuffer.id] = renderbuffer;\r\n    stats.renderbufferCount++;\r\n\r\n    function reglRenderbuffer (a, b) {\r\n      var w = 0;\r\n      var h = 0;\r\n      var format = GL_RGBA4$1;\r\n\r\n      if (typeof a === 'object' && a) {\r\n        var options = a;\r\n        if ('shape' in options) {\r\n          var shape = options.shape;\r\n          check$1(Array.isArray(shape) && shape.length >= 2,\r\n            'invalid renderbuffer shape');\r\n          w = shape[0] | 0;\r\n          h = shape[1] | 0;\r\n        } else {\r\n          if ('radius' in options) {\r\n            w = h = options.radius | 0;\r\n          }\r\n          if ('width' in options) {\r\n            w = options.width | 0;\r\n          }\r\n          if ('height' in options) {\r\n            h = options.height | 0;\r\n          }\r\n        }\r\n        if ('format' in options) {\r\n          check$1.parameter(options.format, formatTypes,\r\n            'invalid renderbuffer format');\r\n          format = formatTypes[options.format];\r\n        }\r\n      } else if (typeof a === 'number') {\r\n        w = a | 0;\r\n        if (typeof b === 'number') {\r\n          h = b | 0;\r\n        } else {\r\n          h = w;\r\n        }\r\n      } else if (!a) {\r\n        w = h = 1;\r\n      } else {\r\n        check$1.raise('invalid arguments to renderbuffer constructor');\r\n      }\r\n\r\n      // check shape\r\n      check$1(\r\n        w > 0 && h > 0 &&\r\n        w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize,\r\n        'invalid renderbuffer size');\r\n\r\n      if (w === renderbuffer.width &&\r\n          h === renderbuffer.height &&\r\n          format === renderbuffer.format) {\r\n        return\r\n      }\r\n\r\n      reglRenderbuffer.width = renderbuffer.width = w;\r\n      reglRenderbuffer.height = renderbuffer.height = h;\r\n      renderbuffer.format = format;\r\n\r\n      gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);\r\n      gl.renderbufferStorage(GL_RENDERBUFFER, format, w, h);\r\n\r\n      check$1(\r\n        gl.getError() === 0,\r\n        'invalid render buffer format');\r\n\r\n      if (config.profile) {\r\n        renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);\r\n      }\r\n      reglRenderbuffer.format = formatTypesInvert[renderbuffer.format];\r\n\r\n      return reglRenderbuffer\r\n    }\r\n\r\n    function resize (w_, h_) {\r\n      var w = w_ | 0;\r\n      var h = (h_ | 0) || w;\r\n\r\n      if (w === renderbuffer.width && h === renderbuffer.height) {\r\n        return reglRenderbuffer\r\n      }\r\n\r\n      // check shape\r\n      check$1(\r\n        w > 0 && h > 0 &&\r\n        w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize,\r\n        'invalid renderbuffer size');\r\n\r\n      reglRenderbuffer.width = renderbuffer.width = w;\r\n      reglRenderbuffer.height = renderbuffer.height = h;\r\n\r\n      gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);\r\n      gl.renderbufferStorage(GL_RENDERBUFFER, renderbuffer.format, w, h);\r\n\r\n      check$1(\r\n        gl.getError() === 0,\r\n        'invalid render buffer format');\r\n\r\n      // also, recompute size.\r\n      if (config.profile) {\r\n        renderbuffer.stats.size = getRenderbufferSize(\r\n          renderbuffer.format, renderbuffer.width, renderbuffer.height);\r\n      }\r\n\r\n      return reglRenderbuffer\r\n    }\r\n\r\n    reglRenderbuffer(a, b);\r\n\r\n    reglRenderbuffer.resize = resize;\r\n    reglRenderbuffer._reglType = 'renderbuffer';\r\n    reglRenderbuffer._renderbuffer = renderbuffer;\r\n    if (config.profile) {\r\n      reglRenderbuffer.stats = renderbuffer.stats;\r\n    }\r\n    reglRenderbuffer.destroy = function () {\r\n      renderbuffer.decRef();\r\n    };\r\n\r\n    return reglRenderbuffer\r\n  }\r\n\r\n  if (config.profile) {\r\n    stats.getTotalRenderbufferSize = function () {\r\n      var total = 0;\r\n      Object.keys(renderbufferSet).forEach(function (key) {\r\n        total += renderbufferSet[key].stats.size;\r\n      });\r\n      return total\r\n    };\r\n  }\r\n\r\n  function restoreRenderbuffers () {\r\n    values(renderbufferSet).forEach(function (rb) {\r\n      rb.renderbuffer = gl.createRenderbuffer();\r\n      gl.bindRenderbuffer(GL_RENDERBUFFER, rb.renderbuffer);\r\n      gl.renderbufferStorage(GL_RENDERBUFFER, rb.format, rb.width, rb.height);\r\n    });\r\n    gl.bindRenderbuffer(GL_RENDERBUFFER, null);\r\n  }\r\n\r\n  return {\r\n    create: createRenderbuffer,\r\n    clear: function () {\r\n      values(renderbufferSet).forEach(destroy);\r\n    },\r\n    restore: restoreRenderbuffers\r\n  }\r\n};\n\n// We store these constants so that the minifier can inline them\r\nvar GL_FRAMEBUFFER$1 = 0x8D40;\r\nvar GL_RENDERBUFFER$1 = 0x8D41;\r\n\r\nvar GL_TEXTURE_2D$2 = 0x0DE1;\r\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 = 0x8515;\r\n\r\nvar GL_COLOR_ATTACHMENT0$1 = 0x8CE0;\r\nvar GL_DEPTH_ATTACHMENT = 0x8D00;\r\nvar GL_STENCIL_ATTACHMENT = 0x8D20;\r\nvar GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;\r\n\r\nvar GL_FRAMEBUFFER_COMPLETE$1 = 0x8CD5;\r\nvar GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;\r\nvar GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;\r\nvar GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;\r\nvar GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;\r\n\r\nvar GL_HALF_FLOAT_OES$2 = 0x8D61;\r\nvar GL_UNSIGNED_BYTE$6 = 0x1401;\r\nvar GL_FLOAT$5 = 0x1406;\r\n\r\nvar GL_RGB$1 = 0x1907;\r\nvar GL_RGBA$2 = 0x1908;\r\n\r\nvar GL_DEPTH_COMPONENT$1 = 0x1902;\r\n\r\nvar colorTextureFormatEnums = [\r\n  GL_RGB$1,\r\n  GL_RGBA$2\r\n];\r\n\r\n// for every texture format, store\r\n// the number of channels\r\nvar textureFormatChannels = [];\r\ntextureFormatChannels[GL_RGBA$2] = 4;\r\ntextureFormatChannels[GL_RGB$1] = 3;\r\n\r\n// for every texture type, store\r\n// the size in bytes.\r\nvar textureTypeSizes = [];\r\ntextureTypeSizes[GL_UNSIGNED_BYTE$6] = 1;\r\ntextureTypeSizes[GL_FLOAT$5] = 4;\r\ntextureTypeSizes[GL_HALF_FLOAT_OES$2] = 2;\r\n\r\nvar GL_RGBA4$2 = 0x8056;\r\nvar GL_RGB5_A1$2 = 0x8057;\r\nvar GL_RGB565$2 = 0x8D62;\r\nvar GL_DEPTH_COMPONENT16$1 = 0x81A5;\r\nvar GL_STENCIL_INDEX8$1 = 0x8D48;\r\nvar GL_DEPTH_STENCIL$2 = 0x84F9;\r\n\r\nvar GL_SRGB8_ALPHA8_EXT$1 = 0x8C43;\r\n\r\nvar GL_RGBA32F_EXT$1 = 0x8814;\r\n\r\nvar GL_RGBA16F_EXT$1 = 0x881A;\r\nvar GL_RGB16F_EXT$1 = 0x881B;\r\n\r\nvar colorRenderbufferFormatEnums = [\r\n  GL_RGBA4$2,\r\n  GL_RGB5_A1$2,\r\n  GL_RGB565$2,\r\n  GL_SRGB8_ALPHA8_EXT$1,\r\n  GL_RGBA16F_EXT$1,\r\n  GL_RGB16F_EXT$1,\r\n  GL_RGBA32F_EXT$1\r\n];\r\n\r\nvar statusCode = {};\r\nstatusCode[GL_FRAMEBUFFER_COMPLETE$1] = 'complete';\r\nstatusCode[GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT] = 'incomplete attachment';\r\nstatusCode[GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS] = 'incomplete dimensions';\r\nstatusCode[GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT] = 'incomplete, missing attachment';\r\nstatusCode[GL_FRAMEBUFFER_UNSUPPORTED] = 'unsupported';\r\n\r\nfunction wrapFBOState (\r\n  gl,\r\n  extensions,\r\n  limits,\r\n  textureState,\r\n  renderbufferState,\r\n  stats) {\r\n  var framebufferState = {\r\n    cur: null,\r\n    next: null,\r\n    dirty: false,\r\n    setFBO: null\r\n  };\r\n\r\n  var colorTextureFormats = ['rgba'];\r\n  var colorRenderbufferFormats = ['rgba4', 'rgb565', 'rgb5 a1'];\r\n\r\n  if (extensions.ext_srgb) {\r\n    colorRenderbufferFormats.push('srgba');\r\n  }\r\n\r\n  if (extensions.ext_color_buffer_half_float) {\r\n    colorRenderbufferFormats.push('rgba16f', 'rgb16f');\r\n  }\r\n\r\n  if (extensions.webgl_color_buffer_float) {\r\n    colorRenderbufferFormats.push('rgba32f');\r\n  }\r\n\r\n  var colorTypes = ['uint8'];\r\n  if (extensions.oes_texture_half_float) {\r\n    colorTypes.push('half float', 'float16');\r\n  }\r\n  if (extensions.oes_texture_float) {\r\n    colorTypes.push('float', 'float32');\r\n  }\r\n\r\n  function FramebufferAttachment (target, texture, renderbuffer) {\r\n    this.target = target;\r\n    this.texture = texture;\r\n    this.renderbuffer = renderbuffer;\r\n\r\n    var w = 0;\r\n    var h = 0;\r\n    if (texture) {\r\n      w = texture.width;\r\n      h = texture.height;\r\n    } else if (renderbuffer) {\r\n      w = renderbuffer.width;\r\n      h = renderbuffer.height;\r\n    }\r\n    this.width = w;\r\n    this.height = h;\r\n  }\r\n\r\n  function decRef (attachment) {\r\n    if (attachment) {\r\n      if (attachment.texture) {\r\n        attachment.texture._texture.decRef();\r\n      }\r\n      if (attachment.renderbuffer) {\r\n        attachment.renderbuffer._renderbuffer.decRef();\r\n      }\r\n    }\r\n  }\r\n\r\n  function incRefAndCheckShape (attachment, width, height) {\r\n    if (!attachment) {\r\n      return\r\n    }\r\n    if (attachment.texture) {\r\n      var texture = attachment.texture._texture;\r\n      var tw = Math.max(1, texture.width);\r\n      var th = Math.max(1, texture.height);\r\n      check$1(tw === width && th === height,\r\n        'inconsistent width/height for supplied texture');\r\n      texture.refCount += 1;\r\n    } else {\r\n      var renderbuffer = attachment.renderbuffer._renderbuffer;\r\n      check$1(\r\n        renderbuffer.width === width && renderbuffer.height === height,\r\n        'inconsistent width/height for renderbuffer');\r\n      renderbuffer.refCount += 1;\r\n    }\r\n  }\r\n\r\n  function attach (location, attachment) {\r\n    if (attachment) {\r\n      if (attachment.texture) {\r\n        gl.framebufferTexture2D(\r\n          GL_FRAMEBUFFER$1,\r\n          location,\r\n          attachment.target,\r\n          attachment.texture._texture.texture,\r\n          0);\r\n      } else {\r\n        gl.framebufferRenderbuffer(\r\n          GL_FRAMEBUFFER$1,\r\n          location,\r\n          GL_RENDERBUFFER$1,\r\n          attachment.renderbuffer._renderbuffer.renderbuffer);\r\n      }\r\n    }\r\n  }\r\n\r\n  function parseAttachment (attachment) {\r\n    var target = GL_TEXTURE_2D$2;\r\n    var texture = null;\r\n    var renderbuffer = null;\r\n\r\n    var data = attachment;\r\n    if (typeof attachment === 'object') {\r\n      data = attachment.data;\r\n      if ('target' in attachment) {\r\n        target = attachment.target | 0;\r\n      }\r\n    }\r\n\r\n    check$1.type(data, 'function', 'invalid attachment data');\r\n\r\n    var type = data._reglType;\r\n    if (type === 'texture2d') {\r\n      texture = data;\r\n      check$1(target === GL_TEXTURE_2D$2);\r\n    } else if (type === 'textureCube') {\r\n      texture = data;\r\n      check$1(\r\n        target >= GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 &&\r\n        target < GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + 6,\r\n        'invalid cube map target');\r\n    } else if (type === 'renderbuffer') {\r\n      renderbuffer = data;\r\n      target = GL_RENDERBUFFER$1;\r\n    } else {\r\n      check$1.raise('invalid regl object for attachment');\r\n    }\r\n\r\n    return new FramebufferAttachment(target, texture, renderbuffer)\r\n  }\r\n\r\n  function allocAttachment (\r\n    width,\r\n    height,\r\n    isTexture,\r\n    format,\r\n    type) {\r\n    if (isTexture) {\r\n      var texture = textureState.create2D({\r\n        width: width,\r\n        height: height,\r\n        format: format,\r\n        type: type\r\n      });\r\n      texture._texture.refCount = 0;\r\n      return new FramebufferAttachment(GL_TEXTURE_2D$2, texture, null)\r\n    } else {\r\n      var rb = renderbufferState.create({\r\n        width: width,\r\n        height: height,\r\n        format: format\r\n      });\r\n      rb._renderbuffer.refCount = 0;\r\n      return new FramebufferAttachment(GL_RENDERBUFFER$1, null, rb)\r\n    }\r\n  }\r\n\r\n  function unwrapAttachment (attachment) {\r\n    return attachment && (attachment.texture || attachment.renderbuffer)\r\n  }\r\n\r\n  function resizeAttachment (attachment, w, h) {\r\n    if (attachment) {\r\n      if (attachment.texture) {\r\n        attachment.texture.resize(w, h);\r\n      } else if (attachment.renderbuffer) {\r\n        attachment.renderbuffer.resize(w, h);\r\n      }\r\n      attachment.width = w;\r\n      attachment.height = h;\r\n    }\r\n  }\r\n\r\n  var framebufferCount = 0;\r\n  var framebufferSet = {};\r\n\r\n  function REGLFramebuffer () {\r\n    this.id = framebufferCount++;\r\n    framebufferSet[this.id] = this;\r\n\r\n    this.framebuffer = gl.createFramebuffer();\r\n    this.width = 0;\r\n    this.height = 0;\r\n\r\n    this.colorAttachments = [];\r\n    this.depthAttachment = null;\r\n    this.stencilAttachment = null;\r\n    this.depthStencilAttachment = null;\r\n  }\r\n\r\n  function decFBORefs (framebuffer) {\r\n    framebuffer.colorAttachments.forEach(decRef);\r\n    decRef(framebuffer.depthAttachment);\r\n    decRef(framebuffer.stencilAttachment);\r\n    decRef(framebuffer.depthStencilAttachment);\r\n  }\r\n\r\n  function destroy (framebuffer) {\r\n    var handle = framebuffer.framebuffer;\r\n    check$1(handle, 'must not double destroy framebuffer');\r\n    gl.deleteFramebuffer(handle);\r\n    framebuffer.framebuffer = null;\r\n    stats.framebufferCount--;\r\n    delete framebufferSet[framebuffer.id];\r\n  }\r\n\r\n  function updateFramebuffer (framebuffer) {\r\n    var i;\r\n\r\n    gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebuffer.framebuffer);\r\n    var colorAttachments = framebuffer.colorAttachments;\r\n    for (i = 0; i < colorAttachments.length; ++i) {\r\n      attach(GL_COLOR_ATTACHMENT0$1 + i, colorAttachments[i]);\r\n    }\r\n    for (i = colorAttachments.length; i < limits.maxColorAttachments; ++i) {\r\n      gl.framebufferTexture2D(\r\n        GL_FRAMEBUFFER$1,\r\n        GL_COLOR_ATTACHMENT0$1 + i,\r\n        GL_TEXTURE_2D$2,\r\n        null,\r\n        0);\r\n    }\r\n\r\n    gl.framebufferTexture2D(\r\n      GL_FRAMEBUFFER$1,\r\n      GL_DEPTH_STENCIL_ATTACHMENT,\r\n      GL_TEXTURE_2D$2,\r\n      null,\r\n      0);\r\n    gl.framebufferTexture2D(\r\n      GL_FRAMEBUFFER$1,\r\n      GL_DEPTH_ATTACHMENT,\r\n      GL_TEXTURE_2D$2,\r\n      null,\r\n      0);\r\n    gl.framebufferTexture2D(\r\n      GL_FRAMEBUFFER$1,\r\n      GL_STENCIL_ATTACHMENT,\r\n      GL_TEXTURE_2D$2,\r\n      null,\r\n      0);\r\n\r\n    attach(GL_DEPTH_ATTACHMENT, framebuffer.depthAttachment);\r\n    attach(GL_STENCIL_ATTACHMENT, framebuffer.stencilAttachment);\r\n    attach(GL_DEPTH_STENCIL_ATTACHMENT, framebuffer.depthStencilAttachment);\r\n\r\n    // Check status code\r\n    var status = gl.checkFramebufferStatus(GL_FRAMEBUFFER$1);\r\n    if (!gl.isContextLost() && status !== GL_FRAMEBUFFER_COMPLETE$1) {\r\n      check$1.raise('framebuffer configuration not supported, status = ' +\r\n        statusCode[status]);\r\n    }\r\n\r\n    gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebufferState.next ? framebufferState.next.framebuffer : null);\r\n    framebufferState.cur = framebufferState.next;\r\n\r\n    // FIXME: Clear error code here.  This is a work around for a bug in\r\n    // headless-gl\r\n    gl.getError();\r\n  }\r\n\r\n  function createFBO (a0, a1) {\r\n    var framebuffer = new REGLFramebuffer();\r\n    stats.framebufferCount++;\r\n\r\n    function reglFramebuffer (a, b) {\r\n      var i;\r\n\r\n      check$1(framebufferState.next !== framebuffer,\r\n        'can not update framebuffer which is currently in use');\r\n\r\n      var width = 0;\r\n      var height = 0;\r\n\r\n      var needsDepth = true;\r\n      var needsStencil = true;\r\n\r\n      var colorBuffer = null;\r\n      var colorTexture = true;\r\n      var colorFormat = 'rgba';\r\n      var colorType = 'uint8';\r\n      var colorCount = 1;\r\n\r\n      var depthBuffer = null;\r\n      var stencilBuffer = null;\r\n      var depthStencilBuffer = null;\r\n      var depthStencilTexture = false;\r\n\r\n      if (typeof a === 'number') {\r\n        width = a | 0;\r\n        height = (b | 0) || width;\r\n      } else if (!a) {\r\n        width = height = 1;\r\n      } else {\r\n        check$1.type(a, 'object', 'invalid arguments for framebuffer');\r\n        var options = a;\r\n\r\n        if ('shape' in options) {\r\n          var shape = options.shape;\r\n          check$1(Array.isArray(shape) && shape.length >= 2,\r\n            'invalid shape for framebuffer');\r\n          width = shape[0];\r\n          height = shape[1];\r\n        } else {\r\n          if ('radius' in options) {\r\n            width = height = options.radius;\r\n          }\r\n          if ('width' in options) {\r\n            width = options.width;\r\n          }\r\n          if ('height' in options) {\r\n            height = options.height;\r\n          }\r\n        }\r\n\r\n        if ('color' in options ||\r\n            'colors' in options) {\r\n          colorBuffer =\r\n            options.color ||\r\n            options.colors;\r\n          if (Array.isArray(colorBuffer)) {\r\n            check$1(\r\n              colorBuffer.length === 1 || extensions.webgl_draw_buffers,\r\n              'multiple render targets not supported');\r\n          }\r\n        }\r\n\r\n        if (!colorBuffer) {\r\n          if ('colorCount' in options) {\r\n            colorCount = options.colorCount | 0;\r\n            check$1(colorCount > 0, 'invalid color buffer count');\r\n          }\r\n\r\n          if ('colorTexture' in options) {\r\n            colorTexture = !!options.colorTexture;\r\n            colorFormat = 'rgba4';\r\n          }\r\n\r\n          if ('colorType' in options) {\r\n            colorType = options.colorType;\r\n            if (!colorTexture) {\r\n              if (colorType === 'half float' || colorType === 'float16') {\r\n                check$1(extensions.ext_color_buffer_half_float,\r\n                  'you must enable EXT_color_buffer_half_float to use 16-bit render buffers');\r\n                colorFormat = 'rgba16f';\r\n              } else if (colorType === 'float' || colorType === 'float32') {\r\n                check$1(extensions.webgl_color_buffer_float,\r\n                  'you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers');\r\n                colorFormat = 'rgba32f';\r\n              }\r\n            } else {\r\n              check$1(extensions.oes_texture_float ||\r\n                !(colorType === 'float' || colorType === 'float32'),\r\n                'you must enable OES_texture_float in order to use floating point framebuffer objects');\r\n              check$1(extensions.oes_texture_half_float ||\r\n                !(colorType === 'half float' || colorType === 'float16'),\r\n                'you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects');\r\n            }\r\n            check$1.oneOf(colorType, colorTypes, 'invalid color type');\r\n          }\r\n\r\n          if ('colorFormat' in options) {\r\n            colorFormat = options.colorFormat;\r\n            if (colorTextureFormats.indexOf(colorFormat) >= 0) {\r\n              colorTexture = true;\r\n            } else if (colorRenderbufferFormats.indexOf(colorFormat) >= 0) {\r\n              colorTexture = false;\r\n            } else {\r\n              if (colorTexture) {\r\n                check$1.oneOf(\r\n                  options.colorFormat, colorTextureFormats,\r\n                  'invalid color format for texture');\r\n              } else {\r\n                check$1.oneOf(\r\n                  options.colorFormat, colorRenderbufferFormats,\r\n                  'invalid color format for renderbuffer');\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if ('depthTexture' in options || 'depthStencilTexture' in options) {\r\n          depthStencilTexture = !!(options.depthTexture ||\r\n            options.depthStencilTexture);\r\n          check$1(!depthStencilTexture || extensions.webgl_depth_texture,\r\n            'webgl_depth_texture extension not supported');\r\n        }\r\n\r\n        if ('depth' in options) {\r\n          if (typeof options.depth === 'boolean') {\r\n            needsDepth = options.depth;\r\n          } else {\r\n            depthBuffer = options.depth;\r\n            needsStencil = false;\r\n          }\r\n        }\r\n\r\n        if ('stencil' in options) {\r\n          if (typeof options.stencil === 'boolean') {\r\n            needsStencil = options.stencil;\r\n          } else {\r\n            stencilBuffer = options.stencil;\r\n            needsDepth = false;\r\n          }\r\n        }\r\n\r\n        if ('depthStencil' in options) {\r\n          if (typeof options.depthStencil === 'boolean') {\r\n            needsDepth = needsStencil = options.depthStencil;\r\n          } else {\r\n            depthStencilBuffer = options.depthStencil;\r\n            needsDepth = false;\r\n            needsStencil = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      // parse attachments\r\n      var colorAttachments = null;\r\n      var depthAttachment = null;\r\n      var stencilAttachment = null;\r\n      var depthStencilAttachment = null;\r\n\r\n      // Set up color attachments\r\n      if (Array.isArray(colorBuffer)) {\r\n        colorAttachments = colorBuffer.map(parseAttachment);\r\n      } else if (colorBuffer) {\r\n        colorAttachments = [parseAttachment(colorBuffer)];\r\n      } else {\r\n        colorAttachments = new Array(colorCount);\r\n        for (i = 0; i < colorCount; ++i) {\r\n          colorAttachments[i] = allocAttachment(\r\n            width,\r\n            height,\r\n            colorTexture,\r\n            colorFormat,\r\n            colorType);\r\n        }\r\n      }\r\n\r\n      check$1(extensions.webgl_draw_buffers || colorAttachments.length <= 1,\r\n        'you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers.');\r\n      check$1(colorAttachments.length <= limits.maxColorAttachments,\r\n        'too many color attachments, not supported');\r\n\r\n      width = width || colorAttachments[0].width;\r\n      height = height || colorAttachments[0].height;\r\n\r\n      if (depthBuffer) {\r\n        depthAttachment = parseAttachment(depthBuffer);\r\n      } else if (needsDepth && !needsStencil) {\r\n        depthAttachment = allocAttachment(\r\n          width,\r\n          height,\r\n          depthStencilTexture,\r\n          'depth',\r\n          'uint32');\r\n      }\r\n\r\n      if (stencilBuffer) {\r\n        stencilAttachment = parseAttachment(stencilBuffer);\r\n      } else if (needsStencil && !needsDepth) {\r\n        stencilAttachment = allocAttachment(\r\n          width,\r\n          height,\r\n          false,\r\n          'stencil',\r\n          'uint8');\r\n      }\r\n\r\n      if (depthStencilBuffer) {\r\n        depthStencilAttachment = parseAttachment(depthStencilBuffer);\r\n      } else if (!depthBuffer && !stencilBuffer && needsStencil && needsDepth) {\r\n        depthStencilAttachment = allocAttachment(\r\n          width,\r\n          height,\r\n          depthStencilTexture,\r\n          'depth stencil',\r\n          'depth stencil');\r\n      }\r\n\r\n      check$1(\r\n        (!!depthBuffer) + (!!stencilBuffer) + (!!depthStencilBuffer) <= 1,\r\n        'invalid framebuffer configuration, can specify exactly one depth/stencil attachment');\r\n\r\n      var commonColorAttachmentSize = null;\r\n\r\n      for (i = 0; i < colorAttachments.length; ++i) {\r\n        incRefAndCheckShape(colorAttachments[i], width, height);\r\n        check$1(!colorAttachments[i] ||\r\n          (colorAttachments[i].texture &&\r\n            colorTextureFormatEnums.indexOf(colorAttachments[i].texture._texture.format) >= 0) ||\r\n          (colorAttachments[i].renderbuffer &&\r\n            colorRenderbufferFormatEnums.indexOf(colorAttachments[i].renderbuffer._renderbuffer.format) >= 0),\r\n          'framebuffer color attachment ' + i + ' is invalid');\r\n\r\n        if (colorAttachments[i] && colorAttachments[i].texture) {\r\n          var colorAttachmentSize =\r\n              textureFormatChannels[colorAttachments[i].texture._texture.format] *\r\n              textureTypeSizes[colorAttachments[i].texture._texture.type];\r\n\r\n          if (commonColorAttachmentSize === null) {\r\n            commonColorAttachmentSize = colorAttachmentSize;\r\n          } else {\r\n            // We need to make sure that all color attachments have the same number of bitplanes\r\n            // (that is, the same numer of bits per pixel)\r\n            // This is required by the GLES2.0 standard. See the beginning of Chapter 4 in that document.\r\n            check$1(commonColorAttachmentSize === colorAttachmentSize,\r\n                  'all color attachments much have the same number of bits per pixel.');\r\n          }\r\n        }\r\n      }\r\n      incRefAndCheckShape(depthAttachment, width, height);\r\n      check$1(!depthAttachment ||\r\n        (depthAttachment.texture &&\r\n          depthAttachment.texture._texture.format === GL_DEPTH_COMPONENT$1) ||\r\n        (depthAttachment.renderbuffer &&\r\n          depthAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_COMPONENT16$1),\r\n        'invalid depth attachment for framebuffer object');\r\n      incRefAndCheckShape(stencilAttachment, width, height);\r\n      check$1(!stencilAttachment ||\r\n        (stencilAttachment.renderbuffer &&\r\n          stencilAttachment.renderbuffer._renderbuffer.format === GL_STENCIL_INDEX8$1),\r\n        'invalid stencil attachment for framebuffer object');\r\n      incRefAndCheckShape(depthStencilAttachment, width, height);\r\n      check$1(!depthStencilAttachment ||\r\n        (depthStencilAttachment.texture &&\r\n          depthStencilAttachment.texture._texture.format === GL_DEPTH_STENCIL$2) ||\r\n        (depthStencilAttachment.renderbuffer &&\r\n          depthStencilAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_STENCIL$2),\r\n        'invalid depth-stencil attachment for framebuffer object');\r\n\r\n      // decrement references\r\n      decFBORefs(framebuffer);\r\n\r\n      framebuffer.width = width;\r\n      framebuffer.height = height;\r\n\r\n      framebuffer.colorAttachments = colorAttachments;\r\n      framebuffer.depthAttachment = depthAttachment;\r\n      framebuffer.stencilAttachment = stencilAttachment;\r\n      framebuffer.depthStencilAttachment = depthStencilAttachment;\r\n\r\n      reglFramebuffer.color = colorAttachments.map(unwrapAttachment);\r\n      reglFramebuffer.depth = unwrapAttachment(depthAttachment);\r\n      reglFramebuffer.stencil = unwrapAttachment(stencilAttachment);\r\n      reglFramebuffer.depthStencil = unwrapAttachment(depthStencilAttachment);\r\n\r\n      reglFramebuffer.width = framebuffer.width;\r\n      reglFramebuffer.height = framebuffer.height;\r\n\r\n      updateFramebuffer(framebuffer);\r\n\r\n      return reglFramebuffer\r\n    }\r\n\r\n    function resize (w_, h_) {\r\n      check$1(framebufferState.next !== framebuffer,\r\n        'can not resize a framebuffer which is currently in use');\r\n\r\n      var w = Math.max(w_ | 0, 1);\r\n      var h = Math.max((h_ | 0) || w, 1);\r\n      if (w === framebuffer.width && h === framebuffer.height) {\r\n        return reglFramebuffer\r\n      }\r\n\r\n      // resize all buffers\r\n      var colorAttachments = framebuffer.colorAttachments;\r\n      for (var i = 0; i < colorAttachments.length; ++i) {\r\n        resizeAttachment(colorAttachments[i], w, h);\r\n      }\r\n      resizeAttachment(framebuffer.depthAttachment, w, h);\r\n      resizeAttachment(framebuffer.stencilAttachment, w, h);\r\n      resizeAttachment(framebuffer.depthStencilAttachment, w, h);\r\n\r\n      framebuffer.width = reglFramebuffer.width = w;\r\n      framebuffer.height = reglFramebuffer.height = h;\r\n\r\n      updateFramebuffer(framebuffer);\r\n\r\n      return reglFramebuffer\r\n    }\r\n\r\n    reglFramebuffer(a0, a1);\r\n\r\n    return extend(reglFramebuffer, {\r\n      resize: resize,\r\n      _reglType: 'framebuffer',\r\n      _framebuffer: framebuffer,\r\n      destroy: function () {\r\n        destroy(framebuffer);\r\n        decFBORefs(framebuffer);\r\n      },\r\n      use: function (block) {\r\n        framebufferState.setFBO({\r\n          framebuffer: reglFramebuffer\r\n        }, block);\r\n      }\r\n    })\r\n  }\r\n\r\n  function createCubeFBO (options) {\r\n    var faces = Array(6);\r\n\r\n    function reglFramebufferCube (a) {\r\n      var i;\r\n\r\n      check$1(faces.indexOf(framebufferState.next) < 0,\r\n        'can not update framebuffer which is currently in use');\r\n\r\n      var params = {\r\n        color: null\r\n      };\r\n\r\n      var radius = 0;\r\n\r\n      var colorBuffer = null;\r\n      var colorFormat = 'rgba';\r\n      var colorType = 'uint8';\r\n      var colorCount = 1;\r\n\r\n      if (typeof a === 'number') {\r\n        radius = a | 0;\r\n      } else if (!a) {\r\n        radius = 1;\r\n      } else {\r\n        check$1.type(a, 'object', 'invalid arguments for framebuffer');\r\n        var options = a;\r\n\r\n        if ('shape' in options) {\r\n          var shape = options.shape;\r\n          check$1(\r\n            Array.isArray(shape) && shape.length >= 2,\r\n            'invalid shape for framebuffer');\r\n          check$1(\r\n            shape[0] === shape[1],\r\n            'cube framebuffer must be square');\r\n          radius = shape[0];\r\n        } else {\r\n          if ('radius' in options) {\r\n            radius = options.radius | 0;\r\n          }\r\n          if ('width' in options) {\r\n            radius = options.width | 0;\r\n            if ('height' in options) {\r\n              check$1(options.height === radius, 'must be square');\r\n            }\r\n          } else if ('height' in options) {\r\n            radius = options.height | 0;\r\n          }\r\n        }\r\n\r\n        if ('color' in options ||\r\n            'colors' in options) {\r\n          colorBuffer =\r\n            options.color ||\r\n            options.colors;\r\n          if (Array.isArray(colorBuffer)) {\r\n            check$1(\r\n              colorBuffer.length === 1 || extensions.webgl_draw_buffers,\r\n              'multiple render targets not supported');\r\n          }\r\n        }\r\n\r\n        if (!colorBuffer) {\r\n          if ('colorCount' in options) {\r\n            colorCount = options.colorCount | 0;\r\n            check$1(colorCount > 0, 'invalid color buffer count');\r\n          }\r\n\r\n          if ('colorType' in options) {\r\n            check$1.oneOf(\r\n              options.colorType, colorTypes,\r\n              'invalid color type');\r\n            colorType = options.colorType;\r\n          }\r\n\r\n          if ('colorFormat' in options) {\r\n            colorFormat = options.colorFormat;\r\n            check$1.oneOf(\r\n              options.colorFormat, colorTextureFormats,\r\n              'invalid color format for texture');\r\n          }\r\n        }\r\n\r\n        if ('depth' in options) {\r\n          params.depth = options.depth;\r\n        }\r\n\r\n        if ('stencil' in options) {\r\n          params.stencil = options.stencil;\r\n        }\r\n\r\n        if ('depthStencil' in options) {\r\n          params.depthStencil = options.depthStencil;\r\n        }\r\n      }\r\n\r\n      var colorCubes;\r\n      if (colorBuffer) {\r\n        if (Array.isArray(colorBuffer)) {\r\n          colorCubes = [];\r\n          for (i = 0; i < colorBuffer.length; ++i) {\r\n            colorCubes[i] = colorBuffer[i];\r\n          }\r\n        } else {\r\n          colorCubes = [ colorBuffer ];\r\n        }\r\n      } else {\r\n        colorCubes = Array(colorCount);\r\n        var cubeMapParams = {\r\n          radius: radius,\r\n          format: colorFormat,\r\n          type: colorType\r\n        };\r\n        for (i = 0; i < colorCount; ++i) {\r\n          colorCubes[i] = textureState.createCube(cubeMapParams);\r\n        }\r\n      }\r\n\r\n      // Check color cubes\r\n      params.color = Array(colorCubes.length);\r\n      for (i = 0; i < colorCubes.length; ++i) {\r\n        var cube = colorCubes[i];\r\n        check$1(\r\n          typeof cube === 'function' && cube._reglType === 'textureCube',\r\n          'invalid cube map');\r\n        radius = radius || cube.width;\r\n        check$1(\r\n          cube.width === radius && cube.height === radius,\r\n          'invalid cube map shape');\r\n        params.color[i] = {\r\n          target: GL_TEXTURE_CUBE_MAP_POSITIVE_X$2,\r\n          data: colorCubes[i]\r\n        };\r\n      }\r\n\r\n      for (i = 0; i < 6; ++i) {\r\n        for (var j = 0; j < colorCubes.length; ++j) {\r\n          params.color[j].target = GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + i;\r\n        }\r\n        // reuse depth-stencil attachments across all cube maps\r\n        if (i > 0) {\r\n          params.depth = faces[0].depth;\r\n          params.stencil = faces[0].stencil;\r\n          params.depthStencil = faces[0].depthStencil;\r\n        }\r\n        if (faces[i]) {\r\n          (faces[i])(params);\r\n        } else {\r\n          faces[i] = createFBO(params);\r\n        }\r\n      }\r\n\r\n      return extend(reglFramebufferCube, {\r\n        width: radius,\r\n        height: radius,\r\n        color: colorCubes\r\n      })\r\n    }\r\n\r\n    function resize (radius_) {\r\n      var i;\r\n      var radius = radius_ | 0;\r\n      check$1(radius > 0 && radius <= limits.maxCubeMapSize,\r\n        'invalid radius for cube fbo');\r\n\r\n      if (radius === reglFramebufferCube.width) {\r\n        return reglFramebufferCube\r\n      }\r\n\r\n      var colors = reglFramebufferCube.color;\r\n      for (i = 0; i < colors.length; ++i) {\r\n        colors[i].resize(radius);\r\n      }\r\n\r\n      for (i = 0; i < 6; ++i) {\r\n        faces[i].resize(radius);\r\n      }\r\n\r\n      reglFramebufferCube.width = reglFramebufferCube.height = radius;\r\n\r\n      return reglFramebufferCube\r\n    }\r\n\r\n    reglFramebufferCube(options);\r\n\r\n    return extend(reglFramebufferCube, {\r\n      faces: faces,\r\n      resize: resize,\r\n      _reglType: 'framebufferCube',\r\n      destroy: function () {\r\n        faces.forEach(function (f) {\r\n          f.destroy();\r\n        });\r\n      }\r\n    })\r\n  }\r\n\r\n  function restoreFramebuffers () {\r\n    framebufferState.cur = null;\r\n    framebufferState.next = null;\r\n    framebufferState.dirty = true;\r\n    values(framebufferSet).forEach(function (fb) {\r\n      fb.framebuffer = gl.createFramebuffer();\r\n      updateFramebuffer(fb);\r\n    });\r\n  }\r\n\r\n  return extend(framebufferState, {\r\n    getFramebuffer: function (object) {\r\n      if (typeof object === 'function' && object._reglType === 'framebuffer') {\r\n        var fbo = object._framebuffer;\r\n        if (fbo instanceof REGLFramebuffer) {\r\n          return fbo\r\n        }\r\n      }\r\n      return null\r\n    },\r\n    create: createFBO,\r\n    createCube: createCubeFBO,\r\n    clear: function () {\r\n      values(framebufferSet).forEach(destroy);\r\n    },\r\n    restore: restoreFramebuffers\r\n  })\r\n}\n\nvar GL_FLOAT$6 = 5126;\r\n\r\nfunction AttributeRecord () {\r\n  this.state = 0;\r\n\r\n  this.x = 0.0;\r\n  this.y = 0.0;\r\n  this.z = 0.0;\r\n  this.w = 0.0;\r\n\r\n  this.buffer = null;\r\n  this.size = 0;\r\n  this.normalized = false;\r\n  this.type = GL_FLOAT$6;\r\n  this.offset = 0;\r\n  this.stride = 0;\r\n  this.divisor = 0;\r\n}\r\n\r\nfunction wrapAttributeState (\r\n  gl,\r\n  extensions,\r\n  limits,\r\n  stringStore) {\r\n  var NUM_ATTRIBUTES = limits.maxAttributes;\r\n  var attributeBindings = new Array(NUM_ATTRIBUTES);\r\n  for (var i = 0; i < NUM_ATTRIBUTES; ++i) {\r\n    attributeBindings[i] = new AttributeRecord();\r\n  }\r\n\r\n  return {\r\n    Record: AttributeRecord,\r\n    scope: {},\r\n    state: attributeBindings\r\n  }\r\n}\n\nvar GL_FRAGMENT_SHADER = 35632;\r\nvar GL_VERTEX_SHADER = 35633;\r\n\r\nvar GL_ACTIVE_UNIFORMS = 0x8B86;\r\nvar GL_ACTIVE_ATTRIBUTES = 0x8B89;\r\n\r\nfunction wrapShaderState (gl, stringStore, stats, config) {\r\n  // ===================================================\r\n  // glsl compilation and linking\r\n  // ===================================================\r\n  var fragShaders = {};\r\n  var vertShaders = {};\r\n\r\n  function ActiveInfo (name, id, location, info) {\r\n    this.name = name;\r\n    this.id = id;\r\n    this.location = location;\r\n    this.info = info;\r\n  }\r\n\r\n  function insertActiveInfo (list, info) {\r\n    for (var i = 0; i < list.length; ++i) {\r\n      if (list[i].id === info.id) {\r\n        list[i].location = info.location;\r\n        return\r\n      }\r\n    }\r\n    list.push(info);\r\n  }\r\n\r\n  function getShader (type, id, command) {\r\n    var cache = type === GL_FRAGMENT_SHADER ? fragShaders : vertShaders;\r\n    var shader = cache[id];\r\n\r\n    if (!shader) {\r\n      var source = stringStore.str(id);\r\n      shader = gl.createShader(type);\r\n      gl.shaderSource(shader, source);\r\n      gl.compileShader(shader);\r\n      check$1.shaderError(gl, shader, source, type, command);\r\n      cache[id] = shader;\r\n    }\r\n\r\n    return shader\r\n  }\r\n\r\n  // ===================================================\r\n  // program linking\r\n  // ===================================================\r\n  var programCache = {};\r\n  var programList = [];\r\n\r\n  var PROGRAM_COUNTER = 0;\r\n\r\n  function REGLProgram (fragId, vertId) {\r\n    this.id = PROGRAM_COUNTER++;\r\n    this.fragId = fragId;\r\n    this.vertId = vertId;\r\n    this.program = null;\r\n    this.uniforms = [];\r\n    this.attributes = [];\r\n\r\n    if (config.profile) {\r\n      this.stats = {\r\n        uniformsCount: 0,\r\n        attributesCount: 0\r\n      };\r\n    }\r\n  }\r\n\r\n  function linkProgram (desc, command) {\r\n    var i, info;\r\n\r\n    // -------------------------------\r\n    // compile & link\r\n    // -------------------------------\r\n    var fragShader = getShader(GL_FRAGMENT_SHADER, desc.fragId);\r\n    var vertShader = getShader(GL_VERTEX_SHADER, desc.vertId);\r\n\r\n    var program = desc.program = gl.createProgram();\r\n    gl.attachShader(program, fragShader);\r\n    gl.attachShader(program, vertShader);\r\n    gl.linkProgram(program);\r\n    check$1.linkError(\r\n      gl,\r\n      program,\r\n      stringStore.str(desc.fragId),\r\n      stringStore.str(desc.vertId),\r\n      command);\r\n\r\n    // -------------------------------\r\n    // grab uniforms\r\n    // -------------------------------\r\n    var numUniforms = gl.getProgramParameter(program, GL_ACTIVE_UNIFORMS);\r\n    if (config.profile) {\r\n      desc.stats.uniformsCount = numUniforms;\r\n    }\r\n    var uniforms = desc.uniforms;\r\n    for (i = 0; i < numUniforms; ++i) {\r\n      info = gl.getActiveUniform(program, i);\r\n      if (info) {\r\n        if (info.size > 1) {\r\n          for (var j = 0; j < info.size; ++j) {\r\n            var name = info.name.replace('[0]', '[' + j + ']');\r\n            insertActiveInfo(uniforms, new ActiveInfo(\r\n              name,\r\n              stringStore.id(name),\r\n              gl.getUniformLocation(program, name),\r\n              info));\r\n          }\r\n        } else {\r\n          insertActiveInfo(uniforms, new ActiveInfo(\r\n            info.name,\r\n            stringStore.id(info.name),\r\n            gl.getUniformLocation(program, info.name),\r\n            info));\r\n        }\r\n      }\r\n    }\r\n\r\n    // -------------------------------\r\n    // grab attributes\r\n    // -------------------------------\r\n    var numAttributes = gl.getProgramParameter(program, GL_ACTIVE_ATTRIBUTES);\r\n    if (config.profile) {\r\n      desc.stats.attributesCount = numAttributes;\r\n    }\r\n\r\n    var attributes = desc.attributes;\r\n    for (i = 0; i < numAttributes; ++i) {\r\n      info = gl.getActiveAttrib(program, i);\r\n      if (info) {\r\n        insertActiveInfo(attributes, new ActiveInfo(\r\n          info.name,\r\n          stringStore.id(info.name),\r\n          gl.getAttribLocation(program, info.name),\r\n          info));\r\n      }\r\n    }\r\n  }\r\n\r\n  if (config.profile) {\r\n    stats.getMaxUniformsCount = function () {\r\n      var m = 0;\r\n      programList.forEach(function (desc) {\r\n        if (desc.stats.uniformsCount > m) {\r\n          m = desc.stats.uniformsCount;\r\n        }\r\n      });\r\n      return m\r\n    };\r\n\r\n    stats.getMaxAttributesCount = function () {\r\n      var m = 0;\r\n      programList.forEach(function (desc) {\r\n        if (desc.stats.attributesCount > m) {\r\n          m = desc.stats.attributesCount;\r\n        }\r\n      });\r\n      return m\r\n    };\r\n  }\r\n\r\n  function restoreShaders () {\r\n    fragShaders = {};\r\n    vertShaders = {};\r\n    for (var i = 0; i < programList.length; ++i) {\r\n      linkProgram(programList[i]);\r\n    }\r\n  }\r\n\r\n  return {\r\n    clear: function () {\r\n      var deleteShader = gl.deleteShader.bind(gl);\r\n      values(fragShaders).forEach(deleteShader);\r\n      fragShaders = {};\r\n      values(vertShaders).forEach(deleteShader);\r\n      vertShaders = {};\r\n\r\n      programList.forEach(function (desc) {\r\n        gl.deleteProgram(desc.program);\r\n      });\r\n      programList.length = 0;\r\n      programCache = {};\r\n\r\n      stats.shaderCount = 0;\r\n    },\r\n\r\n    program: function (vertId, fragId, command) {\r\n      check$1.command(vertId >= 0, 'missing vertex shader', command);\r\n      check$1.command(fragId >= 0, 'missing fragment shader', command);\r\n\r\n      var cache = programCache[fragId];\r\n      if (!cache) {\r\n        cache = programCache[fragId] = {};\r\n      }\r\n      var program = cache[vertId];\r\n      if (!program) {\r\n        program = new REGLProgram(fragId, vertId);\r\n        stats.shaderCount++;\r\n\r\n        linkProgram(program, command);\r\n        cache[vertId] = program;\r\n        programList.push(program);\r\n      }\r\n      return program\r\n    },\r\n\r\n    restore: restoreShaders,\r\n\r\n    shader: getShader,\r\n\r\n    frag: -1,\r\n    vert: -1\r\n  }\r\n}\n\nvar GL_RGBA$3 = 6408;\r\nvar GL_UNSIGNED_BYTE$7 = 5121;\r\nvar GL_PACK_ALIGNMENT = 0x0D05;\r\nvar GL_FLOAT$7 = 0x1406; // 5126\r\n\r\nfunction wrapReadPixels (\r\n  gl,\r\n  framebufferState,\r\n  reglPoll,\r\n  context,\r\n  glAttributes,\r\n  extensions,\r\n  limits) {\r\n  function readPixelsImpl (input) {\r\n    var type;\r\n    if (framebufferState.next === null) {\r\n      check$1(\r\n        glAttributes.preserveDrawingBuffer,\r\n        'you must create a webgl context with \"preserveDrawingBuffer\":true in order to read pixels from the drawing buffer');\r\n      type = GL_UNSIGNED_BYTE$7;\r\n    } else {\r\n      check$1(\r\n        framebufferState.next.colorAttachments[0].texture !== null,\r\n          'You cannot read from a renderbuffer');\r\n      type = framebufferState.next.colorAttachments[0].texture._texture.type;\r\n\r\n      if (extensions.oes_texture_float) {\r\n        check$1(\r\n          type === GL_UNSIGNED_BYTE$7 || type === GL_FLOAT$7,\r\n          'Reading from a framebuffer is only allowed for the types \\'uint8\\' and \\'float\\'');\r\n\r\n        if (type === GL_FLOAT$7) {\r\n          check$1(limits.readFloat, 'Reading \\'float\\' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float');\r\n        }\r\n      } else {\r\n        check$1(\r\n          type === GL_UNSIGNED_BYTE$7,\r\n          'Reading from a framebuffer is only allowed for the type \\'uint8\\'');\r\n      }\r\n    }\r\n\r\n    var x = 0;\r\n    var y = 0;\r\n    var width = context.framebufferWidth;\r\n    var height = context.framebufferHeight;\r\n    var data = null;\r\n\r\n    if (isTypedArray(input)) {\r\n      data = input;\r\n    } else if (input) {\r\n      check$1.type(input, 'object', 'invalid arguments to regl.read()');\r\n      x = input.x | 0;\r\n      y = input.y | 0;\r\n      check$1(\r\n        x >= 0 && x < context.framebufferWidth,\r\n        'invalid x offset for regl.read');\r\n      check$1(\r\n        y >= 0 && y < context.framebufferHeight,\r\n        'invalid y offset for regl.read');\r\n      width = (input.width || (context.framebufferWidth - x)) | 0;\r\n      height = (input.height || (context.framebufferHeight - y)) | 0;\r\n      data = input.data || null;\r\n    }\r\n\r\n    // sanity check input.data\r\n    if (data) {\r\n      if (type === GL_UNSIGNED_BYTE$7) {\r\n        check$1(\r\n          data instanceof Uint8Array,\r\n          'buffer must be \\'Uint8Array\\' when reading from a framebuffer of type \\'uint8\\'');\r\n      } else if (type === GL_FLOAT$7) {\r\n        check$1(\r\n          data instanceof Float32Array,\r\n          'buffer must be \\'Float32Array\\' when reading from a framebuffer of type \\'float\\'');\r\n      }\r\n    }\r\n\r\n    check$1(\r\n      width > 0 && width + x <= context.framebufferWidth,\r\n      'invalid width for read pixels');\r\n    check$1(\r\n      height > 0 && height + y <= context.framebufferHeight,\r\n      'invalid height for read pixels');\r\n\r\n    // Update WebGL state\r\n    reglPoll();\r\n\r\n    // Compute size\r\n    var size = width * height * 4;\r\n\r\n    // Allocate data\r\n    if (!data) {\r\n      if (type === GL_UNSIGNED_BYTE$7) {\r\n        data = new Uint8Array(size);\r\n      } else if (type === GL_FLOAT$7) {\r\n        data = data || new Float32Array(size);\r\n      }\r\n    }\r\n\r\n    // Type check\r\n    check$1.isTypedArray(data, 'data buffer for regl.read() must be a typedarray');\r\n    check$1(data.byteLength >= size, 'data buffer for regl.read() too small');\r\n\r\n    // Run read pixels\r\n    gl.pixelStorei(GL_PACK_ALIGNMENT, 4);\r\n    gl.readPixels(x, y, width, height, GL_RGBA$3,\r\n                  type,\r\n                  data);\r\n\r\n    return data\r\n  }\r\n\r\n  function readPixelsFBO (options) {\r\n    var result;\r\n    framebufferState.setFBO({\r\n      framebuffer: options.framebuffer\r\n    }, function () {\r\n      result = readPixelsImpl(options);\r\n    });\r\n    return result\r\n  }\r\n\r\n  function readPixels (options) {\r\n    if (!options || !('framebuffer' in options)) {\r\n      return readPixelsImpl(options)\r\n    } else {\r\n      return readPixelsFBO(options)\r\n    }\r\n  }\r\n\r\n  return readPixels\r\n}\n\nfunction slice (x) {\r\n  return Array.prototype.slice.call(x)\r\n}\r\n\r\nfunction join (x) {\r\n  return slice(x).join('')\r\n}\r\n\r\nfunction createEnvironment () {\r\n  // Unique variable id counter\r\n  var varCounter = 0;\r\n\r\n  // Linked values are passed from this scope into the generated code block\r\n  // Calling link() passes a value into the generated scope and returns\r\n  // the variable name which it is bound to\r\n  var linkedNames = [];\r\n  var linkedValues = [];\r\n  function link (value) {\r\n    for (var i = 0; i < linkedValues.length; ++i) {\r\n      if (linkedValues[i] === value) {\r\n        return linkedNames[i]\r\n      }\r\n    }\r\n\r\n    var name = 'g' + (varCounter++);\r\n    linkedNames.push(name);\r\n    linkedValues.push(value);\r\n    return name\r\n  }\r\n\r\n  // create a code block\r\n  function block () {\r\n    var code = [];\r\n    function push () {\r\n      code.push.apply(code, slice(arguments));\r\n    }\r\n\r\n    var vars = [];\r\n    function def () {\r\n      var name = 'v' + (varCounter++);\r\n      vars.push(name);\r\n\r\n      if (arguments.length > 0) {\r\n        code.push(name, '=');\r\n        code.push.apply(code, slice(arguments));\r\n        code.push(';');\r\n      }\r\n\r\n      return name\r\n    }\r\n\r\n    return extend(push, {\r\n      def: def,\r\n      toString: function () {\r\n        return join([\r\n          (vars.length > 0 ? 'var ' + vars + ';' : ''),\r\n          join(code)\r\n        ])\r\n      }\r\n    })\r\n  }\r\n\r\n  function scope () {\r\n    var entry = block();\r\n    var exit = block();\r\n\r\n    var entryToString = entry.toString;\r\n    var exitToString = exit.toString;\r\n\r\n    function save (object, prop) {\r\n      exit(object, prop, '=', entry.def(object, prop), ';');\r\n    }\r\n\r\n    return extend(function () {\r\n      entry.apply(entry, slice(arguments));\r\n    }, {\r\n      def: entry.def,\r\n      entry: entry,\r\n      exit: exit,\r\n      save: save,\r\n      set: function (object, prop, value) {\r\n        save(object, prop);\r\n        entry(object, prop, '=', value, ';');\r\n      },\r\n      toString: function () {\r\n        return entryToString() + exitToString()\r\n      }\r\n    })\r\n  }\r\n\r\n  function conditional () {\r\n    var pred = join(arguments);\r\n    var thenBlock = scope();\r\n    var elseBlock = scope();\r\n\r\n    var thenToString = thenBlock.toString;\r\n    var elseToString = elseBlock.toString;\r\n\r\n    return extend(thenBlock, {\r\n      then: function () {\r\n        thenBlock.apply(thenBlock, slice(arguments));\r\n        return this\r\n      },\r\n      else: function () {\r\n        elseBlock.apply(elseBlock, slice(arguments));\r\n        return this\r\n      },\r\n      toString: function () {\r\n        var elseClause = elseToString();\r\n        if (elseClause) {\r\n          elseClause = 'else{' + elseClause + '}';\r\n        }\r\n        return join([\r\n          'if(', pred, '){',\r\n          thenToString(),\r\n          '}', elseClause\r\n        ])\r\n      }\r\n    })\r\n  }\r\n\r\n  // procedure list\r\n  var globalBlock = block();\r\n  var procedures = {};\r\n  function proc (name, count) {\r\n    var args = [];\r\n    function arg () {\r\n      var name = 'a' + args.length;\r\n      args.push(name);\r\n      return name\r\n    }\r\n\r\n    count = count || 0;\r\n    for (var i = 0; i < count; ++i) {\r\n      arg();\r\n    }\r\n\r\n    var body = scope();\r\n    var bodyToString = body.toString;\r\n\r\n    var result = procedures[name] = extend(body, {\r\n      arg: arg,\r\n      toString: function () {\r\n        return join([\r\n          'function(', args.join(), '){',\r\n          bodyToString(),\r\n          '}'\r\n        ])\r\n      }\r\n    });\r\n\r\n    return result\r\n  }\r\n\r\n  function compile () {\r\n    var code = ['\"use strict\";',\r\n      globalBlock,\r\n      'return {'];\r\n    Object.keys(procedures).forEach(function (name) {\r\n      code.push('\"', name, '\":', procedures[name].toString(), ',');\r\n    });\r\n    code.push('}');\r\n    var src = join(code)\r\n      .replace(/;/g, ';\\n')\r\n      .replace(/}/g, '}\\n')\r\n      .replace(/{/g, '{\\n');\r\n    var proc = Function.apply(null, linkedNames.concat(src));\r\n    return proc.apply(null, linkedValues)\r\n  }\r\n\r\n  return {\r\n    global: globalBlock,\r\n    link: link,\r\n    block: block,\r\n    proc: proc,\r\n    scope: scope,\r\n    cond: conditional,\r\n    compile: compile\r\n  }\r\n}\n\n// \"cute\" names for vector components\r\nvar CUTE_COMPONENTS = 'xyzw'.split('');\r\n\r\nvar GL_UNSIGNED_BYTE$8 = 5121;\r\n\r\nvar ATTRIB_STATE_POINTER = 1;\r\nvar ATTRIB_STATE_CONSTANT = 2;\r\n\r\nvar DYN_FUNC$1 = 0;\r\nvar DYN_PROP$1 = 1;\r\nvar DYN_CONTEXT$1 = 2;\r\nvar DYN_STATE$1 = 3;\r\nvar DYN_THUNK = 4;\r\n\r\nvar S_DITHER = 'dither';\r\nvar S_BLEND_ENABLE = 'blend.enable';\r\nvar S_BLEND_COLOR = 'blend.color';\r\nvar S_BLEND_EQUATION = 'blend.equation';\r\nvar S_BLEND_FUNC = 'blend.func';\r\nvar S_DEPTH_ENABLE = 'depth.enable';\r\nvar S_DEPTH_FUNC = 'depth.func';\r\nvar S_DEPTH_RANGE = 'depth.range';\r\nvar S_DEPTH_MASK = 'depth.mask';\r\nvar S_COLOR_MASK = 'colorMask';\r\nvar S_CULL_ENABLE = 'cull.enable';\r\nvar S_CULL_FACE = 'cull.face';\r\nvar S_FRONT_FACE = 'frontFace';\r\nvar S_LINE_WIDTH = 'lineWidth';\r\nvar S_POLYGON_OFFSET_ENABLE = 'polygonOffset.enable';\r\nvar S_POLYGON_OFFSET_OFFSET = 'polygonOffset.offset';\r\nvar S_SAMPLE_ALPHA = 'sample.alpha';\r\nvar S_SAMPLE_ENABLE = 'sample.enable';\r\nvar S_SAMPLE_COVERAGE = 'sample.coverage';\r\nvar S_STENCIL_ENABLE = 'stencil.enable';\r\nvar S_STENCIL_MASK = 'stencil.mask';\r\nvar S_STENCIL_FUNC = 'stencil.func';\r\nvar S_STENCIL_OPFRONT = 'stencil.opFront';\r\nvar S_STENCIL_OPBACK = 'stencil.opBack';\r\nvar S_SCISSOR_ENABLE = 'scissor.enable';\r\nvar S_SCISSOR_BOX = 'scissor.box';\r\nvar S_VIEWPORT = 'viewport';\r\n\r\nvar S_PROFILE = 'profile';\r\n\r\nvar S_FRAMEBUFFER = 'framebuffer';\r\nvar S_VERT = 'vert';\r\nvar S_FRAG = 'frag';\r\nvar S_ELEMENTS = 'elements';\r\nvar S_PRIMITIVE = 'primitive';\r\nvar S_COUNT = 'count';\r\nvar S_OFFSET = 'offset';\r\nvar S_INSTANCES = 'instances';\r\n\r\nvar SUFFIX_WIDTH = 'Width';\r\nvar SUFFIX_HEIGHT = 'Height';\r\n\r\nvar S_FRAMEBUFFER_WIDTH = S_FRAMEBUFFER + SUFFIX_WIDTH;\r\nvar S_FRAMEBUFFER_HEIGHT = S_FRAMEBUFFER + SUFFIX_HEIGHT;\r\nvar S_VIEWPORT_WIDTH = S_VIEWPORT + SUFFIX_WIDTH;\r\nvar S_VIEWPORT_HEIGHT = S_VIEWPORT + SUFFIX_HEIGHT;\r\nvar S_DRAWINGBUFFER = 'drawingBuffer';\r\nvar S_DRAWINGBUFFER_WIDTH = S_DRAWINGBUFFER + SUFFIX_WIDTH;\r\nvar S_DRAWINGBUFFER_HEIGHT = S_DRAWINGBUFFER + SUFFIX_HEIGHT;\r\n\r\nvar NESTED_OPTIONS = [\r\n  S_BLEND_FUNC,\r\n  S_BLEND_EQUATION,\r\n  S_STENCIL_FUNC,\r\n  S_STENCIL_OPFRONT,\r\n  S_STENCIL_OPBACK,\r\n  S_SAMPLE_COVERAGE,\r\n  S_VIEWPORT,\r\n  S_SCISSOR_BOX,\r\n  S_POLYGON_OFFSET_OFFSET\r\n];\r\n\r\nvar GL_ARRAY_BUFFER$1 = 34962;\r\nvar GL_ELEMENT_ARRAY_BUFFER$1 = 34963;\r\n\r\nvar GL_FRAGMENT_SHADER$1 = 35632;\r\nvar GL_VERTEX_SHADER$1 = 35633;\r\n\r\nvar GL_TEXTURE_2D$3 = 0x0DE1;\r\nvar GL_TEXTURE_CUBE_MAP$2 = 0x8513;\r\n\r\nvar GL_CULL_FACE = 0x0B44;\r\nvar GL_BLEND = 0x0BE2;\r\nvar GL_DITHER = 0x0BD0;\r\nvar GL_STENCIL_TEST = 0x0B90;\r\nvar GL_DEPTH_TEST = 0x0B71;\r\nvar GL_SCISSOR_TEST = 0x0C11;\r\nvar GL_POLYGON_OFFSET_FILL = 0x8037;\r\nvar GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;\r\nvar GL_SAMPLE_COVERAGE = 0x80A0;\r\n\r\nvar GL_FLOAT$8 = 5126;\r\nvar GL_FLOAT_VEC2 = 35664;\r\nvar GL_FLOAT_VEC3 = 35665;\r\nvar GL_FLOAT_VEC4 = 35666;\r\nvar GL_INT$3 = 5124;\r\nvar GL_INT_VEC2 = 35667;\r\nvar GL_INT_VEC3 = 35668;\r\nvar GL_INT_VEC4 = 35669;\r\nvar GL_BOOL = 35670;\r\nvar GL_BOOL_VEC2 = 35671;\r\nvar GL_BOOL_VEC3 = 35672;\r\nvar GL_BOOL_VEC4 = 35673;\r\nvar GL_FLOAT_MAT2 = 35674;\r\nvar GL_FLOAT_MAT3 = 35675;\r\nvar GL_FLOAT_MAT4 = 35676;\r\nvar GL_SAMPLER_2D = 35678;\r\nvar GL_SAMPLER_CUBE = 35680;\r\n\r\nvar GL_TRIANGLES$1 = 4;\r\n\r\nvar GL_FRONT = 1028;\r\nvar GL_BACK = 1029;\r\nvar GL_CW = 0x0900;\r\nvar GL_CCW = 0x0901;\r\nvar GL_MIN_EXT = 0x8007;\r\nvar GL_MAX_EXT = 0x8008;\r\nvar GL_ALWAYS = 519;\r\nvar GL_KEEP = 7680;\r\nvar GL_ZERO = 0;\r\nvar GL_ONE = 1;\r\nvar GL_FUNC_ADD = 0x8006;\r\nvar GL_LESS = 513;\r\n\r\nvar GL_FRAMEBUFFER$2 = 0x8D40;\r\nvar GL_COLOR_ATTACHMENT0$2 = 0x8CE0;\r\n\r\nvar blendFuncs = {\r\n  '0': 0,\r\n  '1': 1,\r\n  'zero': 0,\r\n  'one': 1,\r\n  'src color': 768,\r\n  'one minus src color': 769,\r\n  'src alpha': 770,\r\n  'one minus src alpha': 771,\r\n  'dst color': 774,\r\n  'one minus dst color': 775,\r\n  'dst alpha': 772,\r\n  'one minus dst alpha': 773,\r\n  'constant color': 32769,\r\n  'one minus constant color': 32770,\r\n  'constant alpha': 32771,\r\n  'one minus constant alpha': 32772,\r\n  'src alpha saturate': 776\r\n};\r\n\r\n// There are invalid values for srcRGB and dstRGB. See:\r\n// https://www.khronos.org/registry/webgl/specs/1.0/#6.13\r\n// https://github.com/KhronosGroup/WebGL/blob/0d3201f5f7ec3c0060bc1f04077461541f1987b9/conformance-suites/1.0.3/conformance/misc/webgl-specific.html#L56\r\nvar invalidBlendCombinations = [\r\n  'constant color, constant alpha',\r\n  'one minus constant color, constant alpha',\r\n  'constant color, one minus constant alpha',\r\n  'one minus constant color, one minus constant alpha',\r\n  'constant alpha, constant color',\r\n  'constant alpha, one minus constant color',\r\n  'one minus constant alpha, constant color',\r\n  'one minus constant alpha, one minus constant color'\r\n];\r\n\r\nvar compareFuncs = {\r\n  'never': 512,\r\n  'less': 513,\r\n  '<': 513,\r\n  'equal': 514,\r\n  '=': 514,\r\n  '==': 514,\r\n  '===': 514,\r\n  'lequal': 515,\r\n  '<=': 515,\r\n  'greater': 516,\r\n  '>': 516,\r\n  'notequal': 517,\r\n  '!=': 517,\r\n  '!==': 517,\r\n  'gequal': 518,\r\n  '>=': 518,\r\n  'always': 519\r\n};\r\n\r\nvar stencilOps = {\r\n  '0': 0,\r\n  'zero': 0,\r\n  'keep': 7680,\r\n  'replace': 7681,\r\n  'increment': 7682,\r\n  'decrement': 7683,\r\n  'increment wrap': 34055,\r\n  'decrement wrap': 34056,\r\n  'invert': 5386\r\n};\r\n\r\nvar shaderType = {\r\n  'frag': GL_FRAGMENT_SHADER$1,\r\n  'vert': GL_VERTEX_SHADER$1\r\n};\r\n\r\nvar orientationType = {\r\n  'cw': GL_CW,\r\n  'ccw': GL_CCW\r\n};\r\n\r\nfunction isBufferArgs (x) {\r\n  return Array.isArray(x) ||\r\n    isTypedArray(x) ||\r\n    isNDArrayLike(x)\r\n}\r\n\r\n// Make sure viewport is processed first\r\nfunction sortState (state) {\r\n  return state.sort(function (a, b) {\r\n    if (a === S_VIEWPORT) {\r\n      return -1\r\n    } else if (b === S_VIEWPORT) {\r\n      return 1\r\n    }\r\n    return (a < b) ? -1 : 1\r\n  })\r\n}\r\n\r\nfunction Declaration (thisDep, contextDep, propDep, append) {\r\n  this.thisDep = thisDep;\r\n  this.contextDep = contextDep;\r\n  this.propDep = propDep;\r\n  this.append = append;\r\n}\r\n\r\nfunction isStatic (decl) {\r\n  return decl && !(decl.thisDep || decl.contextDep || decl.propDep)\r\n}\r\n\r\nfunction createStaticDecl (append) {\r\n  return new Declaration(false, false, false, append)\r\n}\r\n\r\nfunction createDynamicDecl (dyn, append) {\r\n  var type = dyn.type;\r\n  if (type === DYN_FUNC$1) {\r\n    var numArgs = dyn.data.length;\r\n    return new Declaration(\r\n      true,\r\n      numArgs >= 1,\r\n      numArgs >= 2,\r\n      append)\r\n  } else if (type === DYN_THUNK) {\r\n    var data = dyn.data;\r\n    return new Declaration(\r\n      data.thisDep,\r\n      data.contextDep,\r\n      data.propDep,\r\n      append)\r\n  } else {\r\n    return new Declaration(\r\n      type === DYN_STATE$1,\r\n      type === DYN_CONTEXT$1,\r\n      type === DYN_PROP$1,\r\n      append)\r\n  }\r\n}\r\n\r\nvar SCOPE_DECL = new Declaration(false, false, false, function () {});\r\n\r\nfunction reglCore (\r\n  gl,\r\n  stringStore,\r\n  extensions,\r\n  limits,\r\n  bufferState,\r\n  elementState,\r\n  textureState,\r\n  framebufferState,\r\n  uniformState,\r\n  attributeState,\r\n  shaderState,\r\n  drawState,\r\n  contextState,\r\n  timer,\r\n  config) {\r\n  var AttributeRecord = attributeState.Record;\r\n\r\n  var blendEquations = {\r\n    'add': 32774,\r\n    'subtract': 32778,\r\n    'reverse subtract': 32779\r\n  };\r\n  if (extensions.ext_blend_minmax) {\r\n    blendEquations.min = GL_MIN_EXT;\r\n    blendEquations.max = GL_MAX_EXT;\r\n  }\r\n\r\n  var extInstancing = extensions.angle_instanced_arrays;\r\n  var extDrawBuffers = extensions.webgl_draw_buffers;\r\n\r\n  // ===================================================\r\n  // ===================================================\r\n  // WEBGL STATE\r\n  // ===================================================\r\n  // ===================================================\r\n  var currentState = {\r\n    dirty: true,\r\n    profile: config.profile\r\n  };\r\n  var nextState = {};\r\n  var GL_STATE_NAMES = [];\r\n  var GL_FLAGS = {};\r\n  var GL_VARIABLES = {};\r\n\r\n  function propName (name) {\r\n    return name.replace('.', '_')\r\n  }\r\n\r\n  function stateFlag (sname, cap, init) {\r\n    var name = propName(sname);\r\n    GL_STATE_NAMES.push(sname);\r\n    nextState[name] = currentState[name] = !!init;\r\n    GL_FLAGS[name] = cap;\r\n  }\r\n\r\n  function stateVariable (sname, func, init) {\r\n    var name = propName(sname);\r\n    GL_STATE_NAMES.push(sname);\r\n    if (Array.isArray(init)) {\r\n      currentState[name] = init.slice();\r\n      nextState[name] = init.slice();\r\n    } else {\r\n      currentState[name] = nextState[name] = init;\r\n    }\r\n    GL_VARIABLES[name] = func;\r\n  }\r\n\r\n  // Dithering\r\n  stateFlag(S_DITHER, GL_DITHER);\r\n\r\n  // Blending\r\n  stateFlag(S_BLEND_ENABLE, GL_BLEND);\r\n  stateVariable(S_BLEND_COLOR, 'blendColor', [0, 0, 0, 0]);\r\n  stateVariable(S_BLEND_EQUATION, 'blendEquationSeparate',\r\n    [GL_FUNC_ADD, GL_FUNC_ADD]);\r\n  stateVariable(S_BLEND_FUNC, 'blendFuncSeparate',\r\n    [GL_ONE, GL_ZERO, GL_ONE, GL_ZERO]);\r\n\r\n  // Depth\r\n  stateFlag(S_DEPTH_ENABLE, GL_DEPTH_TEST, true);\r\n  stateVariable(S_DEPTH_FUNC, 'depthFunc', GL_LESS);\r\n  stateVariable(S_DEPTH_RANGE, 'depthRange', [0, 1]);\r\n  stateVariable(S_DEPTH_MASK, 'depthMask', true);\r\n\r\n  // Color mask\r\n  stateVariable(S_COLOR_MASK, S_COLOR_MASK, [true, true, true, true]);\r\n\r\n  // Face culling\r\n  stateFlag(S_CULL_ENABLE, GL_CULL_FACE);\r\n  stateVariable(S_CULL_FACE, 'cullFace', GL_BACK);\r\n\r\n  // Front face orientation\r\n  stateVariable(S_FRONT_FACE, S_FRONT_FACE, GL_CCW);\r\n\r\n  // Line width\r\n  stateVariable(S_LINE_WIDTH, S_LINE_WIDTH, 1);\r\n\r\n  // Polygon offset\r\n  stateFlag(S_POLYGON_OFFSET_ENABLE, GL_POLYGON_OFFSET_FILL);\r\n  stateVariable(S_POLYGON_OFFSET_OFFSET, 'polygonOffset', [0, 0]);\r\n\r\n  // Sample coverage\r\n  stateFlag(S_SAMPLE_ALPHA, GL_SAMPLE_ALPHA_TO_COVERAGE);\r\n  stateFlag(S_SAMPLE_ENABLE, GL_SAMPLE_COVERAGE);\r\n  stateVariable(S_SAMPLE_COVERAGE, 'sampleCoverage', [1, false]);\r\n\r\n  // Stencil\r\n  stateFlag(S_STENCIL_ENABLE, GL_STENCIL_TEST);\r\n  stateVariable(S_STENCIL_MASK, 'stencilMask', -1);\r\n  stateVariable(S_STENCIL_FUNC, 'stencilFunc', [GL_ALWAYS, 0, -1]);\r\n  stateVariable(S_STENCIL_OPFRONT, 'stencilOpSeparate',\r\n    [GL_FRONT, GL_KEEP, GL_KEEP, GL_KEEP]);\r\n  stateVariable(S_STENCIL_OPBACK, 'stencilOpSeparate',\r\n    [GL_BACK, GL_KEEP, GL_KEEP, GL_KEEP]);\r\n\r\n  // Scissor\r\n  stateFlag(S_SCISSOR_ENABLE, GL_SCISSOR_TEST);\r\n  stateVariable(S_SCISSOR_BOX, 'scissor',\r\n    [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]);\r\n\r\n  // Viewport\r\n  stateVariable(S_VIEWPORT, S_VIEWPORT,\r\n    [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]);\r\n\r\n  // ===================================================\r\n  // ===================================================\r\n  // ENVIRONMENT\r\n  // ===================================================\r\n  // ===================================================\r\n  var sharedState = {\r\n    gl: gl,\r\n    context: contextState,\r\n    strings: stringStore,\r\n    next: nextState,\r\n    current: currentState,\r\n    draw: drawState,\r\n    elements: elementState,\r\n    buffer: bufferState,\r\n    shader: shaderState,\r\n    attributes: attributeState.state,\r\n    uniforms: uniformState,\r\n    framebuffer: framebufferState,\r\n    extensions: extensions,\r\n\r\n    timer: timer,\r\n    isBufferArgs: isBufferArgs\r\n  };\r\n\r\n  var sharedConstants = {\r\n    primTypes: primTypes,\r\n    compareFuncs: compareFuncs,\r\n    blendFuncs: blendFuncs,\r\n    blendEquations: blendEquations,\r\n    stencilOps: stencilOps,\r\n    glTypes: glTypes,\r\n    orientationType: orientationType\r\n  };\r\n\r\n  check$1.optional(function () {\r\n    sharedState.isArrayLike = isArrayLike;\r\n  });\r\n\r\n  if (extDrawBuffers) {\r\n    sharedConstants.backBuffer = [GL_BACK];\r\n    sharedConstants.drawBuffer = loop(limits.maxDrawbuffers, function (i) {\r\n      if (i === 0) {\r\n        return [0]\r\n      }\r\n      return loop(i, function (j) {\r\n        return GL_COLOR_ATTACHMENT0$2 + j\r\n      })\r\n    });\r\n  }\r\n\r\n  var drawCallCounter = 0;\r\n  function createREGLEnvironment () {\r\n    var env = createEnvironment();\r\n    var link = env.link;\r\n    var global = env.global;\r\n    env.id = drawCallCounter++;\r\n\r\n    env.batchId = '0';\r\n\r\n    // link shared state\r\n    var SHARED = link(sharedState);\r\n    var shared = env.shared = {\r\n      props: 'a0'\r\n    };\r\n    Object.keys(sharedState).forEach(function (prop) {\r\n      shared[prop] = global.def(SHARED, '.', prop);\r\n    });\r\n\r\n    // Inject runtime assertion stuff for debug builds\r\n    check$1.optional(function () {\r\n      env.CHECK = link(check$1);\r\n      env.commandStr = check$1.guessCommand();\r\n      env.command = link(env.commandStr);\r\n      env.assert = function (block, pred, message) {\r\n        block(\r\n          'if(!(', pred, '))',\r\n          this.CHECK, '.commandRaise(', link(message), ',', this.command, ');');\r\n      };\r\n\r\n      sharedConstants.invalidBlendCombinations = invalidBlendCombinations;\r\n    });\r\n\r\n    // Copy GL state variables over\r\n    var nextVars = env.next = {};\r\n    var currentVars = env.current = {};\r\n    Object.keys(GL_VARIABLES).forEach(function (variable) {\r\n      if (Array.isArray(currentState[variable])) {\r\n        nextVars[variable] = global.def(shared.next, '.', variable);\r\n        currentVars[variable] = global.def(shared.current, '.', variable);\r\n      }\r\n    });\r\n\r\n    // Initialize shared constants\r\n    var constants = env.constants = {};\r\n    Object.keys(sharedConstants).forEach(function (name) {\r\n      constants[name] = global.def(JSON.stringify(sharedConstants[name]));\r\n    });\r\n\r\n    // Helper function for calling a block\r\n    env.invoke = function (block, x) {\r\n      switch (x.type) {\r\n        case DYN_FUNC$1:\r\n          var argList = [\r\n            'this',\r\n            shared.context,\r\n            shared.props,\r\n            env.batchId\r\n          ];\r\n          return block.def(\r\n            link(x.data), '.call(',\r\n              argList.slice(0, Math.max(x.data.length + 1, 4)),\r\n             ')')\r\n        case DYN_PROP$1:\r\n          return block.def(shared.props, x.data)\r\n        case DYN_CONTEXT$1:\r\n          return block.def(shared.context, x.data)\r\n        case DYN_STATE$1:\r\n          return block.def('this', x.data)\r\n        case DYN_THUNK:\r\n          x.data.append(env, block);\r\n          return x.data.ref\r\n      }\r\n    };\r\n\r\n    env.attribCache = {};\r\n\r\n    var scopeAttribs = {};\r\n    env.scopeAttrib = function (name) {\r\n      var id = stringStore.id(name);\r\n      if (id in scopeAttribs) {\r\n        return scopeAttribs[id]\r\n      }\r\n      var binding = attributeState.scope[id];\r\n      if (!binding) {\r\n        binding = attributeState.scope[id] = new AttributeRecord();\r\n      }\r\n      var result = scopeAttribs[id] = link(binding);\r\n      return result\r\n    };\r\n\r\n    return env\r\n  }\r\n\r\n  // ===================================================\r\n  // ===================================================\r\n  // PARSING\r\n  // ===================================================\r\n  // ===================================================\r\n  function parseProfile (options) {\r\n    var staticOptions = options.static;\r\n    var dynamicOptions = options.dynamic;\r\n\r\n    var profileEnable;\r\n    if (S_PROFILE in staticOptions) {\r\n      var value = !!staticOptions[S_PROFILE];\r\n      profileEnable = createStaticDecl(function (env, scope) {\r\n        return value\r\n      });\r\n      profileEnable.enable = value;\r\n    } else if (S_PROFILE in dynamicOptions) {\r\n      var dyn = dynamicOptions[S_PROFILE];\r\n      profileEnable = createDynamicDecl(dyn, function (env, scope) {\r\n        return env.invoke(scope, dyn)\r\n      });\r\n    }\r\n\r\n    return profileEnable\r\n  }\r\n\r\n  function parseFramebuffer (options, env) {\r\n    var staticOptions = options.static;\r\n    var dynamicOptions = options.dynamic;\r\n\r\n    if (S_FRAMEBUFFER in staticOptions) {\r\n      var framebuffer = staticOptions[S_FRAMEBUFFER];\r\n      if (framebuffer) {\r\n        framebuffer = framebufferState.getFramebuffer(framebuffer);\r\n        check$1.command(framebuffer, 'invalid framebuffer object');\r\n        return createStaticDecl(function (env, block) {\r\n          var FRAMEBUFFER = env.link(framebuffer);\r\n          var shared = env.shared;\r\n          block.set(\r\n            shared.framebuffer,\r\n            '.next',\r\n            FRAMEBUFFER);\r\n          var CONTEXT = shared.context;\r\n          block.set(\r\n            CONTEXT,\r\n            '.' + S_FRAMEBUFFER_WIDTH,\r\n            FRAMEBUFFER + '.width');\r\n          block.set(\r\n            CONTEXT,\r\n            '.' + S_FRAMEBUFFER_HEIGHT,\r\n            FRAMEBUFFER + '.height');\r\n          return FRAMEBUFFER\r\n        })\r\n      } else {\r\n        return createStaticDecl(function (env, scope) {\r\n          var shared = env.shared;\r\n          scope.set(\r\n            shared.framebuffer,\r\n            '.next',\r\n            'null');\r\n          var CONTEXT = shared.context;\r\n          scope.set(\r\n            CONTEXT,\r\n            '.' + S_FRAMEBUFFER_WIDTH,\r\n            CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH);\r\n          scope.set(\r\n            CONTEXT,\r\n            '.' + S_FRAMEBUFFER_HEIGHT,\r\n            CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT);\r\n          return 'null'\r\n        })\r\n      }\r\n    } else if (S_FRAMEBUFFER in dynamicOptions) {\r\n      var dyn = dynamicOptions[S_FRAMEBUFFER];\r\n      return createDynamicDecl(dyn, function (env, scope) {\r\n        var FRAMEBUFFER_FUNC = env.invoke(scope, dyn);\r\n        var shared = env.shared;\r\n        var FRAMEBUFFER_STATE = shared.framebuffer;\r\n        var FRAMEBUFFER = scope.def(\r\n          FRAMEBUFFER_STATE, '.getFramebuffer(', FRAMEBUFFER_FUNC, ')');\r\n\r\n        check$1.optional(function () {\r\n          env.assert(scope,\r\n            '!' + FRAMEBUFFER_FUNC + '||' + FRAMEBUFFER,\r\n            'invalid framebuffer object');\r\n        });\r\n\r\n        scope.set(\r\n          FRAMEBUFFER_STATE,\r\n          '.next',\r\n          FRAMEBUFFER);\r\n        var CONTEXT = shared.context;\r\n        scope.set(\r\n          CONTEXT,\r\n          '.' + S_FRAMEBUFFER_WIDTH,\r\n          FRAMEBUFFER + '?' + FRAMEBUFFER + '.width:' +\r\n          CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH);\r\n        scope.set(\r\n          CONTEXT,\r\n          '.' + S_FRAMEBUFFER_HEIGHT,\r\n          FRAMEBUFFER +\r\n          '?' + FRAMEBUFFER + '.height:' +\r\n          CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT);\r\n        return FRAMEBUFFER\r\n      })\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  function parseViewportScissor (options, framebuffer, env) {\r\n    var staticOptions = options.static;\r\n    var dynamicOptions = options.dynamic;\r\n\r\n    function parseBox (param) {\r\n      if (param in staticOptions) {\r\n        var box = staticOptions[param];\r\n        check$1.commandType(box, 'object', 'invalid ' + param, env.commandStr);\r\n\r\n        var isStatic = true;\r\n        var x = box.x | 0;\r\n        var y = box.y | 0;\r\n        var w, h;\r\n        if ('width' in box) {\r\n          w = box.width | 0;\r\n          check$1.command(w >= 0, 'invalid ' + param, env.commandStr);\r\n        } else {\r\n          isStatic = false;\r\n        }\r\n        if ('height' in box) {\r\n          h = box.height | 0;\r\n          check$1.command(h >= 0, 'invalid ' + param, env.commandStr);\r\n        } else {\r\n          isStatic = false;\r\n        }\r\n\r\n        return new Declaration(\r\n          !isStatic && framebuffer && framebuffer.thisDep,\r\n          !isStatic && framebuffer && framebuffer.contextDep,\r\n          !isStatic && framebuffer && framebuffer.propDep,\r\n          function (env, scope) {\r\n            var CONTEXT = env.shared.context;\r\n            var BOX_W = w;\r\n            if (!('width' in box)) {\r\n              BOX_W = scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', x);\r\n            }\r\n            var BOX_H = h;\r\n            if (!('height' in box)) {\r\n              BOX_H = scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', y);\r\n            }\r\n            return [x, y, BOX_W, BOX_H]\r\n          })\r\n      } else if (param in dynamicOptions) {\r\n        var dynBox = dynamicOptions[param];\r\n        var result = createDynamicDecl(dynBox, function (env, scope) {\r\n          var BOX = env.invoke(scope, dynBox);\r\n\r\n          check$1.optional(function () {\r\n            env.assert(scope,\r\n              BOX + '&&typeof ' + BOX + '===\"object\"',\r\n              'invalid ' + param);\r\n          });\r\n\r\n          var CONTEXT = env.shared.context;\r\n          var BOX_X = scope.def(BOX, '.x|0');\r\n          var BOX_Y = scope.def(BOX, '.y|0');\r\n          var BOX_W = scope.def(\r\n            '\"width\" in ', BOX, '?', BOX, '.width|0:',\r\n            '(', CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', BOX_X, ')');\r\n          var BOX_H = scope.def(\r\n            '\"height\" in ', BOX, '?', BOX, '.height|0:',\r\n            '(', CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', BOX_Y, ')');\r\n\r\n          check$1.optional(function () {\r\n            env.assert(scope,\r\n              BOX_W + '>=0&&' +\r\n              BOX_H + '>=0',\r\n              'invalid ' + param);\r\n          });\r\n\r\n          return [BOX_X, BOX_Y, BOX_W, BOX_H]\r\n        });\r\n        if (framebuffer) {\r\n          result.thisDep = result.thisDep || framebuffer.thisDep;\r\n          result.contextDep = result.contextDep || framebuffer.contextDep;\r\n          result.propDep = result.propDep || framebuffer.propDep;\r\n        }\r\n        return result\r\n      } else if (framebuffer) {\r\n        return new Declaration(\r\n          framebuffer.thisDep,\r\n          framebuffer.contextDep,\r\n          framebuffer.propDep,\r\n          function (env, scope) {\r\n            var CONTEXT = env.shared.context;\r\n            return [\r\n              0, 0,\r\n              scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH),\r\n              scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT)]\r\n          })\r\n      } else {\r\n        return null\r\n      }\r\n    }\r\n\r\n    var viewport = parseBox(S_VIEWPORT);\r\n\r\n    if (viewport) {\r\n      var prevViewport = viewport;\r\n      viewport = new Declaration(\r\n        viewport.thisDep,\r\n        viewport.contextDep,\r\n        viewport.propDep,\r\n        function (env, scope) {\r\n          var VIEWPORT = prevViewport.append(env, scope);\r\n          var CONTEXT = env.shared.context;\r\n          scope.set(\r\n            CONTEXT,\r\n            '.' + S_VIEWPORT_WIDTH,\r\n            VIEWPORT[2]);\r\n          scope.set(\r\n            CONTEXT,\r\n            '.' + S_VIEWPORT_HEIGHT,\r\n            VIEWPORT[3]);\r\n          return VIEWPORT\r\n        });\r\n    }\r\n\r\n    return {\r\n      viewport: viewport,\r\n      scissor_box: parseBox(S_SCISSOR_BOX)\r\n    }\r\n  }\r\n\r\n  function parseProgram (options) {\r\n    var staticOptions = options.static;\r\n    var dynamicOptions = options.dynamic;\r\n\r\n    function parseShader (name) {\r\n      if (name in staticOptions) {\r\n        var id = stringStore.id(staticOptions[name]);\r\n        check$1.optional(function () {\r\n          shaderState.shader(shaderType[name], id, check$1.guessCommand());\r\n        });\r\n        var result = createStaticDecl(function () {\r\n          return id\r\n        });\r\n        result.id = id;\r\n        return result\r\n      } else if (name in dynamicOptions) {\r\n        var dyn = dynamicOptions[name];\r\n        return createDynamicDecl(dyn, function (env, scope) {\r\n          var str = env.invoke(scope, dyn);\r\n          var id = scope.def(env.shared.strings, '.id(', str, ')');\r\n          check$1.optional(function () {\r\n            scope(\r\n              env.shared.shader, '.shader(',\r\n              shaderType[name], ',',\r\n              id, ',',\r\n              env.command, ');');\r\n          });\r\n          return id\r\n        })\r\n      }\r\n      return null\r\n    }\r\n\r\n    var frag = parseShader(S_FRAG);\r\n    var vert = parseShader(S_VERT);\r\n\r\n    var program = null;\r\n    var progVar;\r\n    if (isStatic(frag) && isStatic(vert)) {\r\n      program = shaderState.program(vert.id, frag.id);\r\n      progVar = createStaticDecl(function (env, scope) {\r\n        return env.link(program)\r\n      });\r\n    } else {\r\n      progVar = new Declaration(\r\n        (frag && frag.thisDep) || (vert && vert.thisDep),\r\n        (frag && frag.contextDep) || (vert && vert.contextDep),\r\n        (frag && frag.propDep) || (vert && vert.propDep),\r\n        function (env, scope) {\r\n          var SHADER_STATE = env.shared.shader;\r\n          var fragId;\r\n          if (frag) {\r\n            fragId = frag.append(env, scope);\r\n          } else {\r\n            fragId = scope.def(SHADER_STATE, '.', S_FRAG);\r\n          }\r\n          var vertId;\r\n          if (vert) {\r\n            vertId = vert.append(env, scope);\r\n          } else {\r\n            vertId = scope.def(SHADER_STATE, '.', S_VERT);\r\n          }\r\n          var progDef = SHADER_STATE + '.program(' + vertId + ',' + fragId;\r\n          check$1.optional(function () {\r\n            progDef += ',' + env.command;\r\n          });\r\n          return scope.def(progDef + ')')\r\n        });\r\n    }\r\n\r\n    return {\r\n      frag: frag,\r\n      vert: vert,\r\n      progVar: progVar,\r\n      program: program\r\n    }\r\n  }\r\n\r\n  function parseDraw (options, env) {\r\n    var staticOptions = options.static;\r\n    var dynamicOptions = options.dynamic;\r\n\r\n    function parseElements () {\r\n      if (S_ELEMENTS in staticOptions) {\r\n        var elements = staticOptions[S_ELEMENTS];\r\n        if (isBufferArgs(elements)) {\r\n          elements = elementState.getElements(elementState.create(elements, true));\r\n        } else if (elements) {\r\n          elements = elementState.getElements(elements);\r\n          check$1.command(elements, 'invalid elements', env.commandStr);\r\n        }\r\n        var result = createStaticDecl(function (env, scope) {\r\n          if (elements) {\r\n            var result = env.link(elements);\r\n            env.ELEMENTS = result;\r\n            return result\r\n          }\r\n          env.ELEMENTS = null;\r\n          return null\r\n        });\r\n        result.value = elements;\r\n        return result\r\n      } else if (S_ELEMENTS in dynamicOptions) {\r\n        var dyn = dynamicOptions[S_ELEMENTS];\r\n        return createDynamicDecl(dyn, function (env, scope) {\r\n          var shared = env.shared;\r\n\r\n          var IS_BUFFER_ARGS = shared.isBufferArgs;\r\n          var ELEMENT_STATE = shared.elements;\r\n\r\n          var elementDefn = env.invoke(scope, dyn);\r\n          var elements = scope.def('null');\r\n          var elementStream = scope.def(IS_BUFFER_ARGS, '(', elementDefn, ')');\r\n\r\n          var ifte = env.cond(elementStream)\r\n            .then(elements, '=', ELEMENT_STATE, '.createStream(', elementDefn, ');')\r\n            .else(elements, '=', ELEMENT_STATE, '.getElements(', elementDefn, ');');\r\n\r\n          check$1.optional(function () {\r\n            env.assert(ifte.else,\r\n              '!' + elementDefn + '||' + elements,\r\n              'invalid elements');\r\n          });\r\n\r\n          scope.entry(ifte);\r\n          scope.exit(\r\n            env.cond(elementStream)\r\n              .then(ELEMENT_STATE, '.destroyStream(', elements, ');'));\r\n\r\n          env.ELEMENTS = elements;\r\n\r\n          return elements\r\n        })\r\n      }\r\n\r\n      return null\r\n    }\r\n\r\n    var elements = parseElements();\r\n\r\n    function parsePrimitive () {\r\n      if (S_PRIMITIVE in staticOptions) {\r\n        var primitive = staticOptions[S_PRIMITIVE];\r\n        check$1.commandParameter(primitive, primTypes, 'invalid primitve', env.commandStr);\r\n        return createStaticDecl(function (env, scope) {\r\n          return primTypes[primitive]\r\n        })\r\n      } else if (S_PRIMITIVE in dynamicOptions) {\r\n        var dynPrimitive = dynamicOptions[S_PRIMITIVE];\r\n        return createDynamicDecl(dynPrimitive, function (env, scope) {\r\n          var PRIM_TYPES = env.constants.primTypes;\r\n          var prim = env.invoke(scope, dynPrimitive);\r\n          check$1.optional(function () {\r\n            env.assert(scope,\r\n              prim + ' in ' + PRIM_TYPES,\r\n              'invalid primitive, must be one of ' + Object.keys(primTypes));\r\n          });\r\n          return scope.def(PRIM_TYPES, '[', prim, ']')\r\n        })\r\n      } else if (elements) {\r\n        if (isStatic(elements)) {\r\n          if (elements.value) {\r\n            return createStaticDecl(function (env, scope) {\r\n              return scope.def(env.ELEMENTS, '.primType')\r\n            })\r\n          } else {\r\n            return createStaticDecl(function () {\r\n              return GL_TRIANGLES$1\r\n            })\r\n          }\r\n        } else {\r\n          return new Declaration(\r\n            elements.thisDep,\r\n            elements.contextDep,\r\n            elements.propDep,\r\n            function (env, scope) {\r\n              var elements = env.ELEMENTS;\r\n              return scope.def(elements, '?', elements, '.primType:', GL_TRIANGLES$1)\r\n            })\r\n        }\r\n      }\r\n      return null\r\n    }\r\n\r\n    function parseParam (param, isOffset) {\r\n      if (param in staticOptions) {\r\n        var value = staticOptions[param] | 0;\r\n        check$1.command(!isOffset || value >= 0, 'invalid ' + param, env.commandStr);\r\n        return createStaticDecl(function (env, scope) {\r\n          if (isOffset) {\r\n            env.OFFSET = value;\r\n          }\r\n          return value\r\n        })\r\n      } else if (param in dynamicOptions) {\r\n        var dynValue = dynamicOptions[param];\r\n        return createDynamicDecl(dynValue, function (env, scope) {\r\n          var result = env.invoke(scope, dynValue);\r\n          if (isOffset) {\r\n            env.OFFSET = result;\r\n            check$1.optional(function () {\r\n              env.assert(scope,\r\n                result + '>=0',\r\n                'invalid ' + param);\r\n            });\r\n          }\r\n          return result\r\n        })\r\n      } else if (isOffset && elements) {\r\n        return createStaticDecl(function (env, scope) {\r\n          env.OFFSET = '0';\r\n          return 0\r\n        })\r\n      }\r\n      return null\r\n    }\r\n\r\n    var OFFSET = parseParam(S_OFFSET, true);\r\n\r\n    function parseVertCount () {\r\n      if (S_COUNT in staticOptions) {\r\n        var count = staticOptions[S_COUNT] | 0;\r\n        check$1.command(\r\n          typeof count === 'number' && count >= 0, 'invalid vertex count', env.commandStr);\r\n        return createStaticDecl(function () {\r\n          return count\r\n        })\r\n      } else if (S_COUNT in dynamicOptions) {\r\n        var dynCount = dynamicOptions[S_COUNT];\r\n        return createDynamicDecl(dynCount, function (env, scope) {\r\n          var result = env.invoke(scope, dynCount);\r\n          check$1.optional(function () {\r\n            env.assert(scope,\r\n              'typeof ' + result + '===\"number\"&&' +\r\n              result + '>=0&&' +\r\n              result + '===(' + result + '|0)',\r\n              'invalid vertex count');\r\n          });\r\n          return result\r\n        })\r\n      } else if (elements) {\r\n        if (isStatic(elements)) {\r\n          if (elements) {\r\n            if (OFFSET) {\r\n              return new Declaration(\r\n                OFFSET.thisDep,\r\n                OFFSET.contextDep,\r\n                OFFSET.propDep,\r\n                function (env, scope) {\r\n                  var result = scope.def(\r\n                    env.ELEMENTS, '.vertCount-', env.OFFSET);\r\n\r\n                  check$1.optional(function () {\r\n                    env.assert(scope,\r\n                      result + '>=0',\r\n                      'invalid vertex offset/element buffer too small');\r\n                  });\r\n\r\n                  return result\r\n                })\r\n            } else {\r\n              return createStaticDecl(function (env, scope) {\r\n                return scope.def(env.ELEMENTS, '.vertCount')\r\n              })\r\n            }\r\n          } else {\r\n            var result = createStaticDecl(function () {\r\n              return -1\r\n            });\r\n            check$1.optional(function () {\r\n              result.MISSING = true;\r\n            });\r\n            return result\r\n          }\r\n        } else {\r\n          var variable = new Declaration(\r\n            elements.thisDep || OFFSET.thisDep,\r\n            elements.contextDep || OFFSET.contextDep,\r\n            elements.propDep || OFFSET.propDep,\r\n            function (env, scope) {\r\n              var elements = env.ELEMENTS;\r\n              if (env.OFFSET) {\r\n                return scope.def(elements, '?', elements, '.vertCount-',\r\n                  env.OFFSET, ':-1')\r\n              }\r\n              return scope.def(elements, '?', elements, '.vertCount:-1')\r\n            });\r\n          check$1.optional(function () {\r\n            variable.DYNAMIC = true;\r\n          });\r\n          return variable\r\n        }\r\n      }\r\n      return null\r\n    }\r\n\r\n    return {\r\n      elements: elements,\r\n      primitive: parsePrimitive(),\r\n      count: parseVertCount(),\r\n      instances: parseParam(S_INSTANCES, false),\r\n      offset: OFFSET\r\n    }\r\n  }\r\n\r\n  function parseGLState (options, env) {\r\n    var staticOptions = options.static;\r\n    var dynamicOptions = options.dynamic;\r\n\r\n    var STATE = {};\r\n\r\n    GL_STATE_NAMES.forEach(function (prop) {\r\n      var param = propName(prop);\r\n\r\n      function parseParam (parseStatic, parseDynamic) {\r\n        if (prop in staticOptions) {\r\n          var value = parseStatic(staticOptions[prop]);\r\n          STATE[param] = createStaticDecl(function () {\r\n            return value\r\n          });\r\n        } else if (prop in dynamicOptions) {\r\n          var dyn = dynamicOptions[prop];\r\n          STATE[param] = createDynamicDecl(dyn, function (env, scope) {\r\n            return parseDynamic(env, scope, env.invoke(scope, dyn))\r\n          });\r\n        }\r\n      }\r\n\r\n      switch (prop) {\r\n        case S_CULL_ENABLE:\r\n        case S_BLEND_ENABLE:\r\n        case S_DITHER:\r\n        case S_STENCIL_ENABLE:\r\n        case S_DEPTH_ENABLE:\r\n        case S_SCISSOR_ENABLE:\r\n        case S_POLYGON_OFFSET_ENABLE:\r\n        case S_SAMPLE_ALPHA:\r\n        case S_SAMPLE_ENABLE:\r\n        case S_DEPTH_MASK:\r\n          return parseParam(\r\n            function (value) {\r\n              check$1.commandType(value, 'boolean', prop, env.commandStr);\r\n              return value\r\n            },\r\n            function (env, scope, value) {\r\n              check$1.optional(function () {\r\n                env.assert(scope,\r\n                  'typeof ' + value + '===\"boolean\"',\r\n                  'invalid flag ' + prop, env.commandStr);\r\n              });\r\n              return value\r\n            })\r\n\r\n        case S_DEPTH_FUNC:\r\n          return parseParam(\r\n            function (value) {\r\n              check$1.commandParameter(value, compareFuncs, 'invalid ' + prop, env.commandStr);\r\n              return compareFuncs[value]\r\n            },\r\n            function (env, scope, value) {\r\n              var COMPARE_FUNCS = env.constants.compareFuncs;\r\n              check$1.optional(function () {\r\n                env.assert(scope,\r\n                  value + ' in ' + COMPARE_FUNCS,\r\n                  'invalid ' + prop + ', must be one of ' + Object.keys(compareFuncs));\r\n              });\r\n              return scope.def(COMPARE_FUNCS, '[', value, ']')\r\n            })\r\n\r\n        case S_DEPTH_RANGE:\r\n          return parseParam(\r\n            function (value) {\r\n              check$1.command(\r\n                isArrayLike(value) &&\r\n                value.length === 2 &&\r\n                typeof value[0] === 'number' &&\r\n                typeof value[1] === 'number' &&\r\n                value[0] <= value[1],\r\n                'depth range is 2d array',\r\n                env.commandStr);\r\n              return value\r\n            },\r\n            function (env, scope, value) {\r\n              check$1.optional(function () {\r\n                env.assert(scope,\r\n                  env.shared.isArrayLike + '(' + value + ')&&' +\r\n                  value + '.length===2&&' +\r\n                  'typeof ' + value + '[0]===\"number\"&&' +\r\n                  'typeof ' + value + '[1]===\"number\"&&' +\r\n                  value + '[0]<=' + value + '[1]',\r\n                  'depth range must be a 2d array');\r\n              });\r\n\r\n              var Z_NEAR = scope.def('+', value, '[0]');\r\n              var Z_FAR = scope.def('+', value, '[1]');\r\n              return [Z_NEAR, Z_FAR]\r\n            })\r\n\r\n        case S_BLEND_FUNC:\r\n          return parseParam(\r\n            function (value) {\r\n              check$1.commandType(value, 'object', 'blend.func', env.commandStr);\r\n              var srcRGB = ('srcRGB' in value ? value.srcRGB : value.src);\r\n              var srcAlpha = ('srcAlpha' in value ? value.srcAlpha : value.src);\r\n              var dstRGB = ('dstRGB' in value ? value.dstRGB : value.dst);\r\n              var dstAlpha = ('dstAlpha' in value ? value.dstAlpha : value.dst);\r\n              check$1.commandParameter(srcRGB, blendFuncs, param + '.srcRGB', env.commandStr);\r\n              check$1.commandParameter(srcAlpha, blendFuncs, param + '.srcAlpha', env.commandStr);\r\n              check$1.commandParameter(dstRGB, blendFuncs, param + '.dstRGB', env.commandStr);\r\n              check$1.commandParameter(dstAlpha, blendFuncs, param + '.dstAlpha', env.commandStr);\r\n\r\n              check$1.command(\r\n                (invalidBlendCombinations.indexOf(srcRGB + ', ' + dstRGB) === -1),\r\n                'unallowed blending combination (srcRGB, dstRGB) = (' + srcRGB + ', ' + dstRGB + ')', env.commandStr);\r\n\r\n              return [\r\n                blendFuncs[srcRGB],\r\n                blendFuncs[dstRGB],\r\n                blendFuncs[srcAlpha],\r\n                blendFuncs[dstAlpha]\r\n              ]\r\n            },\r\n            function (env, scope, value) {\r\n              var BLEND_FUNCS = env.constants.blendFuncs;\r\n\r\n              check$1.optional(function () {\r\n                env.assert(scope,\r\n                  value + '&&typeof ' + value + '===\"object\"',\r\n                  'invalid blend func, must be an object');\r\n              });\r\n\r\n              function read (prefix, suffix) {\r\n                var func = scope.def(\r\n                  '\"', prefix, suffix, '\" in ', value,\r\n                  '?', value, '.', prefix, suffix,\r\n                  ':', value, '.', prefix);\r\n\r\n                check$1.optional(function () {\r\n                  env.assert(scope,\r\n                    func + ' in ' + BLEND_FUNCS,\r\n                    'invalid ' + prop + '.' + prefix + suffix + ', must be one of ' + Object.keys(blendFuncs));\r\n                });\r\n\r\n                return func\r\n              }\r\n\r\n              var srcRGB = read('src', 'RGB');\r\n              var dstRGB = read('dst', 'RGB');\r\n\r\n              check$1.optional(function () {\r\n                var INVALID_BLEND_COMBINATIONS = env.constants.invalidBlendCombinations;\r\n\r\n                env.assert(scope,\r\n                           INVALID_BLEND_COMBINATIONS +\r\n                           '.indexOf(' + srcRGB + '+\", \"+' + dstRGB + ') === -1 ',\r\n                           'unallowed blending combination for (srcRGB, dstRGB)'\r\n                          );\r\n              });\r\n\r\n              var SRC_RGB = scope.def(BLEND_FUNCS, '[', srcRGB, ']');\r\n              var SRC_ALPHA = scope.def(BLEND_FUNCS, '[', read('src', 'Alpha'), ']');\r\n              var DST_RGB = scope.def(BLEND_FUNCS, '[', dstRGB, ']');\r\n              var DST_ALPHA = scope.def(BLEND_FUNCS, '[', read('dst', 'Alpha'), ']');\r\n\r\n              return [SRC_RGB, DST_RGB, SRC_ALPHA, DST_ALPHA]\r\n            })\r\n\r\n        case S_BLEND_EQUATION:\r\n          return parseParam(\r\n            function (value) {\r\n              if (typeof value === 'string') {\r\n                check$1.commandParameter(value, blendEquations, 'invalid ' + prop, env.commandStr);\r\n                return [\r\n                  blendEquations[value],\r\n                  blendEquations[value]\r\n                ]\r\n              } else if (typeof value === 'object') {\r\n                check$1.commandParameter(\r\n                  value.rgb, blendEquations, prop + '.rgb', env.commandStr);\r\n                check$1.commandParameter(\r\n                  value.alpha, blendEquations, prop + '.alpha', env.commandStr);\r\n                return [\r\n                  blendEquations[value.rgb],\r\n                  blendEquations[value.alpha]\r\n                ]\r\n              } else {\r\n                check$1.commandRaise('invalid blend.equation', env.commandStr);\r\n              }\r\n            },\r\n            function (env, scope, value) {\r\n              var BLEND_EQUATIONS = env.constants.blendEquations;\r\n\r\n              var RGB = scope.def();\r\n              var ALPHA = scope.def();\r\n\r\n              var ifte = env.cond('typeof ', value, '===\"string\"');\r\n\r\n              check$1.optional(function () {\r\n                function checkProp (block, name, value) {\r\n                  env.assert(block,\r\n                    value + ' in ' + BLEND_EQUATIONS,\r\n                    'invalid ' + name + ', must be one of ' + Object.keys(blendEquations));\r\n                }\r\n                checkProp(ifte.then, prop, value);\r\n\r\n                env.assert(ifte.else,\r\n                  value + '&&typeof ' + value + '===\"object\"',\r\n                  'invalid ' + prop);\r\n                checkProp(ifte.else, prop + '.rgb', value + '.rgb');\r\n                checkProp(ifte.else, prop + '.alpha', value + '.alpha');\r\n              });\r\n\r\n              ifte.then(\r\n                RGB, '=', ALPHA, '=', BLEND_EQUATIONS, '[', value, '];');\r\n              ifte.else(\r\n                RGB, '=', BLEND_EQUATIONS, '[', value, '.rgb];',\r\n                ALPHA, '=', BLEND_EQUATIONS, '[', value, '.alpha];');\r\n\r\n              scope(ifte);\r\n\r\n              return [RGB, ALPHA]\r\n            })\r\n\r\n        case S_BLEND_COLOR:\r\n          return parseParam(\r\n            function (value) {\r\n              check$1.command(\r\n                isArrayLike(value) &&\r\n                value.length === 4,\r\n                'blend.color must be a 4d array', env.commandStr);\r\n              return loop(4, function (i) {\r\n                return +value[i]\r\n              })\r\n            },\r\n            function (env, scope, value) {\r\n              check$1.optional(function () {\r\n                env.assert(scope,\r\n                  env.shared.isArrayLike + '(' + value + ')&&' +\r\n                  value + '.length===4',\r\n                  'blend.color must be a 4d array');\r\n              });\r\n              return loop(4, function (i) {\r\n                return scope.def('+', value, '[', i, ']')\r\n              })\r\n            })\r\n\r\n        case S_STENCIL_MASK:\r\n          return parseParam(\r\n            function (value) {\r\n              check$1.commandType(value, 'number', param, env.commandStr);\r\n              return value | 0\r\n            },\r\n            function (env, scope, value) {\r\n              check$1.optional(function () {\r\n                env.assert(scope,\r\n                  'typeof ' + value + '===\"number\"',\r\n                  'invalid stencil.mask');\r\n              });\r\n              return scope.def(value, '|0')\r\n            })\r\n\r\n        case S_STENCIL_FUNC:\r\n          return parseParam(\r\n            function (value) {\r\n              check$1.commandType(value, 'object', param, env.commandStr);\r\n              var cmp = value.cmp || 'keep';\r\n              var ref = value.ref || 0;\r\n              var mask = 'mask' in value ? value.mask : -1;\r\n              check$1.commandParameter(cmp, compareFuncs, prop + '.cmp', env.commandStr);\r\n              check$1.commandType(ref, 'number', prop + '.ref', env.commandStr);\r\n              check$1.commandType(mask, 'number', prop + '.mask', env.commandStr);\r\n              return [\r\n                compareFuncs[cmp],\r\n                ref,\r\n                mask\r\n              ]\r\n            },\r\n            function (env, scope, value) {\r\n              var COMPARE_FUNCS = env.constants.compareFuncs;\r\n              check$1.optional(function () {\r\n                function assert () {\r\n                  env.assert(scope,\r\n                    Array.prototype.join.call(arguments, ''),\r\n                    'invalid stencil.func');\r\n                }\r\n                assert(value + '&&typeof ', value, '===\"object\"');\r\n                assert('!(\"cmp\" in ', value, ')||(',\r\n                  value, '.cmp in ', COMPARE_FUNCS, ')');\r\n              });\r\n              var cmp = scope.def(\r\n                '\"cmp\" in ', value,\r\n                '?', COMPARE_FUNCS, '[', value, '.cmp]',\r\n                ':', GL_KEEP);\r\n              var ref = scope.def(value, '.ref|0');\r\n              var mask = scope.def(\r\n                '\"mask\" in ', value,\r\n                '?', value, '.mask|0:-1');\r\n              return [cmp, ref, mask]\r\n            })\r\n\r\n        case S_STENCIL_OPFRONT:\r\n        case S_STENCIL_OPBACK:\r\n          return parseParam(\r\n            function (value) {\r\n              check$1.commandType(value, 'object', param, env.commandStr);\r\n              var fail = value.fail || 'keep';\r\n              var zfail = value.zfail || 'keep';\r\n              var zpass = value.zpass || 'keep';\r\n              check$1.commandParameter(fail, stencilOps, prop + '.fail', env.commandStr);\r\n              check$1.commandParameter(zfail, stencilOps, prop + '.zfail', env.commandStr);\r\n              check$1.commandParameter(zpass, stencilOps, prop + '.zpass', env.commandStr);\r\n              return [\r\n                prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,\r\n                stencilOps[fail],\r\n                stencilOps[zfail],\r\n                stencilOps[zpass]\r\n              ]\r\n            },\r\n            function (env, scope, value) {\r\n              var STENCIL_OPS = env.constants.stencilOps;\r\n\r\n              check$1.optional(function () {\r\n                env.assert(scope,\r\n                  value + '&&typeof ' + value + '===\"object\"',\r\n                  'invalid ' + prop);\r\n              });\r\n\r\n              function read (name) {\r\n                check$1.optional(function () {\r\n                  env.assert(scope,\r\n                    '!(\"' + name + '\" in ' + value + ')||' +\r\n                    '(' + value + '.' + name + ' in ' + STENCIL_OPS + ')',\r\n                    'invalid ' + prop + '.' + name + ', must be one of ' + Object.keys(stencilOps));\r\n                });\r\n\r\n                return scope.def(\r\n                  '\"', name, '\" in ', value,\r\n                  '?', STENCIL_OPS, '[', value, '.', name, ']:',\r\n                  GL_KEEP)\r\n              }\r\n\r\n              return [\r\n                prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,\r\n                read('fail'),\r\n                read('zfail'),\r\n                read('zpass')\r\n              ]\r\n            })\r\n\r\n        case S_POLYGON_OFFSET_OFFSET:\r\n          return parseParam(\r\n            function (value) {\r\n              check$1.commandType(value, 'object', param, env.commandStr);\r\n              var factor = value.factor | 0;\r\n              var units = value.units | 0;\r\n              check$1.commandType(factor, 'number', param + '.factor', env.commandStr);\r\n              check$1.commandType(units, 'number', param + '.units', env.commandStr);\r\n              return [factor, units]\r\n            },\r\n            function (env, scope, value) {\r\n              check$1.optional(function () {\r\n                env.assert(scope,\r\n                  value + '&&typeof ' + value + '===\"object\"',\r\n                  'invalid ' + prop);\r\n              });\r\n\r\n              var FACTOR = scope.def(value, '.factor|0');\r\n              var UNITS = scope.def(value, '.units|0');\r\n\r\n              return [FACTOR, UNITS]\r\n            })\r\n\r\n        case S_CULL_FACE:\r\n          return parseParam(\r\n            function (value) {\r\n              var face = 0;\r\n              if (value === 'front') {\r\n                face = GL_FRONT;\r\n              } else if (value === 'back') {\r\n                face = GL_BACK;\r\n              }\r\n              check$1.command(!!face, param, env.commandStr);\r\n              return face\r\n            },\r\n            function (env, scope, value) {\r\n              check$1.optional(function () {\r\n                env.assert(scope,\r\n                  value + '===\"front\"||' +\r\n                  value + '===\"back\"',\r\n                  'invalid cull.face');\r\n              });\r\n              return scope.def(value, '===\"front\"?', GL_FRONT, ':', GL_BACK)\r\n            })\r\n\r\n        case S_LINE_WIDTH:\r\n          return parseParam(\r\n            function (value) {\r\n              check$1.command(\r\n                typeof value === 'number' &&\r\n                value >= limits.lineWidthDims[0] &&\r\n                value <= limits.lineWidthDims[1],\r\n                'invalid line width, must be a positive number between ' +\r\n                limits.lineWidthDims[0] + ' and ' + limits.lineWidthDims[1], env.commandStr);\r\n              return value\r\n            },\r\n            function (env, scope, value) {\r\n              check$1.optional(function () {\r\n                env.assert(scope,\r\n                  'typeof ' + value + '===\"number\"&&' +\r\n                  value + '>=' + limits.lineWidthDims[0] + '&&' +\r\n                  value + '<=' + limits.lineWidthDims[1],\r\n                  'invalid line width');\r\n              });\r\n\r\n              return value\r\n            })\r\n\r\n        case S_FRONT_FACE:\r\n          return parseParam(\r\n            function (value) {\r\n              check$1.commandParameter(value, orientationType, param, env.commandStr);\r\n              return orientationType[value]\r\n            },\r\n            function (env, scope, value) {\r\n              check$1.optional(function () {\r\n                env.assert(scope,\r\n                  value + '===\"cw\"||' +\r\n                  value + '===\"ccw\"',\r\n                  'invalid frontFace, must be one of cw,ccw');\r\n              });\r\n              return scope.def(value + '===\"cw\"?' + GL_CW + ':' + GL_CCW)\r\n            })\r\n\r\n        case S_COLOR_MASK:\r\n          return parseParam(\r\n            function (value) {\r\n              check$1.command(\r\n                isArrayLike(value) && value.length === 4,\r\n                'color.mask must be length 4 array', env.commandStr);\r\n              return value.map(function (v) { return !!v })\r\n            },\r\n            function (env, scope, value) {\r\n              check$1.optional(function () {\r\n                env.assert(scope,\r\n                  env.shared.isArrayLike + '(' + value + ')&&' +\r\n                  value + '.length===4',\r\n                  'invalid color.mask');\r\n              });\r\n              return loop(4, function (i) {\r\n                return '!!' + value + '[' + i + ']'\r\n              })\r\n            })\r\n\r\n        case S_SAMPLE_COVERAGE:\r\n          return parseParam(\r\n            function (value) {\r\n              check$1.command(typeof value === 'object' && value, param, env.commandStr);\r\n              var sampleValue = 'value' in value ? value.value : 1;\r\n              var sampleInvert = !!value.invert;\r\n              check$1.command(\r\n                typeof sampleValue === 'number' &&\r\n                sampleValue >= 0 && sampleValue <= 1,\r\n                'sample.coverage.value must be a number between 0 and 1', env.commandStr);\r\n              return [sampleValue, sampleInvert]\r\n            },\r\n            function (env, scope, value) {\r\n              check$1.optional(function () {\r\n                env.assert(scope,\r\n                  value + '&&typeof ' + value + '===\"object\"',\r\n                  'invalid sample.coverage');\r\n              });\r\n              var VALUE = scope.def(\r\n                '\"value\" in ', value, '?+', value, '.value:1');\r\n              var INVERT = scope.def('!!', value, '.invert');\r\n              return [VALUE, INVERT]\r\n            })\r\n      }\r\n    });\r\n\r\n    return STATE\r\n  }\r\n\r\n  function parseUniforms (uniforms, env) {\r\n    var staticUniforms = uniforms.static;\r\n    var dynamicUniforms = uniforms.dynamic;\r\n\r\n    var UNIFORMS = {};\r\n\r\n    Object.keys(staticUniforms).forEach(function (name) {\r\n      var value = staticUniforms[name];\r\n      var result;\r\n      if (typeof value === 'number' ||\r\n          typeof value === 'boolean') {\r\n        result = createStaticDecl(function () {\r\n          return value\r\n        });\r\n      } else if (typeof value === 'function') {\r\n        var reglType = value._reglType;\r\n        if (reglType === 'texture2d' ||\r\n            reglType === 'textureCube') {\r\n          result = createStaticDecl(function (env) {\r\n            return env.link(value)\r\n          });\r\n        } else if (reglType === 'framebuffer' ||\r\n                   reglType === 'framebufferCube') {\r\n          check$1.command(value.color.length > 0,\r\n            'missing color attachment for framebuffer sent to uniform \"' + name + '\"', env.commandStr);\r\n          result = createStaticDecl(function (env) {\r\n            return env.link(value.color[0])\r\n          });\r\n        } else {\r\n          check$1.commandRaise('invalid data for uniform \"' + name + '\"', env.commandStr);\r\n        }\r\n      } else if (isArrayLike(value)) {\r\n        result = createStaticDecl(function (env) {\r\n          var ITEM = env.global.def('[',\r\n            loop(value.length, function (i) {\r\n              check$1.command(\r\n                typeof value[i] === 'number' ||\r\n                typeof value[i] === 'boolean',\r\n                'invalid uniform ' + name, env.commandStr);\r\n              return value[i]\r\n            }), ']');\r\n          return ITEM\r\n        });\r\n      } else {\r\n        check$1.commandRaise('invalid or missing data for uniform \"' + name + '\"', env.commandStr);\r\n      }\r\n      result.value = value;\r\n      UNIFORMS[name] = result;\r\n    });\r\n\r\n    Object.keys(dynamicUniforms).forEach(function (key) {\r\n      var dyn = dynamicUniforms[key];\r\n      UNIFORMS[key] = createDynamicDecl(dyn, function (env, scope) {\r\n        return env.invoke(scope, dyn)\r\n      });\r\n    });\r\n\r\n    return UNIFORMS\r\n  }\r\n\r\n  function parseAttributes (attributes, env) {\r\n    var staticAttributes = attributes.static;\r\n    var dynamicAttributes = attributes.dynamic;\r\n\r\n    var attributeDefs = {};\r\n\r\n    Object.keys(staticAttributes).forEach(function (attribute) {\r\n      var value = staticAttributes[attribute];\r\n      var id = stringStore.id(attribute);\r\n\r\n      var record = new AttributeRecord();\r\n      if (isBufferArgs(value)) {\r\n        record.state = ATTRIB_STATE_POINTER;\r\n        record.buffer = bufferState.getBuffer(\r\n          bufferState.create(value, GL_ARRAY_BUFFER$1, false, true));\r\n        record.type = 0;\r\n      } else {\r\n        var buffer = bufferState.getBuffer(value);\r\n        if (buffer) {\r\n          record.state = ATTRIB_STATE_POINTER;\r\n          record.buffer = buffer;\r\n          record.type = 0;\r\n        } else {\r\n          check$1.command(typeof value === 'object' && value,\r\n            'invalid data for attribute ' + attribute, env.commandStr);\r\n          if ('constant' in value) {\r\n            var constant = value.constant;\r\n            record.buffer = 'null';\r\n            record.state = ATTRIB_STATE_CONSTANT;\r\n            if (typeof constant === 'number') {\r\n              record.x = constant;\r\n            } else {\r\n              check$1.command(\r\n                isArrayLike(constant) &&\r\n                constant.length > 0 &&\r\n                constant.length <= 4,\r\n                'invalid constant for attribute ' + attribute, env.commandStr);\r\n              CUTE_COMPONENTS.forEach(function (c, i) {\r\n                if (i < constant.length) {\r\n                  record[c] = constant[i];\r\n                }\r\n              });\r\n            }\r\n          } else {\r\n            if (isBufferArgs(value.buffer)) {\r\n              buffer = bufferState.getBuffer(\r\n                bufferState.create(value.buffer, GL_ARRAY_BUFFER$1, false, true));\r\n            } else {\r\n              buffer = bufferState.getBuffer(value.buffer);\r\n            }\r\n            check$1.command(!!buffer, 'missing buffer for attribute \"' + attribute + '\"', env.commandStr);\r\n\r\n            var offset = value.offset | 0;\r\n            check$1.command(offset >= 0,\r\n              'invalid offset for attribute \"' + attribute + '\"', env.commandStr);\r\n\r\n            var stride = value.stride | 0;\r\n            check$1.command(stride >= 0 && stride < 256,\r\n              'invalid stride for attribute \"' + attribute + '\", must be integer betweeen [0, 255]', env.commandStr);\r\n\r\n            var size = value.size | 0;\r\n            check$1.command(!('size' in value) || (size > 0 && size <= 4),\r\n              'invalid size for attribute \"' + attribute + '\", must be 1,2,3,4', env.commandStr);\r\n\r\n            var normalized = !!value.normalized;\r\n\r\n            var type = 0;\r\n            if ('type' in value) {\r\n              check$1.commandParameter(\r\n                value.type, glTypes,\r\n                'invalid type for attribute ' + attribute, env.commandStr);\r\n              type = glTypes[value.type];\r\n            }\r\n\r\n            var divisor = value.divisor | 0;\r\n            if ('divisor' in value) {\r\n              check$1.command(divisor === 0 || extInstancing,\r\n                'cannot specify divisor for attribute \"' + attribute + '\", instancing not supported', env.commandStr);\r\n              check$1.command(divisor >= 0,\r\n                'invalid divisor for attribute \"' + attribute + '\"', env.commandStr);\r\n            }\r\n\r\n            check$1.optional(function () {\r\n              var command = env.commandStr;\r\n\r\n              var VALID_KEYS = [\r\n                'buffer',\r\n                'offset',\r\n                'divisor',\r\n                'normalized',\r\n                'type',\r\n                'size',\r\n                'stride'\r\n              ];\r\n\r\n              Object.keys(value).forEach(function (prop) {\r\n                check$1.command(\r\n                  VALID_KEYS.indexOf(prop) >= 0,\r\n                  'unknown parameter \"' + prop + '\" for attribute pointer \"' + attribute + '\" (valid parameters are ' + VALID_KEYS + ')',\r\n                  command);\r\n              });\r\n            });\r\n\r\n            record.buffer = buffer;\r\n            record.state = ATTRIB_STATE_POINTER;\r\n            record.size = size;\r\n            record.normalized = normalized;\r\n            record.type = type || buffer.dtype;\r\n            record.offset = offset;\r\n            record.stride = stride;\r\n            record.divisor = divisor;\r\n          }\r\n        }\r\n      }\r\n\r\n      attributeDefs[attribute] = createStaticDecl(function (env, scope) {\r\n        var cache = env.attribCache;\r\n        if (id in cache) {\r\n          return cache[id]\r\n        }\r\n        var result = {\r\n          isStream: false\r\n        };\r\n        Object.keys(record).forEach(function (key) {\r\n          result[key] = record[key];\r\n        });\r\n        if (record.buffer) {\r\n          result.buffer = env.link(record.buffer);\r\n          result.type = result.type || (result.buffer + '.dtype');\r\n        }\r\n        cache[id] = result;\r\n        return result\r\n      });\r\n    });\r\n\r\n    Object.keys(dynamicAttributes).forEach(function (attribute) {\r\n      var dyn = dynamicAttributes[attribute];\r\n\r\n      function appendAttributeCode (env, block) {\r\n        var VALUE = env.invoke(block, dyn);\r\n\r\n        var shared = env.shared;\r\n\r\n        var IS_BUFFER_ARGS = shared.isBufferArgs;\r\n        var BUFFER_STATE = shared.buffer;\r\n\r\n        // Perform validation on attribute\r\n        check$1.optional(function () {\r\n          env.assert(block,\r\n            VALUE + '&&(typeof ' + VALUE + '===\"object\"||typeof ' +\r\n            VALUE + '===\"function\")&&(' +\r\n            IS_BUFFER_ARGS + '(' + VALUE + ')||' +\r\n            BUFFER_STATE + '.getBuffer(' + VALUE + ')||' +\r\n            BUFFER_STATE + '.getBuffer(' + VALUE + '.buffer)||' +\r\n            IS_BUFFER_ARGS + '(' + VALUE + '.buffer)||' +\r\n            '(\"constant\" in ' + VALUE +\r\n            '&&(typeof ' + VALUE + '.constant===\"number\"||' +\r\n            shared.isArrayLike + '(' + VALUE + '.constant))))',\r\n            'invalid dynamic attribute \"' + attribute + '\"');\r\n        });\r\n\r\n        // allocate names for result\r\n        var result = {\r\n          isStream: block.def(false)\r\n        };\r\n        var defaultRecord = new AttributeRecord();\r\n        defaultRecord.state = ATTRIB_STATE_POINTER;\r\n        Object.keys(defaultRecord).forEach(function (key) {\r\n          result[key] = block.def('' + defaultRecord[key]);\r\n        });\r\n\r\n        var BUFFER = result.buffer;\r\n        var TYPE = result.type;\r\n        block(\r\n          'if(', IS_BUFFER_ARGS, '(', VALUE, ')){',\r\n          result.isStream, '=true;',\r\n          BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER$1, ',', VALUE, ');',\r\n          TYPE, '=', BUFFER, '.dtype;',\r\n          '}else{',\r\n          BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, ');',\r\n          'if(', BUFFER, '){',\r\n          TYPE, '=', BUFFER, '.dtype;',\r\n          '}else if(\"constant\" in ', VALUE, '){',\r\n          result.state, '=', ATTRIB_STATE_CONSTANT, ';',\r\n          'if(typeof ' + VALUE + '.constant === \"number\"){',\r\n          result[CUTE_COMPONENTS[0]], '=', VALUE, '.constant;',\r\n          CUTE_COMPONENTS.slice(1).map(function (n) {\r\n            return result[n]\r\n          }).join('='), '=0;',\r\n          '}else{',\r\n          CUTE_COMPONENTS.map(function (name, i) {\r\n            return (\r\n              result[name] + '=' + VALUE + '.constant.length>' + i +\r\n              '?' + VALUE + '.constant[' + i + ']:0;'\r\n            )\r\n          }).join(''),\r\n          '}}else{',\r\n          'if(', IS_BUFFER_ARGS, '(', VALUE, '.buffer)){',\r\n          BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER$1, ',', VALUE, '.buffer);',\r\n          '}else{',\r\n          BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, '.buffer);',\r\n          '}',\r\n          TYPE, '=\"type\" in ', VALUE, '?',\r\n          shared.glTypes, '[', VALUE, '.type]:', BUFFER, '.dtype;',\r\n          result.normalized, '=!!', VALUE, '.normalized;');\r\n        function emitReadRecord (name) {\r\n          block(result[name], '=', VALUE, '.', name, '|0;');\r\n        }\r\n        emitReadRecord('size');\r\n        emitReadRecord('offset');\r\n        emitReadRecord('stride');\r\n        emitReadRecord('divisor');\r\n\r\n        block('}}');\r\n\r\n        block.exit(\r\n          'if(', result.isStream, '){',\r\n          BUFFER_STATE, '.destroyStream(', BUFFER, ');',\r\n          '}');\r\n\r\n        return result\r\n      }\r\n\r\n      attributeDefs[attribute] = createDynamicDecl(dyn, appendAttributeCode);\r\n    });\r\n\r\n    return attributeDefs\r\n  }\r\n\r\n  function parseContext (context) {\r\n    var staticContext = context.static;\r\n    var dynamicContext = context.dynamic;\r\n    var result = {};\r\n\r\n    Object.keys(staticContext).forEach(function (name) {\r\n      var value = staticContext[name];\r\n      result[name] = createStaticDecl(function (env, scope) {\r\n        if (typeof value === 'number' || typeof value === 'boolean') {\r\n          return '' + value\r\n        } else {\r\n          return env.link(value)\r\n        }\r\n      });\r\n    });\r\n\r\n    Object.keys(dynamicContext).forEach(function (name) {\r\n      var dyn = dynamicContext[name];\r\n      result[name] = createDynamicDecl(dyn, function (env, scope) {\r\n        return env.invoke(scope, dyn)\r\n      });\r\n    });\r\n\r\n    return result\r\n  }\r\n\r\n  function parseArguments (options, attributes, uniforms, context, env) {\r\n    var staticOptions = options.static;\r\n    var dynamicOptions = options.dynamic;\r\n\r\n    check$1.optional(function () {\r\n      var KEY_NAMES = [\r\n        S_FRAMEBUFFER,\r\n        S_VERT,\r\n        S_FRAG,\r\n        S_ELEMENTS,\r\n        S_PRIMITIVE,\r\n        S_OFFSET,\r\n        S_COUNT,\r\n        S_INSTANCES,\r\n        S_PROFILE\r\n      ].concat(GL_STATE_NAMES);\r\n\r\n      function checkKeys (dict) {\r\n        Object.keys(dict).forEach(function (key) {\r\n          check$1.command(\r\n            KEY_NAMES.indexOf(key) >= 0,\r\n            'unknown parameter \"' + key + '\"',\r\n            env.commandStr);\r\n        });\r\n      }\r\n\r\n      checkKeys(staticOptions);\r\n      checkKeys(dynamicOptions);\r\n    });\r\n\r\n    var framebuffer = parseFramebuffer(options, env);\r\n    var viewportAndScissor = parseViewportScissor(options, framebuffer, env);\r\n    var draw = parseDraw(options, env);\r\n    var state = parseGLState(options, env);\r\n    var shader = parseProgram(options, env);\r\n\r\n    function copyBox (name) {\r\n      var defn = viewportAndScissor[name];\r\n      if (defn) {\r\n        state[name] = defn;\r\n      }\r\n    }\r\n    copyBox(S_VIEWPORT);\r\n    copyBox(propName(S_SCISSOR_BOX));\r\n\r\n    var dirty = Object.keys(state).length > 0;\r\n\r\n    var result = {\r\n      framebuffer: framebuffer,\r\n      draw: draw,\r\n      shader: shader,\r\n      state: state,\r\n      dirty: dirty\r\n    };\r\n\r\n    result.profile = parseProfile(options, env);\r\n    result.uniforms = parseUniforms(uniforms, env);\r\n    result.attributes = parseAttributes(attributes, env);\r\n    result.context = parseContext(context, env);\r\n    return result\r\n  }\r\n\r\n  // ===================================================\r\n  // ===================================================\r\n  // COMMON UPDATE FUNCTIONS\r\n  // ===================================================\r\n  // ===================================================\r\n  function emitContext (env, scope, context) {\r\n    var shared = env.shared;\r\n    var CONTEXT = shared.context;\r\n\r\n    var contextEnter = env.scope();\r\n\r\n    Object.keys(context).forEach(function (name) {\r\n      scope.save(CONTEXT, '.' + name);\r\n      var defn = context[name];\r\n      contextEnter(CONTEXT, '.', name, '=', defn.append(env, scope), ';');\r\n    });\r\n\r\n    scope(contextEnter);\r\n  }\r\n\r\n  // ===================================================\r\n  // ===================================================\r\n  // COMMON DRAWING FUNCTIONS\r\n  // ===================================================\r\n  // ===================================================\r\n  function emitPollFramebuffer (env, scope, framebuffer, skipCheck) {\r\n    var shared = env.shared;\r\n\r\n    var GL = shared.gl;\r\n    var FRAMEBUFFER_STATE = shared.framebuffer;\r\n    var EXT_DRAW_BUFFERS;\r\n    if (extDrawBuffers) {\r\n      EXT_DRAW_BUFFERS = scope.def(shared.extensions, '.webgl_draw_buffers');\r\n    }\r\n\r\n    var constants = env.constants;\r\n\r\n    var DRAW_BUFFERS = constants.drawBuffer;\r\n    var BACK_BUFFER = constants.backBuffer;\r\n\r\n    var NEXT;\r\n    if (framebuffer) {\r\n      NEXT = framebuffer.append(env, scope);\r\n    } else {\r\n      NEXT = scope.def(FRAMEBUFFER_STATE, '.next');\r\n    }\r\n\r\n    if (!skipCheck) {\r\n      scope('if(', NEXT, '!==', FRAMEBUFFER_STATE, '.cur){');\r\n    }\r\n    scope(\r\n      'if(', NEXT, '){',\r\n      GL, '.bindFramebuffer(', GL_FRAMEBUFFER$2, ',', NEXT, '.framebuffer);');\r\n    if (extDrawBuffers) {\r\n      scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(',\r\n        DRAW_BUFFERS, '[', NEXT, '.colorAttachments.length]);');\r\n    }\r\n    scope('}else{',\r\n      GL, '.bindFramebuffer(', GL_FRAMEBUFFER$2, ',null);');\r\n    if (extDrawBuffers) {\r\n      scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(', BACK_BUFFER, ');');\r\n    }\r\n    scope(\r\n      '}',\r\n      FRAMEBUFFER_STATE, '.cur=', NEXT, ';');\r\n    if (!skipCheck) {\r\n      scope('}');\r\n    }\r\n  }\r\n\r\n  function emitPollState (env, scope, args) {\r\n    var shared = env.shared;\r\n\r\n    var GL = shared.gl;\r\n\r\n    var CURRENT_VARS = env.current;\r\n    var NEXT_VARS = env.next;\r\n    var CURRENT_STATE = shared.current;\r\n    var NEXT_STATE = shared.next;\r\n\r\n    var block = env.cond(CURRENT_STATE, '.dirty');\r\n\r\n    GL_STATE_NAMES.forEach(function (prop) {\r\n      var param = propName(prop);\r\n      if (param in args.state) {\r\n        return\r\n      }\r\n\r\n      var NEXT, CURRENT;\r\n      if (param in NEXT_VARS) {\r\n        NEXT = NEXT_VARS[param];\r\n        CURRENT = CURRENT_VARS[param];\r\n        var parts = loop(currentState[param].length, function (i) {\r\n          return block.def(NEXT, '[', i, ']')\r\n        });\r\n        block(env.cond(parts.map(function (p, i) {\r\n          return p + '!==' + CURRENT + '[' + i + ']'\r\n        }).join('||'))\r\n          .then(\r\n            GL, '.', GL_VARIABLES[param], '(', parts, ');',\r\n            parts.map(function (p, i) {\r\n              return CURRENT + '[' + i + ']=' + p\r\n            }).join(';'), ';'));\r\n      } else {\r\n        NEXT = block.def(NEXT_STATE, '.', param);\r\n        var ifte = env.cond(NEXT, '!==', CURRENT_STATE, '.', param);\r\n        block(ifte);\r\n        if (param in GL_FLAGS) {\r\n          ifte(\r\n            env.cond(NEXT)\r\n                .then(GL, '.enable(', GL_FLAGS[param], ');')\r\n                .else(GL, '.disable(', GL_FLAGS[param], ');'),\r\n            CURRENT_STATE, '.', param, '=', NEXT, ';');\r\n        } else {\r\n          ifte(\r\n            GL, '.', GL_VARIABLES[param], '(', NEXT, ');',\r\n            CURRENT_STATE, '.', param, '=', NEXT, ';');\r\n        }\r\n      }\r\n    });\r\n    if (Object.keys(args.state).length === 0) {\r\n      block(CURRENT_STATE, '.dirty=false;');\r\n    }\r\n    scope(block);\r\n  }\r\n\r\n  function emitSetOptions (env, scope, options, filter) {\r\n    var shared = env.shared;\r\n    var CURRENT_VARS = env.current;\r\n    var CURRENT_STATE = shared.current;\r\n    var GL = shared.gl;\r\n    sortState(Object.keys(options)).forEach(function (param) {\r\n      var defn = options[param];\r\n      if (filter && !filter(defn)) {\r\n        return\r\n      }\r\n      var variable = defn.append(env, scope);\r\n      if (GL_FLAGS[param]) {\r\n        var flag = GL_FLAGS[param];\r\n        if (isStatic(defn)) {\r\n          if (variable) {\r\n            scope(GL, '.enable(', flag, ');');\r\n          } else {\r\n            scope(GL, '.disable(', flag, ');');\r\n          }\r\n        } else {\r\n          scope(env.cond(variable)\r\n            .then(GL, '.enable(', flag, ');')\r\n            .else(GL, '.disable(', flag, ');'));\r\n        }\r\n        scope(CURRENT_STATE, '.', param, '=', variable, ';');\r\n      } else if (isArrayLike(variable)) {\r\n        var CURRENT = CURRENT_VARS[param];\r\n        scope(\r\n          GL, '.', GL_VARIABLES[param], '(', variable, ');',\r\n          variable.map(function (v, i) {\r\n            return CURRENT + '[' + i + ']=' + v\r\n          }).join(';'), ';');\r\n      } else {\r\n        scope(\r\n          GL, '.', GL_VARIABLES[param], '(', variable, ');',\r\n          CURRENT_STATE, '.', param, '=', variable, ';');\r\n      }\r\n    });\r\n  }\r\n\r\n  function injectExtensions (env, scope) {\r\n    if (extInstancing) {\r\n      env.instancing = scope.def(\r\n        env.shared.extensions, '.angle_instanced_arrays');\r\n    }\r\n  }\r\n\r\n  function emitProfile (env, scope, args, useScope, incrementCounter) {\r\n    var shared = env.shared;\r\n    var STATS = env.stats;\r\n    var CURRENT_STATE = shared.current;\r\n    var TIMER = shared.timer;\r\n    var profileArg = args.profile;\r\n\r\n    function perfCounter () {\r\n      if (typeof performance === 'undefined') {\r\n        return 'Date.now()'\r\n      } else {\r\n        return 'performance.now()'\r\n      }\r\n    }\r\n\r\n    var CPU_START, QUERY_COUNTER;\r\n    function emitProfileStart (block) {\r\n      CPU_START = scope.def();\r\n      block(CPU_START, '=', perfCounter(), ';');\r\n      if (typeof incrementCounter === 'string') {\r\n        block(STATS, '.count+=', incrementCounter, ';');\r\n      } else {\r\n        block(STATS, '.count++;');\r\n      }\r\n      if (timer) {\r\n        if (useScope) {\r\n          QUERY_COUNTER = scope.def();\r\n          block(QUERY_COUNTER, '=', TIMER, '.getNumPendingQueries();');\r\n        } else {\r\n          block(TIMER, '.beginQuery(', STATS, ');');\r\n        }\r\n      }\r\n    }\r\n\r\n    function emitProfileEnd (block) {\r\n      block(STATS, '.cpuTime+=', perfCounter(), '-', CPU_START, ';');\r\n      if (timer) {\r\n        if (useScope) {\r\n          block(TIMER, '.pushScopeStats(',\r\n            QUERY_COUNTER, ',',\r\n            TIMER, '.getNumPendingQueries(),',\r\n            STATS, ');');\r\n        } else {\r\n          block(TIMER, '.endQuery();');\r\n        }\r\n      }\r\n    }\r\n\r\n    function scopeProfile (value) {\r\n      var prev = scope.def(CURRENT_STATE, '.profile');\r\n      scope(CURRENT_STATE, '.profile=', value, ';');\r\n      scope.exit(CURRENT_STATE, '.profile=', prev, ';');\r\n    }\r\n\r\n    var USE_PROFILE;\r\n    if (profileArg) {\r\n      if (isStatic(profileArg)) {\r\n        if (profileArg.enable) {\r\n          emitProfileStart(scope);\r\n          emitProfileEnd(scope.exit);\r\n          scopeProfile('true');\r\n        } else {\r\n          scopeProfile('false');\r\n        }\r\n        return\r\n      }\r\n      USE_PROFILE = profileArg.append(env, scope);\r\n      scopeProfile(USE_PROFILE);\r\n    } else {\r\n      USE_PROFILE = scope.def(CURRENT_STATE, '.profile');\r\n    }\r\n\r\n    var start = env.block();\r\n    emitProfileStart(start);\r\n    scope('if(', USE_PROFILE, '){', start, '}');\r\n    var end = env.block();\r\n    emitProfileEnd(end);\r\n    scope.exit('if(', USE_PROFILE, '){', end, '}');\r\n  }\r\n\r\n  function emitAttributes (env, scope, args, attributes, filter) {\r\n    var shared = env.shared;\r\n\r\n    function typeLength (x) {\r\n      switch (x) {\r\n        case GL_FLOAT_VEC2:\r\n        case GL_INT_VEC2:\r\n        case GL_BOOL_VEC2:\r\n          return 2\r\n        case GL_FLOAT_VEC3:\r\n        case GL_INT_VEC3:\r\n        case GL_BOOL_VEC3:\r\n          return 3\r\n        case GL_FLOAT_VEC4:\r\n        case GL_INT_VEC4:\r\n        case GL_BOOL_VEC4:\r\n          return 4\r\n        default:\r\n          return 1\r\n      }\r\n    }\r\n\r\n    function emitBindAttribute (ATTRIBUTE, size, record) {\r\n      var GL = shared.gl;\r\n\r\n      var LOCATION = scope.def(ATTRIBUTE, '.location');\r\n      var BINDING = scope.def(shared.attributes, '[', LOCATION, ']');\r\n\r\n      var STATE = record.state;\r\n      var BUFFER = record.buffer;\r\n      var CONST_COMPONENTS = [\r\n        record.x,\r\n        record.y,\r\n        record.z,\r\n        record.w\r\n      ];\r\n\r\n      var COMMON_KEYS = [\r\n        'buffer',\r\n        'normalized',\r\n        'offset',\r\n        'stride'\r\n      ];\r\n\r\n      function emitBuffer () {\r\n        scope(\r\n          'if(!', BINDING, '.buffer){',\r\n          GL, '.enableVertexAttribArray(', LOCATION, ');}');\r\n\r\n        var TYPE = record.type;\r\n        var SIZE;\r\n        if (!record.size) {\r\n          SIZE = size;\r\n        } else {\r\n          SIZE = scope.def(record.size, '||', size);\r\n        }\r\n\r\n        scope('if(',\r\n          BINDING, '.type!==', TYPE, '||',\r\n          BINDING, '.size!==', SIZE, '||',\r\n          COMMON_KEYS.map(function (key) {\r\n            return BINDING + '.' + key + '!==' + record[key]\r\n          }).join('||'),\r\n          '){',\r\n          GL, '.bindBuffer(', GL_ARRAY_BUFFER$1, ',', BUFFER, '.buffer);',\r\n          GL, '.vertexAttribPointer(', [\r\n            LOCATION,\r\n            SIZE,\r\n            TYPE,\r\n            record.normalized,\r\n            record.stride,\r\n            record.offset\r\n          ], ');',\r\n          BINDING, '.type=', TYPE, ';',\r\n          BINDING, '.size=', SIZE, ';',\r\n          COMMON_KEYS.map(function (key) {\r\n            return BINDING + '.' + key + '=' + record[key] + ';'\r\n          }).join(''),\r\n          '}');\r\n\r\n        if (extInstancing) {\r\n          var DIVISOR = record.divisor;\r\n          scope(\r\n            'if(', BINDING, '.divisor!==', DIVISOR, '){',\r\n            env.instancing, '.vertexAttribDivisorANGLE(', [LOCATION, DIVISOR], ');',\r\n            BINDING, '.divisor=', DIVISOR, ';}');\r\n        }\r\n      }\r\n\r\n      function emitConstant () {\r\n        scope(\r\n          'if(', BINDING, '.buffer){',\r\n          GL, '.disableVertexAttribArray(', LOCATION, ');',\r\n          '}if(', CUTE_COMPONENTS.map(function (c, i) {\r\n            return BINDING + '.' + c + '!==' + CONST_COMPONENTS[i]\r\n          }).join('||'), '){',\r\n          GL, '.vertexAttrib4f(', LOCATION, ',', CONST_COMPONENTS, ');',\r\n          CUTE_COMPONENTS.map(function (c, i) {\r\n            return BINDING + '.' + c + '=' + CONST_COMPONENTS[i] + ';'\r\n          }).join(''),\r\n          '}');\r\n      }\r\n\r\n      if (STATE === ATTRIB_STATE_POINTER) {\r\n        emitBuffer();\r\n      } else if (STATE === ATTRIB_STATE_CONSTANT) {\r\n        emitConstant();\r\n      } else {\r\n        scope('if(', STATE, '===', ATTRIB_STATE_POINTER, '){');\r\n        emitBuffer();\r\n        scope('}else{');\r\n        emitConstant();\r\n        scope('}');\r\n      }\r\n    }\r\n\r\n    attributes.forEach(function (attribute) {\r\n      var name = attribute.name;\r\n      var arg = args.attributes[name];\r\n      var record;\r\n      if (arg) {\r\n        if (!filter(arg)) {\r\n          return\r\n        }\r\n        record = arg.append(env, scope);\r\n      } else {\r\n        if (!filter(SCOPE_DECL)) {\r\n          return\r\n        }\r\n        var scopeAttrib = env.scopeAttrib(name);\r\n        check$1.optional(function () {\r\n          env.assert(scope,\r\n            scopeAttrib + '.state',\r\n            'missing attribute ' + name);\r\n        });\r\n        record = {};\r\n        Object.keys(new AttributeRecord()).forEach(function (key) {\r\n          record[key] = scope.def(scopeAttrib, '.', key);\r\n        });\r\n      }\r\n      emitBindAttribute(\r\n        env.link(attribute), typeLength(attribute.info.type), record);\r\n    });\r\n  }\r\n\r\n  function emitUniforms (env, scope, args, uniforms, filter) {\r\n    var shared = env.shared;\r\n    var GL = shared.gl;\r\n\r\n    var infix;\r\n    for (var i = 0; i < uniforms.length; ++i) {\r\n      var uniform = uniforms[i];\r\n      var name = uniform.name;\r\n      var type = uniform.info.type;\r\n      var arg = args.uniforms[name];\r\n      var UNIFORM = env.link(uniform);\r\n      var LOCATION = UNIFORM + '.location';\r\n\r\n      var VALUE;\r\n      if (arg) {\r\n        if (!filter(arg)) {\r\n          continue\r\n        }\r\n        if (isStatic(arg)) {\r\n          var value = arg.value;\r\n          check$1.command(\r\n            value !== null && typeof value !== 'undefined',\r\n            'missing uniform \"' + name + '\"', env.commandStr);\r\n          if (type === GL_SAMPLER_2D || type === GL_SAMPLER_CUBE) {\r\n            check$1.command(\r\n              typeof value === 'function' &&\r\n              ((type === GL_SAMPLER_2D &&\r\n                (value._reglType === 'texture2d' ||\r\n                value._reglType === 'framebuffer')) ||\r\n              (type === GL_SAMPLER_CUBE &&\r\n                (value._reglType === 'textureCube' ||\r\n                value._reglType === 'framebufferCube'))),\r\n              'invalid texture for uniform ' + name, env.commandStr);\r\n            var TEX_VALUE = env.link(value._texture || value.color[0]._texture);\r\n            scope(GL, '.uniform1i(', LOCATION, ',', TEX_VALUE + '.bind());');\r\n            scope.exit(TEX_VALUE, '.unbind();');\r\n          } else if (\r\n            type === GL_FLOAT_MAT2 ||\r\n            type === GL_FLOAT_MAT3 ||\r\n            type === GL_FLOAT_MAT4) {\r\n            check$1.optional(function () {\r\n              check$1.command(isArrayLike(value),\r\n                'invalid matrix for uniform ' + name, env.commandStr);\r\n              check$1.command(\r\n                (type === GL_FLOAT_MAT2 && value.length === 4) ||\r\n                (type === GL_FLOAT_MAT3 && value.length === 9) ||\r\n                (type === GL_FLOAT_MAT4 && value.length === 16),\r\n                'invalid length for matrix uniform ' + name, env.commandStr);\r\n            });\r\n            var MAT_VALUE = env.global.def('new Float32Array([' +\r\n              Array.prototype.slice.call(value) + '])');\r\n            var dim = 2;\r\n            if (type === GL_FLOAT_MAT3) {\r\n              dim = 3;\r\n            } else if (type === GL_FLOAT_MAT4) {\r\n              dim = 4;\r\n            }\r\n            scope(\r\n              GL, '.uniformMatrix', dim, 'fv(',\r\n              LOCATION, ',false,', MAT_VALUE, ');');\r\n          } else {\r\n            switch (type) {\r\n              case GL_FLOAT$8:\r\n                check$1.commandType(value, 'number', 'uniform ' + name, env.commandStr);\r\n                infix = '1f';\r\n                break\r\n              case GL_FLOAT_VEC2:\r\n                check$1.command(\r\n                  isArrayLike(value) && value.length === 2,\r\n                  'uniform ' + name, env.commandStr);\r\n                infix = '2f';\r\n                break\r\n              case GL_FLOAT_VEC3:\r\n                check$1.command(\r\n                  isArrayLike(value) && value.length === 3,\r\n                  'uniform ' + name, env.commandStr);\r\n                infix = '3f';\r\n                break\r\n              case GL_FLOAT_VEC4:\r\n                check$1.command(\r\n                  isArrayLike(value) && value.length === 4,\r\n                  'uniform ' + name, env.commandStr);\r\n                infix = '4f';\r\n                break\r\n              case GL_BOOL:\r\n                check$1.commandType(value, 'boolean', 'uniform ' + name, env.commandStr);\r\n                infix = '1i';\r\n                break\r\n              case GL_INT$3:\r\n                check$1.commandType(value, 'number', 'uniform ' + name, env.commandStr);\r\n                infix = '1i';\r\n                break\r\n              case GL_BOOL_VEC2:\r\n                check$1.command(\r\n                  isArrayLike(value) && value.length === 2,\r\n                  'uniform ' + name, env.commandStr);\r\n                infix = '2i';\r\n                break\r\n              case GL_INT_VEC2:\r\n                check$1.command(\r\n                  isArrayLike(value) && value.length === 2,\r\n                  'uniform ' + name, env.commandStr);\r\n                infix = '2i';\r\n                break\r\n              case GL_BOOL_VEC3:\r\n                check$1.command(\r\n                  isArrayLike(value) && value.length === 3,\r\n                  'uniform ' + name, env.commandStr);\r\n                infix = '3i';\r\n                break\r\n              case GL_INT_VEC3:\r\n                check$1.command(\r\n                  isArrayLike(value) && value.length === 3,\r\n                  'uniform ' + name, env.commandStr);\r\n                infix = '3i';\r\n                break\r\n              case GL_BOOL_VEC4:\r\n                check$1.command(\r\n                  isArrayLike(value) && value.length === 4,\r\n                  'uniform ' + name, env.commandStr);\r\n                infix = '4i';\r\n                break\r\n              case GL_INT_VEC4:\r\n                check$1.command(\r\n                  isArrayLike(value) && value.length === 4,\r\n                  'uniform ' + name, env.commandStr);\r\n                infix = '4i';\r\n                break\r\n            }\r\n            scope(GL, '.uniform', infix, '(', LOCATION, ',',\r\n              isArrayLike(value) ? Array.prototype.slice.call(value) : value,\r\n              ');');\r\n          }\r\n          continue\r\n        } else {\r\n          VALUE = arg.append(env, scope);\r\n        }\r\n      } else {\r\n        if (!filter(SCOPE_DECL)) {\r\n          continue\r\n        }\r\n        VALUE = scope.def(shared.uniforms, '[', stringStore.id(name), ']');\r\n      }\r\n\r\n      if (type === GL_SAMPLER_2D) {\r\n        scope(\r\n          'if(', VALUE, '&&', VALUE, '._reglType===\"framebuffer\"){',\r\n          VALUE, '=', VALUE, '.color[0];',\r\n          '}');\r\n      } else if (type === GL_SAMPLER_CUBE) {\r\n        scope(\r\n          'if(', VALUE, '&&', VALUE, '._reglType===\"framebufferCube\"){',\r\n          VALUE, '=', VALUE, '.color[0];',\r\n          '}');\r\n      }\r\n\r\n      // perform type validation\r\n      check$1.optional(function () {\r\n        function check (pred, message) {\r\n          env.assert(scope, pred,\r\n            'bad data or missing for uniform \"' + name + '\".  ' + message);\r\n        }\r\n\r\n        function checkType (type) {\r\n          check(\r\n            'typeof ' + VALUE + '===\"' + type + '\"',\r\n            'invalid type, expected ' + type);\r\n        }\r\n\r\n        function checkVector (n, type) {\r\n          check(\r\n            shared.isArrayLike + '(' + VALUE + ')&&' + VALUE + '.length===' + n,\r\n            'invalid vector, should have length ' + n, env.commandStr);\r\n        }\r\n\r\n        function checkTexture (target) {\r\n          check(\r\n            'typeof ' + VALUE + '===\"function\"&&' +\r\n            VALUE + '._reglType===\"texture' +\r\n            (target === GL_TEXTURE_2D$3 ? '2d' : 'Cube') + '\"',\r\n            'invalid texture type', env.commandStr);\r\n        }\r\n\r\n        switch (type) {\r\n          case GL_INT$3:\r\n            checkType('number');\r\n            break\r\n          case GL_INT_VEC2:\r\n            checkVector(2, 'number');\r\n            break\r\n          case GL_INT_VEC3:\r\n            checkVector(3, 'number');\r\n            break\r\n          case GL_INT_VEC4:\r\n            checkVector(4, 'number');\r\n            break\r\n          case GL_FLOAT$8:\r\n            checkType('number');\r\n            break\r\n          case GL_FLOAT_VEC2:\r\n            checkVector(2, 'number');\r\n            break\r\n          case GL_FLOAT_VEC3:\r\n            checkVector(3, 'number');\r\n            break\r\n          case GL_FLOAT_VEC4:\r\n            checkVector(4, 'number');\r\n            break\r\n          case GL_BOOL:\r\n            checkType('boolean');\r\n            break\r\n          case GL_BOOL_VEC2:\r\n            checkVector(2, 'boolean');\r\n            break\r\n          case GL_BOOL_VEC3:\r\n            checkVector(3, 'boolean');\r\n            break\r\n          case GL_BOOL_VEC4:\r\n            checkVector(4, 'boolean');\r\n            break\r\n          case GL_FLOAT_MAT2:\r\n            checkVector(4, 'number');\r\n            break\r\n          case GL_FLOAT_MAT3:\r\n            checkVector(9, 'number');\r\n            break\r\n          case GL_FLOAT_MAT4:\r\n            checkVector(16, 'number');\r\n            break\r\n          case GL_SAMPLER_2D:\r\n            checkTexture(GL_TEXTURE_2D$3);\r\n            break\r\n          case GL_SAMPLER_CUBE:\r\n            checkTexture(GL_TEXTURE_CUBE_MAP$2);\r\n            break\r\n        }\r\n      });\r\n\r\n      var unroll = 1;\r\n      switch (type) {\r\n        case GL_SAMPLER_2D:\r\n        case GL_SAMPLER_CUBE:\r\n          var TEX = scope.def(VALUE, '._texture');\r\n          scope(GL, '.uniform1i(', LOCATION, ',', TEX, '.bind());');\r\n          scope.exit(TEX, '.unbind();');\r\n          continue\r\n\r\n        case GL_INT$3:\r\n        case GL_BOOL:\r\n          infix = '1i';\r\n          break\r\n\r\n        case GL_INT_VEC2:\r\n        case GL_BOOL_VEC2:\r\n          infix = '2i';\r\n          unroll = 2;\r\n          break\r\n\r\n        case GL_INT_VEC3:\r\n        case GL_BOOL_VEC3:\r\n          infix = '3i';\r\n          unroll = 3;\r\n          break\r\n\r\n        case GL_INT_VEC4:\r\n        case GL_BOOL_VEC4:\r\n          infix = '4i';\r\n          unroll = 4;\r\n          break\r\n\r\n        case GL_FLOAT$8:\r\n          infix = '1f';\r\n          break\r\n\r\n        case GL_FLOAT_VEC2:\r\n          infix = '2f';\r\n          unroll = 2;\r\n          break\r\n\r\n        case GL_FLOAT_VEC3:\r\n          infix = '3f';\r\n          unroll = 3;\r\n          break\r\n\r\n        case GL_FLOAT_VEC4:\r\n          infix = '4f';\r\n          unroll = 4;\r\n          break\r\n\r\n        case GL_FLOAT_MAT2:\r\n          infix = 'Matrix2fv';\r\n          break\r\n\r\n        case GL_FLOAT_MAT3:\r\n          infix = 'Matrix3fv';\r\n          break\r\n\r\n        case GL_FLOAT_MAT4:\r\n          infix = 'Matrix4fv';\r\n          break\r\n      }\r\n\r\n      scope(GL, '.uniform', infix, '(', LOCATION, ',');\r\n      if (infix.charAt(0) === 'M') {\r\n        var matSize = Math.pow(type - GL_FLOAT_MAT2 + 2, 2);\r\n        var STORAGE = env.global.def('new Float32Array(', matSize, ')');\r\n        scope(\r\n          'false,(Array.isArray(', VALUE, ')||', VALUE, ' instanceof Float32Array)?', VALUE, ':(',\r\n          loop(matSize, function (i) {\r\n            return STORAGE + '[' + i + ']=' + VALUE + '[' + i + ']'\r\n          }), ',', STORAGE, ')');\r\n      } else if (unroll > 1) {\r\n        scope(loop(unroll, function (i) {\r\n          return VALUE + '[' + i + ']'\r\n        }));\r\n      } else {\r\n        scope(VALUE);\r\n      }\r\n      scope(');');\r\n    }\r\n  }\r\n\r\n  function emitDraw (env, outer, inner, args) {\r\n    var shared = env.shared;\r\n    var GL = shared.gl;\r\n    var DRAW_STATE = shared.draw;\r\n\r\n    var drawOptions = args.draw;\r\n\r\n    function emitElements () {\r\n      var defn = drawOptions.elements;\r\n      var ELEMENTS;\r\n      var scope = outer;\r\n      if (defn) {\r\n        if ((defn.contextDep && args.contextDynamic) || defn.propDep) {\r\n          scope = inner;\r\n        }\r\n        ELEMENTS = defn.append(env, scope);\r\n      } else {\r\n        ELEMENTS = scope.def(DRAW_STATE, '.', S_ELEMENTS);\r\n      }\r\n      if (ELEMENTS) {\r\n        scope(\r\n          'if(' + ELEMENTS + ')' +\r\n          GL + '.bindBuffer(' + GL_ELEMENT_ARRAY_BUFFER$1 + ',' + ELEMENTS + '.buffer.buffer);');\r\n      }\r\n      return ELEMENTS\r\n    }\r\n\r\n    function emitCount () {\r\n      var defn = drawOptions.count;\r\n      var COUNT;\r\n      var scope = outer;\r\n      if (defn) {\r\n        if ((defn.contextDep && args.contextDynamic) || defn.propDep) {\r\n          scope = inner;\r\n        }\r\n        COUNT = defn.append(env, scope);\r\n        check$1.optional(function () {\r\n          if (defn.MISSING) {\r\n            env.assert(outer, 'false', 'missing vertex count');\r\n          }\r\n          if (defn.DYNAMIC) {\r\n            env.assert(scope, COUNT + '>=0', 'missing vertex count');\r\n          }\r\n        });\r\n      } else {\r\n        COUNT = scope.def(DRAW_STATE, '.', S_COUNT);\r\n        check$1.optional(function () {\r\n          env.assert(scope, COUNT + '>=0', 'missing vertex count');\r\n        });\r\n      }\r\n      return COUNT\r\n    }\r\n\r\n    var ELEMENTS = emitElements();\r\n    function emitValue (name) {\r\n      var defn = drawOptions[name];\r\n      if (defn) {\r\n        if ((defn.contextDep && args.contextDynamic) || defn.propDep) {\r\n          return defn.append(env, inner)\r\n        } else {\r\n          return defn.append(env, outer)\r\n        }\r\n      } else {\r\n        return outer.def(DRAW_STATE, '.', name)\r\n      }\r\n    }\r\n\r\n    var PRIMITIVE = emitValue(S_PRIMITIVE);\r\n    var OFFSET = emitValue(S_OFFSET);\r\n\r\n    var COUNT = emitCount();\r\n    if (typeof COUNT === 'number') {\r\n      if (COUNT === 0) {\r\n        return\r\n      }\r\n    } else {\r\n      inner('if(', COUNT, '){');\r\n      inner.exit('}');\r\n    }\r\n\r\n    var INSTANCES, EXT_INSTANCING;\r\n    if (extInstancing) {\r\n      INSTANCES = emitValue(S_INSTANCES);\r\n      EXT_INSTANCING = env.instancing;\r\n    }\r\n\r\n    var ELEMENT_TYPE = ELEMENTS + '.type';\r\n\r\n    var elementsStatic = drawOptions.elements && isStatic(drawOptions.elements);\r\n\r\n    function emitInstancing () {\r\n      function drawElements () {\r\n        inner(EXT_INSTANCING, '.drawElementsInstancedANGLE(', [\r\n          PRIMITIVE,\r\n          COUNT,\r\n          ELEMENT_TYPE,\r\n          OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE$8 + ')>>1)',\r\n          INSTANCES\r\n        ], ');');\r\n      }\r\n\r\n      function drawArrays () {\r\n        inner(EXT_INSTANCING, '.drawArraysInstancedANGLE(',\r\n          [PRIMITIVE, OFFSET, COUNT, INSTANCES], ');');\r\n      }\r\n\r\n      if (ELEMENTS) {\r\n        if (!elementsStatic) {\r\n          inner('if(', ELEMENTS, '){');\r\n          drawElements();\r\n          inner('}else{');\r\n          drawArrays();\r\n          inner('}');\r\n        } else {\r\n          drawElements();\r\n        }\r\n      } else {\r\n        drawArrays();\r\n      }\r\n    }\r\n\r\n    function emitRegular () {\r\n      function drawElements () {\r\n        inner(GL + '.drawElements(' + [\r\n          PRIMITIVE,\r\n          COUNT,\r\n          ELEMENT_TYPE,\r\n          OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE$8 + ')>>1)'\r\n        ] + ');');\r\n      }\r\n\r\n      function drawArrays () {\r\n        inner(GL + '.drawArrays(' + [PRIMITIVE, OFFSET, COUNT] + ');');\r\n      }\r\n\r\n      if (ELEMENTS) {\r\n        if (!elementsStatic) {\r\n          inner('if(', ELEMENTS, '){');\r\n          drawElements();\r\n          inner('}else{');\r\n          drawArrays();\r\n          inner('}');\r\n        } else {\r\n          drawElements();\r\n        }\r\n      } else {\r\n        drawArrays();\r\n      }\r\n    }\r\n\r\n    if (extInstancing && (typeof INSTANCES !== 'number' || INSTANCES >= 0)) {\r\n      if (typeof INSTANCES === 'string') {\r\n        inner('if(', INSTANCES, '>0){');\r\n        emitInstancing();\r\n        inner('}else if(', INSTANCES, '<0){');\r\n        emitRegular();\r\n        inner('}');\r\n      } else {\r\n        emitInstancing();\r\n      }\r\n    } else {\r\n      emitRegular();\r\n    }\r\n  }\r\n\r\n  function createBody (emitBody, parentEnv, args, program, count) {\r\n    var env = createREGLEnvironment();\r\n    var scope = env.proc('body', count);\r\n    check$1.optional(function () {\r\n      env.commandStr = parentEnv.commandStr;\r\n      env.command = env.link(parentEnv.commandStr);\r\n    });\r\n    if (extInstancing) {\r\n      env.instancing = scope.def(\r\n        env.shared.extensions, '.angle_instanced_arrays');\r\n    }\r\n    emitBody(env, scope, args, program);\r\n    return env.compile().body\r\n  }\r\n\r\n  // ===================================================\r\n  // ===================================================\r\n  // DRAW PROC\r\n  // ===================================================\r\n  // ===================================================\r\n  function emitDrawBody (env, draw, args, program) {\r\n    injectExtensions(env, draw);\r\n    emitAttributes(env, draw, args, program.attributes, function () {\r\n      return true\r\n    });\r\n    emitUniforms(env, draw, args, program.uniforms, function () {\r\n      return true\r\n    });\r\n    emitDraw(env, draw, draw, args);\r\n  }\r\n\r\n  function emitDrawProc (env, args) {\r\n    var draw = env.proc('draw', 1);\r\n\r\n    injectExtensions(env, draw);\r\n\r\n    emitContext(env, draw, args.context);\r\n    emitPollFramebuffer(env, draw, args.framebuffer);\r\n\r\n    emitPollState(env, draw, args);\r\n    emitSetOptions(env, draw, args.state);\r\n\r\n    emitProfile(env, draw, args, false, true);\r\n\r\n    var program = args.shader.progVar.append(env, draw);\r\n    draw(env.shared.gl, '.useProgram(', program, '.program);');\r\n\r\n    if (args.shader.program) {\r\n      emitDrawBody(env, draw, args, args.shader.program);\r\n    } else {\r\n      var drawCache = env.global.def('{}');\r\n      var PROG_ID = draw.def(program, '.id');\r\n      var CACHED_PROC = draw.def(drawCache, '[', PROG_ID, ']');\r\n      draw(\r\n        env.cond(CACHED_PROC)\r\n          .then(CACHED_PROC, '.call(this,a0);')\r\n          .else(\r\n            CACHED_PROC, '=', drawCache, '[', PROG_ID, ']=',\r\n            env.link(function (program) {\r\n              return createBody(emitDrawBody, env, args, program, 1)\r\n            }), '(', program, ');',\r\n            CACHED_PROC, '.call(this,a0);'));\r\n    }\r\n\r\n    if (Object.keys(args.state).length > 0) {\r\n      draw(env.shared.current, '.dirty=true;');\r\n    }\r\n  }\r\n\r\n  // ===================================================\r\n  // ===================================================\r\n  // BATCH PROC\r\n  // ===================================================\r\n  // ===================================================\r\n\r\n  function emitBatchDynamicShaderBody (env, scope, args, program) {\r\n    env.batchId = 'a1';\r\n\r\n    injectExtensions(env, scope);\r\n\r\n    function all () {\r\n      return true\r\n    }\r\n\r\n    emitAttributes(env, scope, args, program.attributes, all);\r\n    emitUniforms(env, scope, args, program.uniforms, all);\r\n    emitDraw(env, scope, scope, args);\r\n  }\r\n\r\n  function emitBatchBody (env, scope, args, program) {\r\n    injectExtensions(env, scope);\r\n\r\n    var contextDynamic = args.contextDep;\r\n\r\n    var BATCH_ID = scope.def();\r\n    var PROP_LIST = 'a0';\r\n    var NUM_PROPS = 'a1';\r\n    var PROPS = scope.def();\r\n    env.shared.props = PROPS;\r\n    env.batchId = BATCH_ID;\r\n\r\n    var outer = env.scope();\r\n    var inner = env.scope();\r\n\r\n    scope(\r\n      outer.entry,\r\n      'for(', BATCH_ID, '=0;', BATCH_ID, '<', NUM_PROPS, ';++', BATCH_ID, '){',\r\n      PROPS, '=', PROP_LIST, '[', BATCH_ID, '];',\r\n      inner,\r\n      '}',\r\n      outer.exit);\r\n\r\n    function isInnerDefn (defn) {\r\n      return ((defn.contextDep && contextDynamic) || defn.propDep)\r\n    }\r\n\r\n    function isOuterDefn (defn) {\r\n      return !isInnerDefn(defn)\r\n    }\r\n\r\n    if (args.needsContext) {\r\n      emitContext(env, inner, args.context);\r\n    }\r\n    if (args.needsFramebuffer) {\r\n      emitPollFramebuffer(env, inner, args.framebuffer);\r\n    }\r\n    emitSetOptions(env, inner, args.state, isInnerDefn);\r\n\r\n    if (args.profile && isInnerDefn(args.profile)) {\r\n      emitProfile(env, inner, args, false, true);\r\n    }\r\n\r\n    if (!program) {\r\n      var progCache = env.global.def('{}');\r\n      var PROGRAM = args.shader.progVar.append(env, inner);\r\n      var PROG_ID = inner.def(PROGRAM, '.id');\r\n      var CACHED_PROC = inner.def(progCache, '[', PROG_ID, ']');\r\n      inner(\r\n        env.shared.gl, '.useProgram(', PROGRAM, '.program);',\r\n        'if(!', CACHED_PROC, '){',\r\n        CACHED_PROC, '=', progCache, '[', PROG_ID, ']=',\r\n        env.link(function (program) {\r\n          return createBody(\r\n            emitBatchDynamicShaderBody, env, args, program, 2)\r\n        }), '(', PROGRAM, ');}',\r\n        CACHED_PROC, '.call(this,a0[', BATCH_ID, '],', BATCH_ID, ');');\r\n    } else {\r\n      emitAttributes(env, outer, args, program.attributes, isOuterDefn);\r\n      emitAttributes(env, inner, args, program.attributes, isInnerDefn);\r\n      emitUniforms(env, outer, args, program.uniforms, isOuterDefn);\r\n      emitUniforms(env, inner, args, program.uniforms, isInnerDefn);\r\n      emitDraw(env, outer, inner, args);\r\n    }\r\n  }\r\n\r\n  function emitBatchProc (env, args) {\r\n    var batch = env.proc('batch', 2);\r\n    env.batchId = '0';\r\n\r\n    injectExtensions(env, batch);\r\n\r\n    // Check if any context variables depend on props\r\n    var contextDynamic = false;\r\n    var needsContext = true;\r\n    Object.keys(args.context).forEach(function (name) {\r\n      contextDynamic = contextDynamic || args.context[name].propDep;\r\n    });\r\n    if (!contextDynamic) {\r\n      emitContext(env, batch, args.context);\r\n      needsContext = false;\r\n    }\r\n\r\n    // framebuffer state affects framebufferWidth/height context vars\r\n    var framebuffer = args.framebuffer;\r\n    var needsFramebuffer = false;\r\n    if (framebuffer) {\r\n      if (framebuffer.propDep) {\r\n        contextDynamic = needsFramebuffer = true;\r\n      } else if (framebuffer.contextDep && contextDynamic) {\r\n        needsFramebuffer = true;\r\n      }\r\n      if (!needsFramebuffer) {\r\n        emitPollFramebuffer(env, batch, framebuffer);\r\n      }\r\n    } else {\r\n      emitPollFramebuffer(env, batch, null);\r\n    }\r\n\r\n    // viewport is weird because it can affect context vars\r\n    if (args.state.viewport && args.state.viewport.propDep) {\r\n      contextDynamic = true;\r\n    }\r\n\r\n    function isInnerDefn (defn) {\r\n      return (defn.contextDep && contextDynamic) || defn.propDep\r\n    }\r\n\r\n    // set webgl options\r\n    emitPollState(env, batch, args);\r\n    emitSetOptions(env, batch, args.state, function (defn) {\r\n      return !isInnerDefn(defn)\r\n    });\r\n\r\n    if (!args.profile || !isInnerDefn(args.profile)) {\r\n      emitProfile(env, batch, args, false, 'a1');\r\n    }\r\n\r\n    // Save these values to args so that the batch body routine can use them\r\n    args.contextDep = contextDynamic;\r\n    args.needsContext = needsContext;\r\n    args.needsFramebuffer = needsFramebuffer;\r\n\r\n    // determine if shader is dynamic\r\n    var progDefn = args.shader.progVar;\r\n    if ((progDefn.contextDep && contextDynamic) || progDefn.propDep) {\r\n      emitBatchBody(\r\n        env,\r\n        batch,\r\n        args,\r\n        null);\r\n    } else {\r\n      var PROGRAM = progDefn.append(env, batch);\r\n      batch(env.shared.gl, '.useProgram(', PROGRAM, '.program);');\r\n      if (args.shader.program) {\r\n        emitBatchBody(\r\n          env,\r\n          batch,\r\n          args,\r\n          args.shader.program);\r\n      } else {\r\n        var batchCache = env.global.def('{}');\r\n        var PROG_ID = batch.def(PROGRAM, '.id');\r\n        var CACHED_PROC = batch.def(batchCache, '[', PROG_ID, ']');\r\n        batch(\r\n          env.cond(CACHED_PROC)\r\n            .then(CACHED_PROC, '.call(this,a0,a1);')\r\n            .else(\r\n              CACHED_PROC, '=', batchCache, '[', PROG_ID, ']=',\r\n              env.link(function (program) {\r\n                return createBody(emitBatchBody, env, args, program, 2)\r\n              }), '(', PROGRAM, ');',\r\n              CACHED_PROC, '.call(this,a0,a1);'));\r\n      }\r\n    }\r\n\r\n    if (Object.keys(args.state).length > 0) {\r\n      batch(env.shared.current, '.dirty=true;');\r\n    }\r\n  }\r\n\r\n  // ===================================================\r\n  // ===================================================\r\n  // SCOPE COMMAND\r\n  // ===================================================\r\n  // ===================================================\r\n  function emitScopeProc (env, args) {\r\n    var scope = env.proc('scope', 3);\r\n    env.batchId = 'a2';\r\n\r\n    var shared = env.shared;\r\n    var CURRENT_STATE = shared.current;\r\n\r\n    emitContext(env, scope, args.context);\r\n\r\n    if (args.framebuffer) {\r\n      args.framebuffer.append(env, scope);\r\n    }\r\n\r\n    sortState(Object.keys(args.state)).forEach(function (name) {\r\n      var defn = args.state[name];\r\n      var value = defn.append(env, scope);\r\n      if (isArrayLike(value)) {\r\n        value.forEach(function (v, i) {\r\n          scope.set(env.next[name], '[' + i + ']', v);\r\n        });\r\n      } else {\r\n        scope.set(shared.next, '.' + name, value);\r\n      }\r\n    });\r\n\r\n    emitProfile(env, scope, args, true, true)\r\n\r\n    ;[S_ELEMENTS, S_OFFSET, S_COUNT, S_INSTANCES, S_PRIMITIVE].forEach(\r\n      function (opt) {\r\n        var variable = args.draw[opt];\r\n        if (!variable) {\r\n          return\r\n        }\r\n        scope.set(shared.draw, '.' + opt, '' + variable.append(env, scope));\r\n      });\r\n\r\n    Object.keys(args.uniforms).forEach(function (opt) {\r\n      scope.set(\r\n        shared.uniforms,\r\n        '[' + stringStore.id(opt) + ']',\r\n        args.uniforms[opt].append(env, scope));\r\n    });\r\n\r\n    Object.keys(args.attributes).forEach(function (name) {\r\n      var record = args.attributes[name].append(env, scope);\r\n      var scopeAttrib = env.scopeAttrib(name);\r\n      Object.keys(new AttributeRecord()).forEach(function (prop) {\r\n        scope.set(scopeAttrib, '.' + prop, record[prop]);\r\n      });\r\n    });\r\n\r\n    function saveShader (name) {\r\n      var shader = args.shader[name];\r\n      if (shader) {\r\n        scope.set(shared.shader, '.' + name, shader.append(env, scope));\r\n      }\r\n    }\r\n    saveShader(S_VERT);\r\n    saveShader(S_FRAG);\r\n\r\n    if (Object.keys(args.state).length > 0) {\r\n      scope(CURRENT_STATE, '.dirty=true;');\r\n      scope.exit(CURRENT_STATE, '.dirty=true;');\r\n    }\r\n\r\n    scope('a1(', env.shared.context, ',a0,', env.batchId, ');');\r\n  }\r\n\r\n  function isDynamicObject (object) {\r\n    if (typeof object !== 'object' || isArrayLike(object)) {\r\n      return\r\n    }\r\n    var props = Object.keys(object);\r\n    for (var i = 0; i < props.length; ++i) {\r\n      if (dynamic.isDynamic(object[props[i]])) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  function splatObject (env, options, name) {\r\n    var object = options.static[name];\r\n    if (!object || !isDynamicObject(object)) {\r\n      return\r\n    }\r\n\r\n    var globals = env.global;\r\n    var keys = Object.keys(object);\r\n    var thisDep = false;\r\n    var contextDep = false;\r\n    var propDep = false;\r\n    var objectRef = env.global.def('{}');\r\n    keys.forEach(function (key) {\r\n      var value = object[key];\r\n      if (dynamic.isDynamic(value)) {\r\n        if (typeof value === 'function') {\r\n          value = object[key] = dynamic.unbox(value);\r\n        }\r\n        var deps = createDynamicDecl(value, null);\r\n        thisDep = thisDep || deps.thisDep;\r\n        propDep = propDep || deps.propDep;\r\n        contextDep = contextDep || deps.contextDep;\r\n      } else {\r\n        globals(objectRef, '.', key, '=');\r\n        switch (typeof value) {\r\n          case 'number':\r\n            globals(value);\r\n            break\r\n          case 'string':\r\n            globals('\"', value, '\"');\r\n            break\r\n          case 'object':\r\n            if (Array.isArray(value)) {\r\n              globals('[', value.join(), ']');\r\n            }\r\n            break\r\n          default:\r\n            globals(env.link(value));\r\n            break\r\n        }\r\n        globals(';');\r\n      }\r\n    });\r\n\r\n    function appendBlock (env, block) {\r\n      keys.forEach(function (key) {\r\n        var value = object[key];\r\n        if (!dynamic.isDynamic(value)) {\r\n          return\r\n        }\r\n        var ref = env.invoke(block, value);\r\n        block(objectRef, '.', key, '=', ref, ';');\r\n      });\r\n    }\r\n\r\n    options.dynamic[name] = new dynamic.DynamicVariable(DYN_THUNK, {\r\n      thisDep: thisDep,\r\n      contextDep: contextDep,\r\n      propDep: propDep,\r\n      ref: objectRef,\r\n      append: appendBlock\r\n    });\r\n    delete options.static[name];\r\n  }\r\n\r\n  // ===========================================================================\r\n  // ===========================================================================\r\n  // MAIN DRAW COMMAND\r\n  // ===========================================================================\r\n  // ===========================================================================\r\n  function compileCommand (options, attributes, uniforms, context, stats) {\r\n    var env = createREGLEnvironment();\r\n\r\n    // link stats, so that we can easily access it in the program.\r\n    env.stats = env.link(stats);\r\n\r\n    // splat options and attributes to allow for dynamic nested properties\r\n    Object.keys(attributes.static).forEach(function (key) {\r\n      splatObject(env, attributes, key);\r\n    });\r\n    NESTED_OPTIONS.forEach(function (name) {\r\n      splatObject(env, options, name);\r\n    });\r\n\r\n    var args = parseArguments(options, attributes, uniforms, context, env);\r\n\r\n    emitDrawProc(env, args);\r\n    emitScopeProc(env, args);\r\n    emitBatchProc(env, args);\r\n\r\n    return env.compile()\r\n  }\r\n\r\n  // ===========================================================================\r\n  // ===========================================================================\r\n  // POLL / REFRESH\r\n  // ===========================================================================\r\n  // ===========================================================================\r\n  return {\r\n    next: nextState,\r\n    current: currentState,\r\n    procs: (function () {\r\n      var env = createREGLEnvironment();\r\n      var poll = env.proc('poll');\r\n      var refresh = env.proc('refresh');\r\n      var common = env.block();\r\n      poll(common);\r\n      refresh(common);\r\n\r\n      var shared = env.shared;\r\n      var GL = shared.gl;\r\n      var NEXT_STATE = shared.next;\r\n      var CURRENT_STATE = shared.current;\r\n\r\n      common(CURRENT_STATE, '.dirty=false;');\r\n\r\n      emitPollFramebuffer(env, poll);\r\n      emitPollFramebuffer(env, refresh, null, true);\r\n\r\n      // Refresh updates all attribute state changes\r\n      var INSTANCING;\r\n      if (extInstancing) {\r\n        INSTANCING = env.link(extInstancing);\r\n      }\r\n      for (var i = 0; i < limits.maxAttributes; ++i) {\r\n        var BINDING = refresh.def(shared.attributes, '[', i, ']');\r\n        var ifte = env.cond(BINDING, '.buffer');\r\n        ifte.then(\r\n          GL, '.enableVertexAttribArray(', i, ');',\r\n          GL, '.bindBuffer(',\r\n            GL_ARRAY_BUFFER$1, ',',\r\n            BINDING, '.buffer.buffer);',\r\n          GL, '.vertexAttribPointer(',\r\n            i, ',',\r\n            BINDING, '.size,',\r\n            BINDING, '.type,',\r\n            BINDING, '.normalized,',\r\n            BINDING, '.stride,',\r\n            BINDING, '.offset);'\r\n        ).else(\r\n          GL, '.disableVertexAttribArray(', i, ');',\r\n          GL, '.vertexAttrib4f(',\r\n            i, ',',\r\n            BINDING, '.x,',\r\n            BINDING, '.y,',\r\n            BINDING, '.z,',\r\n            BINDING, '.w);',\r\n          BINDING, '.buffer=null;');\r\n        refresh(ifte);\r\n        if (extInstancing) {\r\n          refresh(\r\n            INSTANCING, '.vertexAttribDivisorANGLE(',\r\n            i, ',',\r\n            BINDING, '.divisor);');\r\n        }\r\n      }\r\n\r\n      Object.keys(GL_FLAGS).forEach(function (flag) {\r\n        var cap = GL_FLAGS[flag];\r\n        var NEXT = common.def(NEXT_STATE, '.', flag);\r\n        var block = env.block();\r\n        block('if(', NEXT, '){',\r\n          GL, '.enable(', cap, ')}else{',\r\n          GL, '.disable(', cap, ')}',\r\n          CURRENT_STATE, '.', flag, '=', NEXT, ';');\r\n        refresh(block);\r\n        poll(\r\n          'if(', NEXT, '!==', CURRENT_STATE, '.', flag, '){',\r\n          block,\r\n          '}');\r\n      });\r\n\r\n      Object.keys(GL_VARIABLES).forEach(function (name) {\r\n        var func = GL_VARIABLES[name];\r\n        var init = currentState[name];\r\n        var NEXT, CURRENT;\r\n        var block = env.block();\r\n        block(GL, '.', func, '(');\r\n        if (isArrayLike(init)) {\r\n          var n = init.length;\r\n          NEXT = env.global.def(NEXT_STATE, '.', name);\r\n          CURRENT = env.global.def(CURRENT_STATE, '.', name);\r\n          block(\r\n            loop(n, function (i) {\r\n              return NEXT + '[' + i + ']'\r\n            }), ');',\r\n            loop(n, function (i) {\r\n              return CURRENT + '[' + i + ']=' + NEXT + '[' + i + '];'\r\n            }).join(''));\r\n          poll(\r\n            'if(', loop(n, function (i) {\r\n              return NEXT + '[' + i + ']!==' + CURRENT + '[' + i + ']'\r\n            }).join('||'), '){',\r\n            block,\r\n            '}');\r\n        } else {\r\n          NEXT = common.def(NEXT_STATE, '.', name);\r\n          CURRENT = common.def(CURRENT_STATE, '.', name);\r\n          block(\r\n            NEXT, ');',\r\n            CURRENT_STATE, '.', name, '=', NEXT, ';');\r\n          poll(\r\n            'if(', NEXT, '!==', CURRENT, '){',\r\n            block,\r\n            '}');\r\n        }\r\n        refresh(block);\r\n      });\r\n\r\n      return env.compile()\r\n    })(),\r\n    compile: compileCommand\r\n  }\r\n}\n\nfunction stats () {\r\n  return {\r\n    bufferCount: 0,\r\n    elementsCount: 0,\r\n    framebufferCount: 0,\r\n    shaderCount: 0,\r\n    textureCount: 0,\r\n    cubeCount: 0,\r\n    renderbufferCount: 0,\r\n    maxTextureUnits: 0\r\n  }\r\n}\n\nvar GL_QUERY_RESULT_EXT = 0x8866;\r\nvar GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867;\r\nvar GL_TIME_ELAPSED_EXT = 0x88BF;\r\n\r\nvar createTimer = function (gl, extensions) {\r\n  if (!extensions.ext_disjoint_timer_query) {\r\n    return null\r\n  }\r\n\r\n  // QUERY POOL BEGIN\r\n  var queryPool = [];\r\n  function allocQuery () {\r\n    return queryPool.pop() || extensions.ext_disjoint_timer_query.createQueryEXT()\r\n  }\r\n  function freeQuery (query) {\r\n    queryPool.push(query);\r\n  }\r\n  // QUERY POOL END\r\n\r\n  var pendingQueries = [];\r\n  function beginQuery (stats) {\r\n    var query = allocQuery();\r\n    extensions.ext_disjoint_timer_query.beginQueryEXT(GL_TIME_ELAPSED_EXT, query);\r\n    pendingQueries.push(query);\r\n    pushScopeStats(pendingQueries.length - 1, pendingQueries.length, stats);\r\n  }\r\n\r\n  function endQuery () {\r\n    extensions.ext_disjoint_timer_query.endQueryEXT(GL_TIME_ELAPSED_EXT);\r\n  }\r\n\r\n  //\r\n  // Pending stats pool.\r\n  //\r\n  function PendingStats () {\r\n    this.startQueryIndex = -1;\r\n    this.endQueryIndex = -1;\r\n    this.sum = 0;\r\n    this.stats = null;\r\n  }\r\n  var pendingStatsPool = [];\r\n  function allocPendingStats () {\r\n    return pendingStatsPool.pop() || new PendingStats()\r\n  }\r\n  function freePendingStats (pendingStats) {\r\n    pendingStatsPool.push(pendingStats);\r\n  }\r\n  // Pending stats pool end\r\n\r\n  var pendingStats = [];\r\n  function pushScopeStats (start, end, stats) {\r\n    var ps = allocPendingStats();\r\n    ps.startQueryIndex = start;\r\n    ps.endQueryIndex = end;\r\n    ps.sum = 0;\r\n    ps.stats = stats;\r\n    pendingStats.push(ps);\r\n  }\r\n\r\n  // we should call this at the beginning of the frame,\r\n  // in order to update gpuTime\r\n  var timeSum = [];\r\n  var queryPtr = [];\r\n  function update () {\r\n    var ptr, i;\r\n\r\n    var n = pendingQueries.length;\r\n    if (n === 0) {\r\n      return\r\n    }\r\n\r\n    // Reserve space\r\n    queryPtr.length = Math.max(queryPtr.length, n + 1);\r\n    timeSum.length = Math.max(timeSum.length, n + 1);\r\n    timeSum[0] = 0;\r\n    queryPtr[0] = 0;\r\n\r\n    // Update all pending timer queries\r\n    var queryTime = 0;\r\n    ptr = 0;\r\n    for (i = 0; i < pendingQueries.length; ++i) {\r\n      var query = pendingQueries[i];\r\n      if (extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_AVAILABLE_EXT)) {\r\n        queryTime += extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_EXT);\r\n        freeQuery(query);\r\n      } else {\r\n        pendingQueries[ptr++] = query;\r\n      }\r\n      timeSum[i + 1] = queryTime;\r\n      queryPtr[i + 1] = ptr;\r\n    }\r\n    pendingQueries.length = ptr;\r\n\r\n    // Update all pending stat queries\r\n    ptr = 0;\r\n    for (i = 0; i < pendingStats.length; ++i) {\r\n      var stats = pendingStats[i];\r\n      var start = stats.startQueryIndex;\r\n      var end = stats.endQueryIndex;\r\n      stats.sum += timeSum[end] - timeSum[start];\r\n      var startPtr = queryPtr[start];\r\n      var endPtr = queryPtr[end];\r\n      if (endPtr === startPtr) {\r\n        stats.stats.gpuTime += stats.sum / 1e6;\r\n        freePendingStats(stats);\r\n      } else {\r\n        stats.startQueryIndex = startPtr;\r\n        stats.endQueryIndex = endPtr;\r\n        pendingStats[ptr++] = stats;\r\n      }\r\n    }\r\n    pendingStats.length = ptr;\r\n  }\r\n\r\n  return {\r\n    beginQuery: beginQuery,\r\n    endQuery: endQuery,\r\n    pushScopeStats: pushScopeStats,\r\n    update: update,\r\n    getNumPendingQueries: function () {\r\n      return pendingQueries.length\r\n    },\r\n    clear: function () {\r\n      queryPool.push.apply(queryPool, pendingQueries);\r\n      for (var i = 0; i < queryPool.length; i++) {\r\n        extensions.ext_disjoint_timer_query.deleteQueryEXT(queryPool[i]);\r\n      }\r\n      pendingQueries.length = 0;\r\n      queryPool.length = 0;\r\n    },\r\n    restore: function () {\r\n      pendingQueries.length = 0;\r\n      queryPool.length = 0;\r\n    }\r\n  }\r\n};\n\nvar GL_COLOR_BUFFER_BIT = 16384;\r\nvar GL_DEPTH_BUFFER_BIT = 256;\r\nvar GL_STENCIL_BUFFER_BIT = 1024;\r\n\r\nvar GL_ARRAY_BUFFER = 34962;\r\n\r\nvar CONTEXT_LOST_EVENT = 'webglcontextlost';\r\nvar CONTEXT_RESTORED_EVENT = 'webglcontextrestored';\r\n\r\nvar DYN_PROP = 1;\r\nvar DYN_CONTEXT = 2;\r\nvar DYN_STATE = 3;\r\n\r\nfunction find (haystack, needle) {\r\n  for (var i = 0; i < haystack.length; ++i) {\r\n    if (haystack[i] === needle) {\r\n      return i\r\n    }\r\n  }\r\n  return -1\r\n}\r\n\r\nfunction wrapREGL (args) {\r\n  var config = parseArgs(args);\r\n  if (!config) {\r\n    return null\r\n  }\r\n\r\n  var gl = config.gl;\r\n  var glAttributes = gl.getContextAttributes();\r\n  var contextLost = gl.isContextLost();\r\n\r\n  var extensionState = createExtensionCache(gl, config);\r\n  if (!extensionState) {\r\n    return null\r\n  }\r\n\r\n  var stringStore = createStringStore();\r\n  var stats$$1 = stats();\r\n  var extensions = extensionState.extensions;\r\n  var timer = createTimer(gl, extensions);\r\n\r\n  var START_TIME = clock();\r\n  var WIDTH = gl.drawingBufferWidth;\r\n  var HEIGHT = gl.drawingBufferHeight;\r\n\r\n  var contextState = {\r\n    tick: 0,\r\n    time: 0,\r\n    viewportWidth: WIDTH,\r\n    viewportHeight: HEIGHT,\r\n    framebufferWidth: WIDTH,\r\n    framebufferHeight: HEIGHT,\r\n    drawingBufferWidth: WIDTH,\r\n    drawingBufferHeight: HEIGHT,\r\n    pixelRatio: config.pixelRatio\r\n  };\r\n  var uniformState = {};\r\n  var drawState = {\r\n    elements: null,\r\n    primitive: 4, // GL_TRIANGLES\r\n    count: -1,\r\n    offset: 0,\r\n    instances: -1\r\n  };\r\n\r\n  var limits = wrapLimits(gl, extensions);\r\n  var attributeState = wrapAttributeState(\r\n    gl,\r\n    extensions,\r\n    limits,\r\n    stringStore);\r\n  var bufferState = wrapBufferState(\r\n    gl,\r\n    stats$$1,\r\n    config,\r\n    attributeState);\r\n  var elementState = wrapElementsState(gl, extensions, bufferState, stats$$1);\r\n  var shaderState = wrapShaderState(gl, stringStore, stats$$1, config);\r\n  var textureState = createTextureSet(\r\n    gl,\r\n    extensions,\r\n    limits,\r\n    function () { core.procs.poll(); },\r\n    contextState,\r\n    stats$$1,\r\n    config);\r\n  var renderbufferState = wrapRenderbuffers(gl, extensions, limits, stats$$1, config);\r\n  var framebufferState = wrapFBOState(\r\n    gl,\r\n    extensions,\r\n    limits,\r\n    textureState,\r\n    renderbufferState,\r\n    stats$$1);\r\n  var core = reglCore(\r\n    gl,\r\n    stringStore,\r\n    extensions,\r\n    limits,\r\n    bufferState,\r\n    elementState,\r\n    textureState,\r\n    framebufferState,\r\n    uniformState,\r\n    attributeState,\r\n    shaderState,\r\n    drawState,\r\n    contextState,\r\n    timer,\r\n    config);\r\n  var readPixels = wrapReadPixels(\r\n    gl,\r\n    framebufferState,\r\n    core.procs.poll,\r\n    contextState,\r\n    glAttributes, extensions, limits);\r\n\r\n  var nextState = core.next;\r\n  var canvas = gl.canvas;\r\n\r\n  var rafCallbacks = [];\r\n  var lossCallbacks = [];\r\n  var restoreCallbacks = [];\r\n  var destroyCallbacks = [config.onDestroy];\r\n\r\n  var activeRAF = null;\r\n  function handleRAF () {\r\n    if (rafCallbacks.length === 0) {\r\n      if (timer) {\r\n        timer.update();\r\n      }\r\n      activeRAF = null;\r\n      return\r\n    }\r\n\r\n    // schedule next animation frame\r\n    activeRAF = raf.next(handleRAF);\r\n\r\n    // poll for changes\r\n    poll();\r\n\r\n    // fire a callback for all pending rafs\r\n    for (var i = rafCallbacks.length - 1; i >= 0; --i) {\r\n      var cb = rafCallbacks[i];\r\n      if (cb) {\r\n        cb(contextState, null, 0);\r\n      }\r\n    }\r\n\r\n    // flush all pending webgl calls\r\n    gl.flush();\r\n\r\n    // poll GPU timers *after* gl.flush so we don't delay command dispatch\r\n    if (timer) {\r\n      timer.update();\r\n    }\r\n  }\r\n\r\n  function startRAF () {\r\n    if (!activeRAF && rafCallbacks.length > 0) {\r\n      activeRAF = raf.next(handleRAF);\r\n    }\r\n  }\r\n\r\n  function stopRAF () {\r\n    if (activeRAF) {\r\n      raf.cancel(handleRAF);\r\n      activeRAF = null;\r\n    }\r\n  }\r\n\r\n  function handleContextLoss (event) {\r\n    event.preventDefault();\r\n\r\n    // set context lost flag\r\n    contextLost = true;\r\n\r\n    // pause request animation frame\r\n    stopRAF();\r\n\r\n    // lose context\r\n    lossCallbacks.forEach(function (cb) {\r\n      cb();\r\n    });\r\n  }\r\n\r\n  function handleContextRestored (event) {\r\n    // clear error code\r\n    gl.getError();\r\n\r\n    // clear context lost flag\r\n    contextLost = false;\r\n\r\n    // refresh state\r\n    extensionState.restore();\r\n    shaderState.restore();\r\n    bufferState.restore();\r\n    textureState.restore();\r\n    renderbufferState.restore();\r\n    framebufferState.restore();\r\n    if (timer) {\r\n      timer.restore();\r\n    }\r\n\r\n    // refresh state\r\n    core.procs.refresh();\r\n\r\n    // restart RAF\r\n    startRAF();\r\n\r\n    // restore context\r\n    restoreCallbacks.forEach(function (cb) {\r\n      cb();\r\n    });\r\n  }\r\n\r\n  if (canvas) {\r\n    canvas.addEventListener(CONTEXT_LOST_EVENT, handleContextLoss, false);\r\n    canvas.addEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored, false);\r\n  }\r\n\r\n  function destroy () {\r\n    rafCallbacks.length = 0;\r\n    stopRAF();\r\n\r\n    if (canvas) {\r\n      canvas.removeEventListener(CONTEXT_LOST_EVENT, handleContextLoss);\r\n      canvas.removeEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored);\r\n    }\r\n\r\n    shaderState.clear();\r\n    framebufferState.clear();\r\n    renderbufferState.clear();\r\n    textureState.clear();\r\n    elementState.clear();\r\n    bufferState.clear();\r\n\r\n    if (timer) {\r\n      timer.clear();\r\n    }\r\n\r\n    destroyCallbacks.forEach(function (cb) {\r\n      cb();\r\n    });\r\n  }\r\n\r\n  function compileProcedure (options) {\r\n    check$1(!!options, 'invalid args to regl({...})');\r\n    check$1.type(options, 'object', 'invalid args to regl({...})');\r\n\r\n    function flattenNestedOptions (options) {\r\n      var result = extend({}, options);\r\n      delete result.uniforms;\r\n      delete result.attributes;\r\n      delete result.context;\r\n\r\n      if ('stencil' in result && result.stencil.op) {\r\n        result.stencil.opBack = result.stencil.opFront = result.stencil.op;\r\n        delete result.stencil.op;\r\n      }\r\n\r\n      function merge (name) {\r\n        if (name in result) {\r\n          var child = result[name];\r\n          delete result[name];\r\n          Object.keys(child).forEach(function (prop) {\r\n            result[name + '.' + prop] = child[prop];\r\n          });\r\n        }\r\n      }\r\n      merge('blend');\r\n      merge('depth');\r\n      merge('cull');\r\n      merge('stencil');\r\n      merge('polygonOffset');\r\n      merge('scissor');\r\n      merge('sample');\r\n\r\n      return result\r\n    }\r\n\r\n    function separateDynamic (object) {\r\n      var staticItems = {};\r\n      var dynamicItems = {};\r\n      Object.keys(object).forEach(function (option) {\r\n        var value = object[option];\r\n        if (dynamic.isDynamic(value)) {\r\n          dynamicItems[option] = dynamic.unbox(value, option);\r\n        } else {\r\n          staticItems[option] = value;\r\n        }\r\n      });\r\n      return {\r\n        dynamic: dynamicItems,\r\n        static: staticItems\r\n      }\r\n    }\r\n\r\n    // Treat context variables separate from other dynamic variables\r\n    var context = separateDynamic(options.context || {});\r\n    var uniforms = separateDynamic(options.uniforms || {});\r\n    var attributes = separateDynamic(options.attributes || {});\r\n    var opts = separateDynamic(flattenNestedOptions(options));\r\n\r\n    var stats$$1 = {\r\n      gpuTime: 0.0,\r\n      cpuTime: 0.0,\r\n      count: 0\r\n    };\r\n\r\n    var compiled = core.compile(opts, attributes, uniforms, context, stats$$1);\r\n\r\n    var draw = compiled.draw;\r\n    var batch = compiled.batch;\r\n    var scope = compiled.scope;\r\n\r\n    // FIXME: we should modify code generation for batch commands so this\r\n    // isn't necessary\r\n    var EMPTY_ARRAY = [];\r\n    function reserve (count) {\r\n      while (EMPTY_ARRAY.length < count) {\r\n        EMPTY_ARRAY.push(null);\r\n      }\r\n      return EMPTY_ARRAY\r\n    }\r\n\r\n    function REGLCommand (args, body) {\r\n      var i;\r\n      if (contextLost) {\r\n        check$1.raise('context lost');\r\n      }\r\n      if (typeof args === 'function') {\r\n        return scope.call(this, null, args, 0)\r\n      } else if (typeof body === 'function') {\r\n        if (typeof args === 'number') {\r\n          for (i = 0; i < args; ++i) {\r\n            scope.call(this, null, body, i);\r\n          }\r\n          return\r\n        } else if (Array.isArray(args)) {\r\n          for (i = 0; i < args.length; ++i) {\r\n            scope.call(this, args[i], body, i);\r\n          }\r\n          return\r\n        } else {\r\n          return scope.call(this, args, body, 0)\r\n        }\r\n      } else if (typeof args === 'number') {\r\n        if (args > 0) {\r\n          return batch.call(this, reserve(args | 0), args | 0)\r\n        }\r\n      } else if (Array.isArray(args)) {\r\n        if (args.length) {\r\n          return batch.call(this, args, args.length)\r\n        }\r\n      } else {\r\n        return draw.call(this, args)\r\n      }\r\n    }\r\n\r\n    return extend(REGLCommand, {\r\n      stats: stats$$1\r\n    })\r\n  }\r\n\r\n  var setFBO = framebufferState.setFBO = compileProcedure({\r\n    framebuffer: dynamic.define.call(null, DYN_PROP, 'framebuffer')\r\n  });\r\n\r\n  function clearImpl (_, options) {\r\n    var clearFlags = 0;\r\n    core.procs.poll();\r\n\r\n    var c = options.color;\r\n    if (c) {\r\n      gl.clearColor(+c[0] || 0, +c[1] || 0, +c[2] || 0, +c[3] || 0);\r\n      clearFlags |= GL_COLOR_BUFFER_BIT;\r\n    }\r\n    if ('depth' in options) {\r\n      gl.clearDepth(+options.depth);\r\n      clearFlags |= GL_DEPTH_BUFFER_BIT;\r\n    }\r\n    if ('stencil' in options) {\r\n      gl.clearStencil(options.stencil | 0);\r\n      clearFlags |= GL_STENCIL_BUFFER_BIT;\r\n    }\r\n\r\n    check$1(!!clearFlags, 'called regl.clear with no buffer specified');\r\n    gl.clear(clearFlags);\r\n  }\r\n\r\n  function clear (options) {\r\n    check$1(\r\n      typeof options === 'object' && options,\r\n      'regl.clear() takes an object as input');\r\n    if ('framebuffer' in options) {\r\n      if (options.framebuffer &&\r\n          options.framebuffer_reglType === 'framebufferCube') {\r\n        for (var i = 0; i < 6; ++i) {\r\n          setFBO(extend({\r\n            framebuffer: options.framebuffer.faces[i]\r\n          }, options), clearImpl);\r\n        }\r\n      } else {\r\n        setFBO(options, clearImpl);\r\n      }\r\n    } else {\r\n      clearImpl(null, options);\r\n    }\r\n  }\r\n\r\n  function frame (cb) {\r\n    check$1.type(cb, 'function', 'regl.frame() callback must be a function');\r\n    rafCallbacks.push(cb);\r\n\r\n    function cancel () {\r\n      // FIXME:  should we check something other than equals cb here?\r\n      // what if a user calls frame twice with the same callback...\r\n      //\r\n      var i = find(rafCallbacks, cb);\r\n      check$1(i >= 0, 'cannot cancel a frame twice');\r\n      function pendingCancel () {\r\n        var index = find(rafCallbacks, pendingCancel);\r\n        rafCallbacks[index] = rafCallbacks[rafCallbacks.length - 1];\r\n        rafCallbacks.length -= 1;\r\n        if (rafCallbacks.length <= 0) {\r\n          stopRAF();\r\n        }\r\n      }\r\n      rafCallbacks[i] = pendingCancel;\r\n    }\r\n\r\n    startRAF();\r\n\r\n    return {\r\n      cancel: cancel\r\n    }\r\n  }\r\n\r\n  // poll viewport\r\n  function pollViewport () {\r\n    var viewport = nextState.viewport;\r\n    var scissorBox = nextState.scissor_box;\r\n    viewport[0] = viewport[1] = scissorBox[0] = scissorBox[1] = 0;\r\n    contextState.viewportWidth =\r\n      contextState.framebufferWidth =\r\n      contextState.drawingBufferWidth =\r\n      viewport[2] =\r\n      scissorBox[2] = gl.drawingBufferWidth;\r\n    contextState.viewportHeight =\r\n      contextState.framebufferHeight =\r\n      contextState.drawingBufferHeight =\r\n      viewport[3] =\r\n      scissorBox[3] = gl.drawingBufferHeight;\r\n  }\r\n\r\n  function poll () {\r\n    contextState.tick += 1;\r\n    contextState.time = now();\r\n    pollViewport();\r\n    core.procs.poll();\r\n  }\r\n\r\n  function refresh () {\r\n    pollViewport();\r\n    core.procs.refresh();\r\n    if (timer) {\r\n      timer.update();\r\n    }\r\n  }\r\n\r\n  function now () {\r\n    return (clock() - START_TIME) / 1000.0\r\n  }\r\n\r\n  refresh();\r\n\r\n  function addListener (event, callback) {\r\n    check$1.type(callback, 'function', 'listener callback must be a function');\r\n\r\n    var callbacks;\r\n    switch (event) {\r\n      case 'frame':\r\n        return frame(callback)\r\n      case 'lost':\r\n        callbacks = lossCallbacks;\r\n        break\r\n      case 'restore':\r\n        callbacks = restoreCallbacks;\r\n        break\r\n      case 'destroy':\r\n        callbacks = destroyCallbacks;\r\n        break\r\n      default:\r\n        check$1.raise('invalid event, must be one of frame,lost,restore,destroy');\r\n    }\r\n\r\n    callbacks.push(callback);\r\n    return {\r\n      cancel: function () {\r\n        for (var i = 0; i < callbacks.length; ++i) {\r\n          if (callbacks[i] === callback) {\r\n            callbacks[i] = callbacks[callbacks.length - 1];\r\n            callbacks.pop();\r\n            return\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  var regl = extend(compileProcedure, {\r\n    // Clear current FBO\r\n    clear: clear,\r\n\r\n    // Short cuts for dynamic variables\r\n    prop: dynamic.define.bind(null, DYN_PROP),\r\n    context: dynamic.define.bind(null, DYN_CONTEXT),\r\n    this: dynamic.define.bind(null, DYN_STATE),\r\n\r\n    // executes an empty draw command\r\n    draw: compileProcedure({}),\r\n\r\n    // Resources\r\n    buffer: function (options) {\r\n      return bufferState.create(options, GL_ARRAY_BUFFER, false, false)\r\n    },\r\n    elements: function (options) {\r\n      return elementState.create(options, false)\r\n    },\r\n    texture: textureState.create2D,\r\n    cube: textureState.createCube,\r\n    renderbuffer: renderbufferState.create,\r\n    framebuffer: framebufferState.create,\r\n    framebufferCube: framebufferState.createCube,\r\n\r\n    // Expose context attributes\r\n    attributes: glAttributes,\r\n\r\n    // Frame rendering\r\n    frame: frame,\r\n    on: addListener,\r\n\r\n    // System limits\r\n    limits: limits,\r\n    hasExtension: function (name) {\r\n      return limits.extensions.indexOf(name.toLowerCase()) >= 0\r\n    },\r\n\r\n    // Read pixels\r\n    read: readPixels,\r\n\r\n    // Destroy regl and all associated resources\r\n    destroy: destroy,\r\n\r\n    // Direct GL state manipulation\r\n    _gl: gl,\r\n    _refresh: refresh,\r\n\r\n    poll: function () {\r\n      poll();\r\n      if (timer) {\r\n        timer.update();\r\n      }\r\n    },\r\n\r\n    // Current time\r\n    now: now,\r\n\r\n    // regl Statistics Information\r\n    stats: stats$$1\r\n  });\r\n\r\n  config.onDone(null, regl);\r\n\r\n  return regl\r\n}\n\nreturn wrapREGL;\n\n})));\n//# sourceMappingURL=regl.js.map\n","var mouseChange = require('mouse-change')\nvar mouseWheel = require('mouse-wheel')\nvar identity = require('gl-mat4/identity')\nvar perspective = require('gl-mat4/perspective')\nvar lookAt = require('gl-mat4/lookAt')\n\nmodule.exports = createCamera\n\nvar isBrowser = typeof window !== 'undefined'\n\nfunction createCamera (regl, props_) {\n  var props = props_ || {}\n\n  // Preserve backward-compatibilty while renaming preventDefault -> noScroll\n  if (typeof props.noScroll === 'undefined') {\n    props.noScroll = props.preventDefault;\n  }\n\n  var cameraState = {\n    view: identity(new Float32Array(16)),\n    projection: identity(new Float32Array(16)),\n    center: new Float32Array(props.center || 3),\n    theta: props.theta || 0,\n    phi: props.phi || 0,\n    distance: Math.log(props.distance || 10.0),\n    eye: new Float32Array(3),\n    up: new Float32Array(props.up || [0, 1, 0]),\n    fovy: props.fovy || Math.PI / 4.0,\n    near: typeof props.near !== 'undefined' ? props.near : 0.01,\n    far: typeof props.far !== 'undefined' ? props.far : 1000.0,\n    noScroll: typeof props.noScroll !== 'undefined' ? props.noScroll : false,\n    flipY: !!props.flipY,\n    dtheta: 0,\n    dphi: 0,\n    rotationSpeed: typeof props.rotationSpeed !== 'undefined' ? props.rotationSpeed : 1,\n    zoomSpeed: typeof props.zoomSpeed !== 'undefined' ? props.zoomSpeed : 1,\n    renderOnDirty: typeof props.renderOnDirty !== undefined ? !!props.renderOnDirty : false\n  }\n\n  var element = props.element\n  var damping = typeof props.damping !== 'undefined' ? props.damping : 0.9\n\n  var right = new Float32Array([1, 0, 0])\n  var front = new Float32Array([0, 0, 1])\n\n  var minDistance = Math.log('minDistance' in props ? props.minDistance : 0.1)\n  var maxDistance = Math.log('maxDistance' in props ? props.maxDistance : 1000)\n\n  var ddistance = 0\n\n  var prevX = 0\n  var prevY = 0\n\n  if (isBrowser && props.mouse !== false) {\n    var source = element || regl._gl.canvas\n\n    function getWidth () {\n      return element ? element.offsetWidth : window.innerWidth\n    }\n\n    function getHeight () {\n      return element ? element.offsetHeight : window.innerHeight\n    }\n\n    mouseChange(source, function (buttons, x, y) {\n      if (buttons & 1) {\n        var dx = (x - prevX) / getWidth()\n        var dy = (y - prevY) / getHeight()\n\n        cameraState.dtheta += cameraState.rotationSpeed * 4.0 * dx\n        cameraState.dphi += cameraState.rotationSpeed * 4.0 * dy\n        cameraState.dirty = true;\n      }\n      prevX = x\n      prevY = y\n    })\n\n    mouseWheel(source, function (dx, dy) {\n      ddistance += dy / getHeight() * cameraState.zoomSpeed\n      cameraState.dirty = true;\n    }, props.noScroll)\n  }\n\n  function damp (x) {\n    var xd = x * damping\n    if (Math.abs(xd) < 0.1) {\n      return 0\n    }\n    cameraState.dirty = true;\n    return xd\n  }\n\n  function clamp (x, lo, hi) {\n    return Math.min(Math.max(x, lo), hi)\n  }\n\n  function updateCamera (props) {\n    Object.keys(props).forEach(function (prop) {\n      cameraState[prop] = props[prop]\n    })\n\n    var center = cameraState.center\n    var eye = cameraState.eye\n    var up = cameraState.up\n    var dtheta = cameraState.dtheta\n    var dphi = cameraState.dphi\n\n    cameraState.theta += dtheta\n    cameraState.phi = clamp(\n      cameraState.phi + dphi,\n      -Math.PI / 2.0,\n      Math.PI / 2.0)\n    cameraState.distance = clamp(\n      cameraState.distance + ddistance,\n      minDistance,\n      maxDistance)\n\n    cameraState.dtheta = damp(dtheta)\n    cameraState.dphi = damp(dphi)\n    ddistance = damp(ddistance)\n\n    var theta = cameraState.theta\n    var phi = cameraState.phi\n    var r = Math.exp(cameraState.distance)\n\n    var vf = r * Math.sin(theta) * Math.cos(phi)\n    var vr = r * Math.cos(theta) * Math.cos(phi)\n    var vu = r * Math.sin(phi)\n\n    for (var i = 0; i < 3; ++i) {\n      eye[i] = center[i] + vf * front[i] + vr * right[i] + vu * up[i]\n    }\n\n    lookAt(cameraState.view, eye, center, up)\n  }\n\n  cameraState.dirty = true;\n\n  var injectContext = regl({\n    context: Object.assign({}, cameraState, {\n      dirty: function () {\n        return cameraState.dirty;\n      },\n      projection: function (context) {\n        perspective(cameraState.projection,\n          cameraState.fovy,\n          context.viewportWidth / context.viewportHeight,\n          cameraState.near,\n          cameraState.far)\n        if (cameraState.flipY) { cameraState.projection[5] *= -1 }\n        return cameraState.projection\n      }\n    }),\n    uniforms: Object.keys(cameraState).reduce(function (uniforms, name) {\n      uniforms[name] = regl.context(name)\n      return uniforms\n    }, {})\n  })\n\n  function setupCamera (props, block) {\n    if (typeof setupCamera.dirty !== 'undefined') {\n      cameraState.dirty = setupCamera.dirty || cameraState.dirty\n      setupCamera.dirty = undefined;\n    }\n\n    if (props && block) {\n      cameraState.dirty = true;\n    }\n\n    if (cameraState.renderOnDirty && !cameraState.dirty) return;\n\n    if (!block) {\n      block = props\n      props = {}\n    }\n\n    updateCamera(props)\n    injectContext(block)\n    cameraState.dirty = false;\n  }\n\n  Object.keys(cameraState).forEach(function (name) {\n    setupCamera[name] = cameraState[name]\n  })\n\n  return setupCamera\n}\n","'use strict'\n\nmodule.exports = mouseListen\n\nvar mouse = require('mouse-event')\n\nfunction mouseListen (element, callback) {\n  if (!callback) {\n    callback = element\n    element = window\n  }\n\n  var buttonState = 0\n  var x = 0\n  var y = 0\n  var mods = {\n    shift: false,\n    alt: false,\n    control: false,\n    meta: false\n  }\n  var attached = false\n\n  function updateMods (ev) {\n    var changed = false\n    if ('altKey' in ev) {\n      changed = changed || ev.altKey !== mods.alt\n      mods.alt = !!ev.altKey\n    }\n    if ('shiftKey' in ev) {\n      changed = changed || ev.shiftKey !== mods.shift\n      mods.shift = !!ev.shiftKey\n    }\n    if ('ctrlKey' in ev) {\n      changed = changed || ev.ctrlKey !== mods.control\n      mods.control = !!ev.ctrlKey\n    }\n    if ('metaKey' in ev) {\n      changed = changed || ev.metaKey !== mods.meta\n      mods.meta = !!ev.metaKey\n    }\n    return changed\n  }\n\n  function handleEvent (nextButtons, ev) {\n    var nextX = mouse.x(ev)\n    var nextY = mouse.y(ev)\n    if ('buttons' in ev) {\n      nextButtons = ev.buttons | 0\n    }\n    if (nextButtons !== buttonState ||\n      nextX !== x ||\n      nextY !== y ||\n      updateMods(ev)) {\n      buttonState = nextButtons | 0\n      x = nextX || 0\n      y = nextY || 0\n      callback && callback(buttonState, x, y, mods)\n    }\n  }\n\n  function clearState (ev) {\n    handleEvent(0, ev)\n  }\n\n  function handleBlur () {\n    if (buttonState ||\n      x ||\n      y ||\n      mods.shift ||\n      mods.alt ||\n      mods.meta ||\n      mods.control) {\n      x = y = 0\n      buttonState = 0\n      mods.shift = mods.alt = mods.control = mods.meta = false\n      callback && callback(0, 0, 0, mods)\n    }\n  }\n\n  function handleMods (ev) {\n    if (updateMods(ev)) {\n      callback && callback(buttonState, x, y, mods)\n    }\n  }\n\n  function handleMouseMove (ev) {\n    if (mouse.buttons(ev) === 0) {\n      handleEvent(0, ev)\n    } else {\n      handleEvent(buttonState, ev)\n    }\n  }\n\n  function handleMouseDown (ev) {\n    handleEvent(buttonState | mouse.buttons(ev), ev)\n  }\n\n  function handleMouseUp (ev) {\n    handleEvent(buttonState & ~mouse.buttons(ev), ev)\n  }\n\n  function attachListeners () {\n    if (attached) {\n      return\n    }\n    attached = true\n\n    element.addEventListener('mousemove', handleMouseMove)\n\n    element.addEventListener('mousedown', handleMouseDown)\n\n    element.addEventListener('mouseup', handleMouseUp)\n\n    element.addEventListener('mouseleave', clearState)\n    element.addEventListener('mouseenter', clearState)\n    element.addEventListener('mouseout', clearState)\n    element.addEventListener('mouseover', clearState)\n\n    element.addEventListener('blur', handleBlur)\n\n    element.addEventListener('keyup', handleMods)\n    element.addEventListener('keydown', handleMods)\n    element.addEventListener('keypress', handleMods)\n\n    if (element !== window) {\n      window.addEventListener('blur', handleBlur)\n\n      window.addEventListener('keyup', handleMods)\n      window.addEventListener('keydown', handleMods)\n      window.addEventListener('keypress', handleMods)\n    }\n  }\n\n  function detachListeners () {\n    if (!attached) {\n      return\n    }\n    attached = false\n\n    element.removeEventListener('mousemove', handleMouseMove)\n\n    element.removeEventListener('mousedown', handleMouseDown)\n\n    element.removeEventListener('mouseup', handleMouseUp)\n\n    element.removeEventListener('mouseleave', clearState)\n    element.removeEventListener('mouseenter', clearState)\n    element.removeEventListener('mouseout', clearState)\n    element.removeEventListener('mouseover', clearState)\n\n    element.removeEventListener('blur', handleBlur)\n\n    element.removeEventListener('keyup', handleMods)\n    element.removeEventListener('keydown', handleMods)\n    element.removeEventListener('keypress', handleMods)\n\n    if (element !== window) {\n      window.removeEventListener('blur', handleBlur)\n\n      window.removeEventListener('keyup', handleMods)\n      window.removeEventListener('keydown', handleMods)\n      window.removeEventListener('keypress', handleMods)\n    }\n  }\n\n  // Attach listeners\n  attachListeners()\n\n  var result = {\n    element: element\n  }\n\n  Object.defineProperties(result, {\n    enabled: {\n      get: function () { return attached },\n      set: function (f) {\n        if (f) {\n          attachListeners()\n        } else {\n          detachListeners()\n        }\n      },\n      enumerable: true\n    },\n    buttons: {\n      get: function () { return buttonState },\n      enumerable: true\n    },\n    x: {\n      get: function () { return x },\n      enumerable: true\n    },\n    y: {\n      get: function () { return y },\n      enumerable: true\n    },\n    mods: {\n      get: function () { return mods },\n      enumerable: true\n    }\n  })\n\n  return result\n}\n","'use strict'\n\nfunction mouseButtons(ev) {\n  if(typeof ev === 'object') {\n    if('buttons' in ev) {\n      return ev.buttons\n    } else if('which' in ev) {\n      var b = ev.which\n      if(b === 2) {\n        return 4\n      } else if(b === 3) {\n        return 2\n      } else if(b > 0) {\n        return 1<<(b-1)\n      }\n    } else if('button' in ev) {\n      var b = ev.button\n      if(b === 1) {\n        return 4\n      } else if(b === 2) {\n        return 2\n      } else if(b >= 0) {\n        return 1<<b\n      }\n    }\n  }\n  return 0\n}\nexports.buttons = mouseButtons\n\nfunction mouseElement(ev) {\n  return ev.target || ev.srcElement || window\n}\nexports.element = mouseElement\n\nfunction mouseRelativeX(ev) {\n  if(typeof ev === 'object') {\n    if('offsetX' in ev) {\n      return ev.offsetX\n    }\n    var target = mouseElement(ev)\n    var bounds = target.getBoundingClientRect()\n    return ev.clientX - bounds.left\n  }\n  return 0\n}\nexports.x = mouseRelativeX\n\nfunction mouseRelativeY(ev) {\n  if(typeof ev === 'object') {\n    if('offsetY' in ev) {\n      return ev.offsetY\n    }\n    var target = mouseElement(ev)\n    var bounds = target.getBoundingClientRect()\n    return ev.clientY - bounds.top\n  }\n  return 0\n}\nexports.y = mouseRelativeY\n","'use strict'\n\nvar toPX = require('to-px')\n\nmodule.exports = mouseWheelListen\n\nfunction mouseWheelListen(element, callback, noScroll) {\n  if(typeof element === 'function') {\n    noScroll = !!callback\n    callback = element\n    element = window\n  }\n  var lineHeight = toPX('ex', element)\n  var listener = function(ev) {\n    if(noScroll) {\n      ev.preventDefault()\n    }\n    var dx = ev.deltaX || 0\n    var dy = ev.deltaY || 0\n    var dz = ev.deltaZ || 0\n    var mode = ev.deltaMode\n    var scale = 1\n    switch(mode) {\n      case 1:\n        scale = lineHeight\n      break\n      case 2:\n        scale = window.innerHeight\n      break\n    }\n    dx *= scale\n    dy *= scale\n    dz *= scale\n    if(dx || dy || dz) {\n      return callback(dx, dy, dz, ev)\n    }\n  }\n  element.addEventListener('wheel', listener)\n  return listener\n}\n","'use strict'\n\nvar parseUnit = require('parse-unit')\n\nmodule.exports = toPX\n\nvar PIXELS_PER_INCH = getSizeBrutal('in', document.body) // 96\n\n\nfunction getPropertyInPX(element, prop) {\n  var parts = parseUnit(getComputedStyle(element).getPropertyValue(prop))\n  return parts[0] * toPX(parts[1], element)\n}\n\n//This brutal hack is needed\nfunction getSizeBrutal(unit, element) {\n  var testDIV = document.createElement('div')\n  testDIV.style['height'] = '128' + unit\n  element.appendChild(testDIV)\n  var size = getPropertyInPX(testDIV, 'height') / 128\n  element.removeChild(testDIV)\n  return size\n}\n\nfunction toPX(str, element) {\n  if (!str) return null\n\n  element = element || document.body\n  str = (str + '' || 'px').trim().toLowerCase()\n  if(element === window || element === document) {\n    element = document.body\n  }\n\n  switch(str) {\n    case '%':  //Ambiguous, not sure if we should use width or height\n      return element.clientHeight / 100.0\n    case 'ch':\n    case 'ex':\n      return getSizeBrutal(str, element)\n    case 'em':\n      return getPropertyInPX(element, 'font-size')\n    case 'rem':\n      return getPropertyInPX(document.body, 'font-size')\n    case 'vw':\n      return window.innerWidth/100\n    case 'vh':\n      return window.innerHeight/100\n    case 'vmin':\n      return Math.min(window.innerWidth, window.innerHeight) / 100\n    case 'vmax':\n      return Math.max(window.innerWidth, window.innerHeight) / 100\n    case 'in':\n      return PIXELS_PER_INCH\n    case 'cm':\n      return PIXELS_PER_INCH / 2.54\n    case 'mm':\n      return PIXELS_PER_INCH / 25.4\n    case 'pt':\n      return PIXELS_PER_INCH / 72\n    case 'pc':\n      return PIXELS_PER_INCH / 6\n    case 'px':\n      return 1\n  }\n\n  // detect number of units\n  var parts = parseUnit(str)\n  if (!isNaN(parts[0]) && parts[1]) {\n    var px = toPX(parts[1], element)\n    return typeof px === 'number' ? parts[0] * px : null\n  }\n\n  return null\n}\n","module.exports = function parseUnit(str, out) {\n    if (!out)\n        out = [ 0, '' ]\n\n    str = String(str)\n    var num = parseFloat(str, 10)\n    out[0] = num\n    out[1] = str.match(/[\\d.\\-\\+]*\\s*(.*)/)[1] || ''\n    return out\n}","module.exports = perspective;\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nfunction perspective(out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};","var identity = require('./identity');\n\nmodule.exports = lookAt;\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nfunction lookAt(out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < 0.000001 &&\n        Math.abs(eyey - centery) < 0.000001 &&\n        Math.abs(eyez - centerz) < 0.000001) {\n        return identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};"],"sourceRoot":""}